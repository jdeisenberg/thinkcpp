<section xml:id="chapter13_coding-practice">
        <title>Coding Practice</title>
        <exercise xml:id=""><TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter13', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">

<exercise label="cp_13_AC_2q">
    <statement>
                <p>How long is a year on other planets? Let&#8217;s write a program that prints out the number of days
                    in a year on each planet using a switch statement. These values are, in planetary order,
                    88 days, 225 days, 365 days, 687 days, 4333 days, 10759 days, 30687 days, and 60190 days.
                    Print out this information in the following format: Planet <c>planet</c> has <c>numDays</c> number of days in
                    a year! Select the Parsonsprob tab for hints for the construction of the code.</p>

    </statement>
    <program xml:id="cp_13_AC_2q_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

enum Planet { MERCURY = 1, VENUS, EARTH, MARS, JUPITER, SATURN, URANUS, NEPTUNE };

int main() {
    Planet p = JUPITER;
    // Write your code here.
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </TabNode><TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter13', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
<exercise label="cp_13_AC_2_pp" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
                <p>How long is a year on other planets? Let&#8217;s write a program that prints out the number of days
                    in a year on each planet using a switch statement. These values are, in planetary order,
                    88 days, 225 days, 365 days, 687 days, 4333 days, 10759 days, 30687 days, and 60190 days.
                    Print out this information in the following format: Planet <c>planet</c> has <c>numDays</c> number of days in
                    a year! Use the lines to construct the code, then go back to complete the Activecode tab.</p>
</statement>
<blocks><block order="14">
<cline>enum Planet { MERCURY = 1, VENUS, EARTH, MARS, JUPITER, SATURN, URANUS, NEPTUNE };</cline>
</block><block order="11">
<cline>int main() {</cline>
</block><block order="8">
<cline>    Planet p = VENUS;</cline>
</block><block order="6">
<cline>    switch (p) {</cline>
</block><block order="9">
<cline>        case 1:</cline>
<cline>            cout &lt;&lt; "Planet Mercury has 88 number of days in a year!" &lt;&lt; endl;</cline>
<cline>            break;</cline>
</block><block order="7">
<cline>        case 2:</cline>
<cline>            cout &lt;&lt; "Planet Venus has 225 number of days in a year!" &lt;&lt; endl;</cline>
<cline>            break;</cline>
</block><block order="1">
<cline>        case 3:</cline>
<cline>            cout &lt;&lt; "Planet Earth has 365 number of days in a year!" &lt;&lt; endl;</cline>
<cline>            break;</cline>
</block><block order="5">
<cline>        case 4:</cline>
<cline>            cout &lt;&lt; "Planet Mars has 687 number of days in a year!" &lt;&lt; endl;</cline>
<cline>            break;</cline>
</block><block order="12">
<cline>        case 5:</cline>
<cline>            cout &lt;&lt; "Planet Jupiter has 4333 number of days in a year!" &lt;&lt; endl;</cline>
<cline>            break;</cline>
</block><block order="10">
<cline>        case 6:</cline>
<cline>            cout &lt;&lt; "Planet Saturn has 10759 number of days in a year!" &lt;&lt; endl;</cline>
<cline>            break;</cline>
</block><block order="13">
<cline>        case 7:</cline>
<cline>            cout &lt;&lt; "Planet Uranus has 30687 number of days in a year!" &lt;&lt; endl;</cline>
<cline>            break;</cline>
</block><block order="3">
<cline>        case 8:</cline>
<cline>            cout &lt;&lt; "Planet Neptune has 60190 number of days in a year!" &lt;&lt; endl;</cline>
<cline>            break;</cline>
</block><block order="2">
<cline>    }</cline>
</block><block order="4">
<cline>}</cline>
</block></blocks></exercise>            </TabNode></exercise>
        <exercise xml:id=""><TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter13', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">

<exercise label="cp_13_AC_4q">
    <statement>
                <p>Now let&#8217;s generate a <c>BingoBoard</c>! We want to fill the 25 <c>Space</c>s on the <c>BingoBoard</c> with
                    random values from 1 to 75 without repititon. To do this, we&#8217;ll make a <c>vector</c>
                    of numbers from 1 to 75 and shuffle it using the same method as shown in this chapter. Then
                    we will select the first 25 values for the 25 spaces on the <c>BingoBoard</c>. We will
                    do this entire process in multiple steps. First, write the function <c>randomInt</c>, which
                    generates a random value between low and high, inclusive. Be sure to include the relevant libraries!
                    Select the Parsonsprob tab for hints for the construction of the code.</p>

    </statement>
    <program xml:id="cp_13_AC_4q_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
// Add any relevant libraries here.
using namespace std;

// Write your code for the randomInt function here.
        </input>
<tests>


</tests>

    </program>
</exercise>
            </TabNode><TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter13', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
<exercise label="cp_13_AC_4_pp" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
                <p>Now let&#8217;s generate a <c>BingoBoard</c>! We want to fill the 25 <c>Space</c>s on the <c>BingoBoard</c> with
                    random values from 1 to 75 without repititon. To do this, we&#8217;ll make a <c>vector</c>
                    of numbers from 1 to 75 and shuffle it using the same method as shown in this chapter. Then
                    we will select the first 25 values for the 25 spaces on the <c>BingoBoard</c>. We will
                    do this entire process in multiple steps. First, write the function <c>randomInt</c>, which
                    generates a random value between low and high, inclusive. Be sure to include the relevant libraries!
                    Use the lines to construct the code, then go back to complete the Activecode tab.</p>
</statement>
<blocks><block order="2">
<cline>int randomInt(int low, int high) {</cline>
</block><block order="3">
<cline>   srand(time(NULL));</cline>
</block><block order="4">
<cline>   int x = random();</cline>
</block><block order="6">
<cline>   int y = x % (high - low + 1) + low;</cline>
</block><block order="5">
<cline>   return y;</cline>
</block><block order="1">
<cline>}</cline>
</block></blocks></exercise>            </TabNode></exercise>
        <exercise xml:id=""><TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter13', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">

<exercise label="cp_13_AC_6q">
    <statement>
                <p>Now that we have the functions <c>randomInt</c> and <c>swapValues</c>, we can write the function
                    <c>generateRandVec</c>. <c>generateRandVec</c> creates a <c>vector</c> with values from 1 to 75,
                    shuffles it using <c>randomInt</c> and <c>swapValues</c>, and returns the shuffled <c>vector</c>.
                    Select the Parsonsprob tab for hints for the construction of the code.</p>

    </statement>
    <program xml:id="cp_13_AC_6q_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;cstdlib&gt;
#include &lt;numeric&gt;
using namespace std;

// Write your code for the generateRandVec function here.
        </input>
<tests>


</tests>

    </program>
</exercise>
            </TabNode><TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter13', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
<exercise label="cp_13_AC_6_pp" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
                <p>Now that we have the functions <c>randomInt</c> and <c>swapValues</c>, we can write the function
                    <c>generateRandVec</c>. <c>generateRandVec</c> creates a <c>vector</c> with values from 1 to 75,
                    shuffles it using <c>randomInt</c> and <c>swapValues</c>, and returns the shuffled <c>vector</c>.
                    Use the lines to construct the code, then go back to complete the Activecode tab.</p>
</statement>
<blocks><block order="4">
<cline>vector&lt;int&gt; generateRandVec() {</cline>
</block><block order="1">
<cline>   vector&lt;int&gt; vec(75);</cline>
</block><block order="6">
<cline>   iota(vec.begin(), vec.end(), 1);</cline>
</block><block order="8">
<cline>   for (size_t i = 0; i &lt; vec.size(); ++i) {</cline>
</block><block order="2">
<cline>       int x = randomInt(i, vec.size() - 1);</cline>
</block><block order="3">
<cline>       swapValues(vec, i, x);</cline>
</block><block order="9">
<cline>   }</cline>
</block><block order="5">
<cline>   return vec;</cline>
</block><block order="7">
<cline>}</cline>
</block></blocks></exercise>            </TabNode></exercise>
        <exercise xml:id=""><TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter13', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">

<exercise label="cp_13_AC_8q">
    <statement>
                <p>Let&#8217;s print out our <c>BingoBoard</c>! Write the <c>BingoBoard</c> member function
                    <c>printBoard</c>. Insert tabs between each value in each row to make the board
                    print out neater. Select the Parsonsprob tab for hints for the construction of the code.</p>

    </statement>
    <program xml:id="cp_13_AC_8q_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;cstdlib&gt;
#include &lt;numeric&gt;
using namespace std;

struct Space {
    int value;
    bool is_filled;
};

struct BingoBoard {
    vector&lt;vector&lt;Space&gt; &gt; board;
    void makeBoard ();
    void printBoard ();
};

int randomInt (int low, int high);
void swapValues (vector&lt;int&gt; &amp;vec, int index1, int index2);
vector&lt;int&gt; generateRandVec ();

// Write your code for the printBoard function here.

int main() {
    BingoBoard bingo;
    bingo.makeBoard ();
    bingo.printBoard ();
}
        </input>
<tests>
int randomInt(int low, int high) {
    srand(time(NULL));
    int x = random();
    int y = x % (high - low + 1) + low;
    return y;
}

void swapValues(vector&lt;int&gt; &amp;vec, int index1, int index2) {
    int temp = vec[index1];
    vec[index1] = vec[index2];
    vec[index2] = temp;
}

vector&lt;int&gt; generateRandVec() {
    vector&lt;int&gt; vec(75);
    iota(vec.begin(), vec.end(), 1);
    for (size_t i = 0; i &lt; vec.size(); ++i) {
        int x = randomInt(i, vec.size() - 1);
        swapValues(vec, i, x);
    }
    return vec;
}

void BingoBoard::makeBoard() {
    // Initialize board
    Space s = {0, false};
    vector&lt;Space&gt; cols(5, s);
    for (size_t i = 0; i &lt; 5; ++i) {
        board.push_back(cols);
    }

    // Fill board with random values
    vector&lt;int&gt; vec = generateRandVec();
    int count = 0;
    for (size_t row = 0; row &lt; board.size(); ++row) {
        for (size_t col = 0; col &lt; board[row].size(); ++col) {
        board[row][col].value = vec[count];
        ++count;
        }
    }

    // Create free space
    board[2][2].value = 0;
    board[2][2].is_filled = true;
}
</tests>

    </program>
</exercise>
            </TabNode><TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter13', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
<exercise label="cp_13_AC_8_pp" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
                <p>Let&#8217;s print out our <c>BingoBoard</c>! Write the <c>BingoBoard</c> member function
                    <c>printBoard</c>. Insert tabs between each value in each row to make the board
                    print out neater. Use the lines to construct the code, then go back to complete the Activecode tab.</p>
</statement>
<blocks><block order="6">
<cline>void BingoBoard::printBoard () {</cline>
</block><block order="1">
<cline>    for (size_t j = 0; j &lt; board.size(); j++) {</cline>
</block><block order="4">
<cline>        for (size_t i = 0; i &lt; board[j].size(); i++) {</cline>
</block><block order="3">
<cline>            cout &lt;&lt; board[j][i].value &lt;&lt; "\t";</cline>
</block><block order="5">
<cline>        }</cline>
</block><block order="2">
<cline>        cout &lt;&lt; endl;</cline>
</block><block order="8">
<cline>    }</cline>
</block><block order="7">
<cline>}</cline>
</block></blocks></exercise>            </TabNode></exercise>
        <exercise xml:id=""><TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter13', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">

<exercise label="cp_13_AC_10q">
    <statement>
                <p>You may have noticed that in some cases, our version of <c>bubbleSort</c> does
                    an unnecessary amount of work. For example, if our <c>vector</c> was {1, 2, 3, 5, 4},
                    <c>bubbleSort</c> would swap 4 and 5, but then keep going even though our <c>vector</c>
                    is already in order! We can save some work by including a <c>bool</c> called <c>is_changed</c>.
                    If we swap values during a pass, we set <c>is_changed</c> to true. If nothing has been swapped,
                    then <c>is_changed</c> stays false, and we know to break out of the loop since our <c>vector</c>
                    is already sorted. Write the function <c>fastBubbleSort</c>, which is <c>bubbleSort</c> with this
                    modification. Select the Parsonsprob tab for hints for the construction of the code.</p>

    </statement>
    <program xml:id="cp_13_AC_10q_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

void swapValues(vector&lt;int&gt; &amp;vec, int index1, int index2) {
    int temp = vec[index1];
    vec[index1] = vec[index2];
    vec[index2] = temp;
}

// Write your code for the fastBubbleSort function here.

int main() {
    vector&lt;int&gt; vec = { 1, 3, 5, 4, 6, 8, 9 };
    fastBubbleSort (vec);
    for (size_t i = 0; i &lt; vec.size(); ++i) {
        cout &lt;&lt; vec[i] &lt;&lt; " ";
    }
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </TabNode><TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter13', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
<exercise label="cp_13_AC_10_pp" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
                <p>You may have noticed that in some cases, our version of <c>bubbleSort</c> does
                    an unnecessary amount of work. For example, if our <c>vector</c> was {1, 2, 3, 5, 4},
                    <c>bubbleSort</c> would swap 4 and 5, but then keep going even though our <c>vector</c>
                    is already in order! We can save some work by including a <c>bool</c> called <c>is_changed</c>.
                    If we swap values during a pass, we set <c>is_changed</c> to true. If nothing has been swapped,
                    then <c>is_changed</c> stays false, and we know to break out of the loop since our <c>vector</c>
                    is already sorted. Write the function <c>fastBubbleSort</c>, which is <c>bubbleSort</c> with this
                    modification. Use the lines to construct the code, then go back to complete the Activecode tab.</p>
</statement>
<blocks><block order="13">
<cline>void fastBubbleSort(vector&lt;int&gt; &amp;vec) {</cline>
</block><block order="7">
<cline>    bool is_changed = false;</cline>
</block><block order="1">
<cline>    for (size_t i = 0; i &lt; vec.size() - 1; ++i) {</cline>
</block><block order="3">
<cline>        for (size_t j = 0; j &lt; vec.size() - 1 - i; ++j) {</cline>
</block><block order="11">
<cline>            if (vec[j] &gt; vec[j + 1]) {</cline>
</block><block order="4">
<cline>                swapValues(vec, j, j + 1);</cline>
</block><block order="5">
<cline>                is_changed = true;</cline>
</block><block order="6">
<cline>            }</cline>
</block><block order="10">
<cline>            if (is_changed == false) {</cline>
</block><block order="12">
<cline>                break;</cline>
</block><block order="8">
<cline>            }</cline>
</block><block order="2">
<cline>        }</cline>
</block><block order="14">
<cline>    }</cline>
</block><block order="9">
<cline>}</cline>
</block></blocks></exercise>            </TabNode></exercise>
    </section>

