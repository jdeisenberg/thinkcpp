<section xml:id="chapter13_deck-member-functions">
        <title><c>Deck</c> member functions</title>
        <p>Now that we have a <c>Deck</c> object, it makes sense to put all the
            functions that pertain to <c>Deck</c>s in the <c>Deck</c> structure
            definition. Looking at the functions we have written so far, one obvious
            candidate is <c>printDeck</c> (<number_reference internal="True" refuri="../Chapter12/the_printdeck_function#printdeck" title="Section %s"><inline classes="std std-numref">Section 12.7</inline></number_reference>).
            Here&#8217;s how it looks, rewritten as a <c>Deck</c> member function:</p>
        <pre>void Deck::print () const {
  for (size_t i = 0; i &lt; cards.size(); i++) {
    cards[i].print ();
  }
}</pre>
        <p>As usual, we can refer to the instance variables of the current object
            without using dot notation.</p>

<exercise label="deck_members_AC_1">
    <statement>
        <p>The active code below prints out the deck of cards like in the previous section. Notice we can just use <c>deck.print ()</c>
            to print out the deck instead of writing a for loop in main.</p>

    </statement>
    <program xml:id="deck_members_AC_1_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
using namespace std;

enum Suit { CLUBS, DIAMONDS, HEARTS, SPADES };

enum Rank { ACE=1, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE,
TEN, JACK, QUEEN, KING };

struct Card {
    Rank rank;
    Suit suit;
    Card ();
    Card (Suit s, Rank r);
    void print () const;
};

struct Deck {
    vector&lt;Card&amp;gt; cards;
    Deck ();
   void print () const;
};

int main() {
    Deck deck;
    deck.print ();
}

        </input>
<tests>
Card::Card () {
    suit = SPADES;  rank = ACE;
}

Card::Card (Suit s, Rank r) {
    suit = s;  rank = r;
}

void Card::print () const {
    vector&lt;string&gt; suits (4);
    suits[0] = "Clubs";
    suits[1] = "Diamonds";
    suits[2] = "Hearts";
    suits[3] = "Spades";

    vector&lt;string&gt; ranks (14);
    ranks[1] = "Ace";
    ranks[2] = "2";
   ranks[3] = "3";
    ranks[4] = "4";
    ranks[5] = "5";
    ranks[6] = "6";
    ranks[7] = "7";
    ranks[8] = "8";
    ranks[9] = "9";
    ranks[10] = "10";
    ranks[11] = "Jack";
    ranks[12] = "Queen";
    ranks[13] = "King";

    cout &lt;&lt; ranks[rank] &lt;&lt; " of " &lt;&lt; suits[suit] &lt;&lt; endl;
}

Deck::Deck () {
    vector&lt;Card&amp;gt; temp (52);
    cards = temp;

    int i = 0;
    for (Suit suit = CLUBS; suit &lt;= SPADES; suit = Suit(suit+1)) {
        for (Rank rank = ACE; rank &lt;= KING; rank = Rank(rank+1)) {
            cards[i].suit = suit;
            cards[i].rank = rank;
            i++;
        }
    }
}

void Deck::print () const {
    for (size_t i = 0; i &lt; cards.size(); i++) {
        cards[i].print ();
    }
}
</tests>

    </program>
</exercise>
        <p>For some of the other functions, it is not obvious whether they should
            be member functions of <c>Card</c>, member functions of <c>Deck</c>, or
            nonmember functions that take <c>Card</c>s and <c>Deck</c>s as parameters.
            For example, the version of <c>find</c> in the previous chapter takes a
            <c>Card</c> and a <c>Deck</c> as arguments, but you could reasonably make it a
            member function of either type. As an exercise, rewrite <c>find</c> as a
            <c>Deck</c> member function that takes a <c>Card</c> as a parameter.</p>
        <p>Writing <c>find</c> as a <c>Card</c> member function is a little tricky.
            Here&#8217;s my version:</p>
        <pre>int Card::find (const Deck&amp; deck) const {
  for (size_t i = 0; i &lt; deck.cards.size(); i++) {
    if (equals (deck.cards[i], *this)) return i;
  }
  return -1;
}</pre>
        <p>The first trick is that we have to use the keyword <c>this</c> to refer to
            the <c>Card</c> the function is invoked on.</p>
        <p>The second trick is that C++ does not make it easy to write structure
            definitions that refer to each other. The problem is that when the
            compiler is reading the first structure definition, it doesn&#8217;t know
            about the second one yet.</p>
        <p>One solution is to declare <c>Deck</c> before <c>Card</c> and then define
            <c>Deck</c> afterwards:</p>
        <pre>// declare that Deck is a structure, without defining it
struct Deck;

// that way we can refer to it in the definition of Card
struct Card {
  int suit, rank;

  Card ();
  Card (int s, int r);

  void print () const;
  bool isGreater (const Card&amp;amp; c2) const;
  int find (const Deck&amp; deck) const;
};

// and then later we provide the definition of Deck
struct Deck {
  vector&lt;Card&amp;gt; cards;

  Deck ();
  Deck (int n);
  void print () const;
  int find (const Card&amp;amp; card) const;
};</pre>
        

    <exercise label="deck_members_1">
        <statement>

        <p>Q-2: Multiple Response: What are some tricks we can use to write <c>find</c> as a <c>Card</c> member function?</p>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>Use the keyword this.</p>
                </statement>
                <feedback>
                    <p>We use this to refer to the Card that the function is invoked on.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Define Deck before Card.</p>
                </statement>
                <feedback>
                    <p>We don't have to define Deck before Card.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Pass a Card parameter in the Card member function find.</p>
                </statement>
                <feedback>
                    <p>What do we pass as a parameter in find?</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Declare Deck before Card and then define Deck afterwards.</p>
                </statement>
                <feedback>
                    <p>This is how we implemented our code!</p>
                </feedback>
            </choice>
</choices>

    </exercise>
<exercise label="deck_members_2" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>Write find as a Deck member function that takes a Card as a parameter.</p>
</statement>
<blocks><block order="2">
<choice correct="yes"><cline>int Deck::find (Card card) const {</cline>
</choice><choice><cline>int find (Card) {                         </cline>
</choice></block><block order="4">
<choice correct="yes"><cline>   for (size_t i = 0; i &lt; cards.size(); i++) {</cline>
</choice><choice><cline>   for (size_t i = 0; i &lt; deck.cards.size(); i++) {                       </cline>
</choice></block><block order="5">
<choice correct="yes"><cline>      if (cards[i].equals(card)) {</cline>
<cline>         return i;</cline>
<cline>      }</cline>
</choice><choice><cline>      if (equals (deck.cards[i], *this)) {                         </cline>
<cline>         return i;</cline>
<cline>      }</cline>
</choice></block><block order="1">
<cline>   }</cline>
<cline>   return -1;</cline>
<cline>}</cline>
</block></blocks></exercise>
<exercise label="deck_members_AC_2">
    <statement>
        <p>The active code below uses the <c>find</c> function that we just wrote.</p>

    </statement>
    <program xml:id="deck_members_AC_2_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
using namespace std;

enum Suit { CLUBS, DIAMONDS, HEARTS, SPADES };

enum Rank { ACE=1, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE,
TEN, JACK, QUEEN, KING };

struct Card {
    Rank rank;
    Suit suit;
    Card ();
    Card (Suit s, Rank r);
    void print () const;
    bool equals (const Card&amp; c2) const;
};

struct Deck {
    vector&lt;Card&amp;gt; cards;
    Deck ();
    void print () const;
    int find (Card card) const;
};

int main() {
    Deck deck;
    Card card (CLUBS, ACE);
    Card card2 (DIAMONDS, ACE);
    // Should output 0 and 13
    cout &lt;&lt; deck.find(card) &lt;&lt; endl;
    cout &lt;&lt; deck.find(card2) &lt;&lt; endl;
}

        </input>
<tests>
Card::Card () {
    suit = SPADES;  rank = ACE;
}

Card::Card (Suit s, Rank r) {
    suit = s;  rank = r;
}

void Card::print () const {
    vector&lt;string&gt; suits (4);
    suits[0] = "Clubs";
    suits[1] = "Diamonds";
    suits[2] = "Hearts";
    suits[3] = "Spades";

    vector&lt;string&gt; ranks (14);
    ranks[1] = "Ace";
    ranks[2] = "2";
    ranks[3] = "3";
    ranks[4] = "4";
    ranks[5] = "5";
    ranks[6] = "6";
    ranks[7] = "7";
    ranks[8] = "8";
    ranks[9] = "9";
    ranks[10] = "10";
    ranks[11] = "Jack";
    ranks[12] = "Queen";
    ranks[13] = "King";

    cout &lt;&lt; ranks[rank] &lt;&lt; " of " &lt;&lt; suits[suit] &lt;&lt; endl;
}

Deck::Deck () {
    vector&lt;Card&amp;gt; temp (52);
    cards = temp;

    int i = 0;
    for (Suit suit = CLUBS; suit &lt;= SPADES; suit = Suit(suit+1)) {
        for (Rank rank = ACE; rank &lt;= KING; rank = Rank(rank+1)) {
            cards[i].suit = suit;
            cards[i].rank = rank;
            i++;
        }
    }
}

void Deck::print () const {
    for (size_t i = 0; i &lt; cards.size(); i++) {
        cards[i].print ();
    }
}

int Deck::find (Card card) const {
    for (size_t i = 0; i &lt; cards.size(); i++) {
        if (cards[i].equals(card)) {
            return i;
        }
    }
    return -1;
}

bool Card::equals (const Card&amp; c2) const {
    return (rank == c2.rank &amp;&amp; suit == c2.suit);
}
</tests>

    </program>
</exercise>
    </section>

