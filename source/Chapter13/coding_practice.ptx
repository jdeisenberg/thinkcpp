<section xml:id="chapter13_coding-practice">
        <title>Coding Practice</title>
        <exercise xml:id=""><statement/><program interactive="" language="" xml:id=""/><solution>
                Below is one way to implement the program. The planets in our solar system
                    are Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, and Neptune.

    <program xml:id="cp_13_AC_1a" language="cpp">
    
        <input>
#include &lt;iostream&gt;
using namespace std;

enum Planet { MERCURY = 1, VENUS, EARTH, MARS, JUPITER, SATURN, URANUS, NEPTUNE };
        </input>
<tests>


</tests>

    </program>
            
                <p>Below is one way to implement the program. The planets in our solar system
                    are Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, and Neptune.</p>

    
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=cp_13_AC_2_sq data-questionlist='cp_13_AC_2q, cp_13_AC_2_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: cp_13_AC_2q, cp_13_AC_2_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
        <exercise xml:id=""><statement/><program interactive="" language="" xml:id=""/><solution>
                Below is one way to implement the program. We declare the Space and BingoBoard struct
                    and create the instance variables in order. Make sure to set is_filled to false!

    <program xml:id="cp_13_AC_3a" language="cpp">
    
        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

struct Space {
    int value;
    bool is_filled;
};

struct BingoBoard {
    vector&lt;vector&lt;Space&gt; &gt; board;
};
        </input>
<tests>


</tests>

    </program>
            
                <p>Below is one way to implement the program. We declare the <c>Space</c> and <c>BingoBoard</c> struct
                    and create the instance variables in order. Make sure to set <c>is_filled</c> to <c>false</c>!</p>

    
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=cp_13_AC_4_sq data-questionlist='cp_13_AC_4q, cp_13_AC_4_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: cp_13_AC_4q, cp_13_AC_4_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
        <exercise xml:id=""><statement/><program interactive="" language="" xml:id=""/><solution>
                Below is one way to implement the program. We store the value at index1 in a temp
                    variable, replace the value at index1 with the value at index2, and then finally
                    replace the value at index2 with the value of temp. Make sure to pass
                    vec by reference!

    <program xml:id="cp_13_AC_5a" language="cpp">
    
        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

void swapValues (vector&lt;int&gt; &amp;vec, int index1, int index2) {
    int temp = vec[index1];
    vec[index1] = vec[index2];
    vec[index2] = temp;
}
        </input>
<tests>


</tests>

    </program>
            
                <p>Below is one way to implement the program. We store the value at <c>index1</c> in a <c>temp</c>
                    variable, replace the value at <c>index1</c> with the value at <c>index2</c>, and then finally
                    replace the value at <c>index2</c> with the value of <c>temp</c>. Make sure to pass
                    <c>vec</c> by reference!</p>

    
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=cp_13_AC_6_sq data-questionlist='cp_13_AC_6q, cp_13_AC_6_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: cp_13_AC_6q, cp_13_AC_6_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
        <exercise xml:id=""><statement/><program interactive="" language="" xml:id=""/><solution>
                Below is one way to implement the program. First we need to initialize
                    the board to the correct dimensions. Then, we use generateRandVec
                    to create a vector of random values from 1 to 75. Afterwards, we set
                    the values of the 25 Spaces to the first 25 values in the
                    random vector. Lastly, we set the middle Space to 0 and
                    set its is_filled to true.

    <program xml:id="cp_13_AC_7a" language="cpp">
    
        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;cstdlib&gt;
#include &lt;numeric&gt;
using namespace std;

struct Space {
    int value;
    bool is_filled;
};

struct BingoBoard {
    vector&lt;vector&lt;Space&gt; &gt; board;
    void makeBoard ();
};

int randomInt (int low, int high);
void swapValues (vector&lt;int&gt; &amp;vec, int index1, int index2);
vector&lt;int&gt; generateRandVec ();

void BingoBoard::makeBoard() {
    // Initialize board
    Space s = {0, false};
    vector&lt;Space&gt; cols(5, s);
    for (size_t i = 0; i &lt; 5; ++i) {
        board.push_back(cols);
    }

    // Fill board with random values
    vector&lt;int&gt; vec = generateRandVec();
    int count = 0;
    for (size_t row = 0; row &lt; board.size(); ++row) {
        for (size_t col = 0; col &lt; board[row].size(); ++col) {
        board[row][col].value = vec[count];
        ++count;
        }
    }

    // Create free space
    board[2][2].value = 0;
    board[2][2].is_filled = true;
}
        </input>
<tests>
int randomInt(int low, int high) {
    srand(time(NULL));
    int x = random();
    int y = x % (high - low + 1) + low;
    return y;
}

void swapValues(vector&lt;int&gt; &amp;vec, int index1, int index2) {
    int temp = vec[index1];
    vec[index1] = vec[index2];
    vec[index2] = temp;
}

vector&lt;int&gt; generateRandVec() {
    vector&lt;int&gt; vec(75);
    iota(vec.begin(), vec.end(), 1);
    for (size_t i = 0; i &lt; vec.size(); ++i) {
        int x = randomInt(i, vec.size() - 1);
        swapValues(vec, i, x);
    }
    return vec;
}
</tests>

    </program>
            
                <p>Below is one way to implement the program. First we need to initialize
                    the board to the correct dimensions. Then, we use <c>generateRandVec</c>
                    to create a <c>vector</c> of random values from 1 to 75. Afterwards, we set
                    the values of the 25 <c>Space</c>s to the first 25 values in the
                    random <c>vector</c>. Lastly, we set the middle <c>Space</c> to 0 and
                    set its <c>is_filled</c> to <c>true</c>.</p>

    
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=cp_13_AC_8_sq data-questionlist='cp_13_AC_8q, cp_13_AC_8_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: cp_13_AC_8q, cp_13_AC_8_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
        <exercise xml:id=""><statement/><program interactive="" language="" xml:id=""/><solution>
                Below is one way to implement the program. We must loop through all elements
                    in the vector. Since we know the last i elements are already in place,
                    our inner loop only goes up to vec.size() - 1 - i. If the next element
                    is greater than the current element, we swap the two elements.

    <program xml:id="cp_13_AC_9a" language="cpp">
    
        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

void swapValues(vector&lt;int&gt; &amp;vec, int index1, int index2) {
    int temp = vec[index1];
    vec[index1] = vec[index2];
    vec[index2] = temp;
}

void bubbleSort(vector&lt;int&gt; &amp;vec) {
    for (size_t i = 0; i &lt; vec.size() - 1; ++i) {
        for (size_t j = 0; j &lt; vec.size() - 1 - i; ++j) {
            if (vec[j] &gt; vec[j + 1]) {
                swapValues(vec, j, j + 1);
            }
        }
    }
}

int main() {
    vector&lt;int&gt; vec = { 5, 1, 4, 2, 8 };
    bubbleSort (vec);
    for (size_t i = 0; i &lt; vec.size(); ++i) {
        cout &lt;&lt; vec[i] &lt;&lt; " ";
    }
}
        </input>
<tests>


</tests>

    </program>
            
                <p>Below is one way to implement the program. We must loop through all elements
                    in the vector. Since we know the last <c>i</c> elements are already in place,
                    our inner loop only goes up to <c>vec.size() - 1 - i</c>. If the next element
                    is greater than the current element, we swap the two elements.</p>

    
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=cp_13_AC_10_sq data-questionlist='cp_13_AC_10q, cp_13_AC_10_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: cp_13_AC_10q, cp_13_AC_10_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
    </section>

