<section xml:id="chapter12_coding-practice">
        <title>Coding Practice</title>
        <exercise xml:id=""><statement>
                <p>A pixel is the smallest controllable element of a picture represented on the screen. Images
                    are comprised of numerous individual pixels, and each pixel&#8217;s color sample has three numerical
                    RGB (red, green, blue) components to represent the color of that pixel. The intensity value of
                    each RGB component ranges from 0 to 255, where 0 is no intensity and 255 is highest intensity.
                    Write the <c>struct</c> definition for <c>Pixel</c>, which has values for each component r, g, and b.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="cp_12_AC_1q_editor">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

// Write your code for the struct Pixel here.
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to implement the program. We declare the Pixel struct
                    and create the instance variables in order.

    
    <program xml:id="cp_12_AC_1a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
};
        </input>
<tests>


</tests>

    </program>

            

<exercise label="cp_12_AC_1a">
    <statement>
                <p>Below is one way to implement the program. We declare the <c>Pixel</c> struct
                    and create the instance variables in order.</p>

    </statement>
    <program xml:id="cp_12_AC_1a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
};
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=cp_12_AC_2_sq data-questionlist='cp_12_AC_2q, cp_12_AC_2_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: cp_12_AC_2q, cp_12_AC_2_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
        <exercise xml:id=""><statement>
                <p>Let&#8217;s print out a <c>Pixel</c>! Write the <c>Pixel</c> member function <c>printPixel</c>,
                    which prints out the values of the <c>Pixel</c> in this form: (r, g, b).</p>

    </statement><program interactive="activecode" language="cpp" xml:id="cp_12_AC_3q_editor">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
    void printPixel();
};

// Write your implementation of printPixel here.

int main() {
    Pixel p = {0, 0, 0};
    p.printPixel();
}
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to implement the program. We use the scope resolution
                    operator to make printPixel a Pixel member function.

    
    <program xml:id="cp_12_AC_3a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
    void printPixel();
};

void Pixel::printPixel() {
    cout &lt;&lt; "("&lt;&lt; r &lt;&lt; ", " &lt;&lt; g &lt;&lt; ", " &lt;&lt; b &lt;&lt; ")";
}

int main() {
    Pixel p = {0, 0, 0};
    p.printPixel();
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="cp_12_AC_3a">
    <statement>
                <p>Below is one way to implement the program. We use the scope resolution
                    operator to make <c>printPixel</c> a <c>Pixel</c> member function.</p>

    </statement>
    <program xml:id="cp_12_AC_3a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
    void printPixel();
};

void Pixel::printPixel() {
    cout &lt;&lt; "("&lt;&lt; r &lt;&lt; ", " &lt;&lt; g &lt;&lt; ", " &lt;&lt; b &lt;&lt; ")";
}

int main() {
    Pixel p = {0, 0, 0};
    p.printPixel();
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=cp_12_AC_4_sq data-questionlist='cp_12_AC_4q, cp_12_AC_4_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: cp_12_AC_4q, cp_12_AC_4_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
        <exercise xml:id=""><statement>
                <p>Somebody photobombed our image! What if we wanted to crop the photobomber out?
                    Let&#8217;s write the <c>Image</c> member function <c>cropImage</c>, which takes four paramenters,
                    a start and stop row and a start and stop column. It then modifies the matrix to the
                    cropped matrix.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="cp_12_AC_5q_editor">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
    void printPixel();
};

struct Image {
    int height;
    int width;
    vector&lt;vector&lt;Pixel&gt; &gt; matrix;
    void printImage();
    void cropImage(int startRow, int stopRow, int startCol, int stopCol);
};

// Write your implementation of cropImage here.

int main() {
    vector&lt;vector&lt;Pixel&gt; &gt; matrix = { { { 0, 255, 255 }, { 0, 0, 0 }, { 255, 255, 255 } },
                                      { { 30, 60, 50 }, { 20, 135, 200 }, { 60, 80, 125 } },
                                      { { 10, 0, 50 }, { 30, 65, 225 }, { 25, 105, 125 } },
                                      { { 255, 60, 0 }, { 20, 25, 255 }, { 65, 55, 0 } } };
    Image image = { 4, 3, matrix };
    image.printImage();
    cout &lt;&lt; endl;
    image.cropImage(2, 3, 1, 2);
    image.printImage();
}
        </input>
<tests>
void Pixel::printPixel() {
    cout &lt;&lt; "("&lt;&lt; r &lt;&lt; ", " &lt;&lt; g &lt;&lt; ", " &lt;&lt; b &lt;&lt; ")";
}

void Image::printImage() {
    for (int r = 0; r &lt; height; ++r) {
    for (int c = 0; c &lt; width; ++ c) {
        matrix[r][c].printPixel();
        cout &lt;&lt; " ";
    }
    cout &lt;&lt; endl;
    }
}
</tests>

    </program><solution>


    
                Below is one way to implement the program. First we make a new matrix
                    with the correct amount of rows. Then we push back the pixels we want
                    into the new matrix. Afterwards, we must update the height and width
                    of the Image and set the Image's matrix equal to the new one
                    we created.

    
    <program xml:id="cp_12_AC_5a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
    void printPixel();
};

struct Image {
    int height;
    int width;
    vector&lt;vector&lt;Pixel&gt; &gt; matrix;
    void printImage();
    void cropImage(int startRow, int stopRow, int startCol, int stopCol);
};

void Image::cropImage(int startRow, int stopRow, int startCol, int stopCol) {
    vector&lt;vector&lt;Pixel&gt; &gt; newMatrix(stopRow - startRow + 1);
    for (int r = startRow - 1; r &lt; stopRow; ++r) {
        for (int c = startCol - 1; c &lt; stopCol; ++c) {
            newMatrix[r - (startRow - 1)].push_back(matrix[r][c]);
        }
    }
    height = stopRow - startRow + 1;
    width = stopCol - startCol + 1;
    matrix = newMatrix;
}

int main() {
    vector&lt;vector&lt;Pixel&gt; &gt; matrix = { { { 0, 255, 255 }, { 0, 0, 0 }, { 255, 255, 255 } },
                                      { { 30, 60, 50 }, { 20, 135, 200 }, { 60, 80, 125 } },
                                      { { 10, 0, 50 }, { 30, 65, 225 }, { 25, 105, 125 } },
                                      { { 255, 60, 0 }, { 20, 25, 255 }, { 65, 55, 0 } } };
    Image image = { 4, 3, matrix };
    image.printImage();
    cout &lt;&lt; endl;
    image.cropImage(2, 3, 1, 2);
    image.printImage();
}
        </input>
<tests>
void Pixel::printPixel() {
    cout &lt;&lt; "("&lt;&lt; r &lt;&lt; ", " &lt;&lt; g &lt;&lt; ", " &lt;&lt; b &lt;&lt; ")";
}

void Image::printImage() {
    for (int r = 0; r &lt; height; ++r) {
    for (int c = 0; c &lt; width; ++ c) {
        matrix[r][c].printPixel();
        cout &lt;&lt; " ";
    }
    cout &lt;&lt; endl;
    }
}
</tests>

    </program>

            

<exercise label="cp_12_AC_5a">
    <statement>
                <p>Below is one way to implement the program. First we make a new matrix
                    with the correct amount of rows. Then we push back the pixels we want
                    into the new matrix. Afterwards, we must update the height and width
                    of the <c>Image</c> and set the <c>Image</c>'s matrix equal to the new one
                    we created.</p>

    </statement>
    <program xml:id="cp_12_AC_5a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
    void printPixel();
};

struct Image {
    int height;
    int width;
    vector&lt;vector&lt;Pixel&gt; &gt; matrix;
    void printImage();
    void cropImage(int startRow, int stopRow, int startCol, int stopCol);
};

void Image::cropImage(int startRow, int stopRow, int startCol, int stopCol) {
    vector&lt;vector&lt;Pixel&gt; &gt; newMatrix(stopRow - startRow + 1);
    for (int r = startRow - 1; r &lt; stopRow; ++r) {
        for (int c = startCol - 1; c &lt; stopCol; ++c) {
            newMatrix[r - (startRow - 1)].push_back(matrix[r][c]);
        }
    }
    height = stopRow - startRow + 1;
    width = stopCol - startCol + 1;
    matrix = newMatrix;
}

int main() {
    vector&lt;vector&lt;Pixel&gt; &gt; matrix = { { { 0, 255, 255 }, { 0, 0, 0 }, { 255, 255, 255 } },
                                      { { 30, 60, 50 }, { 20, 135, 200 }, { 60, 80, 125 } },
                                      { { 10, 0, 50 }, { 30, 65, 225 }, { 25, 105, 125 } },
                                      { { 255, 60, 0 }, { 20, 25, 255 }, { 65, 55, 0 } } };
    Image image = { 4, 3, matrix };
    image.printImage();
    cout &lt;&lt; endl;
    image.cropImage(2, 3, 1, 2);
    image.printImage();
}
        </input>
<tests>
void Pixel::printPixel() {
    cout &lt;&lt; "("&lt;&lt; r &lt;&lt; ", " &lt;&lt; g &lt;&lt; ", " &lt;&lt; b &lt;&lt; ")";
}

void Image::printImage() {
    for (int r = 0; r &lt; height; ++r) {
    for (int c = 0; c &lt; width; ++ c) {
        matrix[r][c].printPixel();
        cout &lt;&lt; " ";
    }
    cout &lt;&lt; endl;
    }
}
</tests>

    </program>
</exercise>
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=cp_12_AC_6_sq data-questionlist='cp_12_AC_6q, cp_12_AC_6_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: cp_12_AC_6q, cp_12_AC_6_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
        <exercise xml:id=""><statement>
                <p>When you take a selfie on your phone, the image is mirrored.
                    We can do the same to an image by flipping it horizontally.
                    Write the <c>Image</c> member function <c>flipHorizontal</c>,
                    which flips an image horizontally. Use the <c>swapPixel</c>
                    function we created previously.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="cp_12_AC_7q_editor">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
    void printPixel();
};

struct Image {
    int height;
    int width;
    vector&lt;vector&lt;Pixel&gt; &gt; matrix;
    void printImage();
    void cropImage(int startRow, int stopRow, int startCol, int stopCol);
    void swapPixel(int row1, int col1, int row2, int col2);
    void flipHorizontal();
};

// Write your implementation of flipHorizontal here.

int main() {
    vector&lt;vector&lt;Pixel&gt; &gt; matrix = { { { 0, 0, 0 }, { 10, 10, 10 }, { 255, 255, 255 } },
                                      { { 50, 50, 50 }, { 10, 10, 10 }, { 255, 255, 255 } },
                                      { { 100, 100, 100 }, { 10, 10, 10 }, { 255, 255, 255 } },
                                      { { 150, 150, 150 }, { 10, 10, 10 }, { 255, 255, 255 } } };
    Image image = { 4, 3, matrix };
    image.printImage();
    cout &lt;&lt; endl;
    image.flipHorizontal();
    image.printImage();
}
        </input>
<tests>
void Pixel::printPixel() {
    cout &lt;&lt; "("&lt;&lt; r &lt;&lt; ", " &lt;&lt; g &lt;&lt; ", " &lt;&lt; b &lt;&lt; ")";
}

void Image::printImage() {
    for (int r = 0; r &lt; height; ++r) {
    for (int c = 0; c &lt; width; ++ c) {
        matrix[r][c].printPixel();
        cout &lt;&lt; " ";
    }
    cout &lt;&lt; endl;
    }
}

void Image::cropImage(int startRow, int stopRow, int startCol, int stopCol) {
    vector&lt;vector&lt;Pixel&gt; &gt; newMatrix(stopRow - startRow + 1);
    for (int r = startRow - 1; r &lt; stopRow; ++r) {
        for (int c = startCol - 1; c &lt; stopCol; ++c) {
            newMatrix[r - (startRow - 1)].push_back(matrix[r][c]);
        }
    }
    height = stopRow - startRow + 1;
    width = stopCol - startCol + 1;
    matrix = newMatrix;
}

void Image::swapPixel(int row1, int col1, int row2, int col2) {
    Pixel temp = { matrix[row1][col1].r, matrix[row1][col1].g,  matrix[row1][col1].b };
    matrix[row1][col1] = matrix[row2][col2];
    matrix[row2][col2] = temp;
}
</tests>

    </program><solution>


    
                Below is one way to implement the program. We loop through
                    each row in the matrix. We create start and end indices and
                    repeatedly swap pixels, moving both indices toward the middle.
                    Once they meet in the middle, we have finished flipping the image.

    
    <program xml:id="cp_12_AC_7a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
    void printPixel();
};

struct Image {
    int height;
    int width;
    vector&lt;vector&lt;Pixel&gt; &gt; matrix;
    void printImage();
    void cropImage(int startRow, int stopRow, int startCol, int stopCol);
    void swapPixel(int row1, int col1, int row2, int col2);
    void flipHorizontal();
};

void Image::flipHorizontal() {
    for (int r = 0; r &lt; height; ++r) {
        int start = 0;
        int end = width - 1;
        while (start &lt; end) {
            swapPixel(r, start, r, end);
            ++start;
            --end;
        }
    }
}

int main() {
    vector&lt;vector&lt;Pixel&gt; &gt; matrix = { { { 0, 0, 0 }, { 10, 10, 10 }, { 255, 255, 255 } },
                                      { { 50, 50, 50 }, { 10, 10, 10 }, { 255, 255, 255 } },
                                      { { 100, 100, 100 }, { 10, 10, 10 }, { 255, 255, 255 } },
                                      { { 150, 150, 150 }, { 10, 10, 10 }, { 255, 255, 255 } } };
    Image image = { 4, 3, matrix };
    image.printImage();
    cout &lt;&lt; endl;
    image.flipHorizontal();
    image.printImage();
}
        </input>
<tests>
void Pixel::printPixel() {
    cout &lt;&lt; "("&lt;&lt; r &lt;&lt; ", " &lt;&lt; g &lt;&lt; ", " &lt;&lt; b &lt;&lt; ")";
}

void Image::printImage() {
    for (int r = 0; r &lt; height; ++r) {
    for (int c = 0; c &lt; width; ++ c) {
        matrix[r][c].printPixel();
        cout &lt;&lt; " ";
    }
    cout &lt;&lt; endl;
    }
}

void Image::cropImage(int startRow, int stopRow, int startCol, int stopCol) {
    vector&lt;vector&lt;Pixel&gt; &gt; newMatrix(stopRow - startRow + 1);
    for (int r = startRow - 1; r &lt; stopRow; ++r) {
        for (int c = startCol - 1; c &lt; stopCol; ++c) {
            newMatrix[r - (startRow - 1)].push_back(matrix[r][c]);
        }
    }
    height = stopRow - startRow + 1;
    width = stopCol - startCol + 1;
    matrix = newMatrix;
}

void Image::swapPixel(int row1, int col1, int row2, int col2) {
    Pixel temp = { matrix[row1][col1].r, matrix[row1][col1].g,  matrix[row1][col1].b };
    matrix[row1][col1] = matrix[row2][col2];
    matrix[row2][col2] = temp;
}
</tests>

    </program>

            

<exercise label="cp_12_AC_7a">
    <statement>
                <p>Below is one way to implement the program. We loop through
                    each row in the matrix. We create start and end indices and
                    repeatedly swap pixels, moving both indices toward the middle.
                    Once they meet in the middle, we have finished flipping the image.</p>

    </statement>
    <program xml:id="cp_12_AC_7a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
    void printPixel();
};

struct Image {
    int height;
    int width;
    vector&lt;vector&lt;Pixel&gt; &gt; matrix;
    void printImage();
    void cropImage(int startRow, int stopRow, int startCol, int stopCol);
    void swapPixel(int row1, int col1, int row2, int col2);
    void flipHorizontal();
};

void Image::flipHorizontal() {
    for (int r = 0; r &lt; height; ++r) {
        int start = 0;
        int end = width - 1;
        while (start &lt; end) {
            swapPixel(r, start, r, end);
            ++start;
            --end;
        }
    }
}

int main() {
    vector&lt;vector&lt;Pixel&gt; &gt; matrix = { { { 0, 0, 0 }, { 10, 10, 10 }, { 255, 255, 255 } },
                                      { { 50, 50, 50 }, { 10, 10, 10 }, { 255, 255, 255 } },
                                      { { 100, 100, 100 }, { 10, 10, 10 }, { 255, 255, 255 } },
                                      { { 150, 150, 150 }, { 10, 10, 10 }, { 255, 255, 255 } } };
    Image image = { 4, 3, matrix };
    image.printImage();
    cout &lt;&lt; endl;
    image.flipHorizontal();
    image.printImage();
}
        </input>
<tests>
void Pixel::printPixel() {
    cout &lt;&lt; "("&lt;&lt; r &lt;&lt; ", " &lt;&lt; g &lt;&lt; ", " &lt;&lt; b &lt;&lt; ")";
}

void Image::printImage() {
    for (int r = 0; r &lt; height; ++r) {
    for (int c = 0; c &lt; width; ++ c) {
        matrix[r][c].printPixel();
        cout &lt;&lt; " ";
    }
    cout &lt;&lt; endl;
    }
}

void Image::cropImage(int startRow, int stopRow, int startCol, int stopCol) {
    vector&lt;vector&lt;Pixel&gt; &gt; newMatrix(stopRow - startRow + 1);
    for (int r = startRow - 1; r &lt; stopRow; ++r) {
        for (int c = startCol - 1; c &lt; stopCol; ++c) {
            newMatrix[r - (startRow - 1)].push_back(matrix[r][c]);
        }
    }
    height = stopRow - startRow + 1;
    width = stopCol - startCol + 1;
    matrix = newMatrix;
}

void Image::swapPixel(int row1, int col1, int row2, int col2) {
    Pixel temp = { matrix[row1][col1].r, matrix[row1][col1].g,  matrix[row1][col1].b };
    matrix[row1][col1] = matrix[row2][col2];
    matrix[row2][col2] = temp;
}
</tests>

    </program>
</exercise>
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=cp_12_AC_8_sq data-questionlist='cp_12_AC_8q, cp_12_AC_8_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: cp_12_AC_8q, cp_12_AC_8_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
        <exercise xml:id=""><statement>
                <p>Let&#8217;s write the <c>Image</c> member function called <c>createBorder</c>,
                    which sets the <c>Pixel</c>s on the edge of an <c>Image</c> to a given
                    <c>Pixel</c>.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="cp_12_AC_9q_editor">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
    void printPixel();
};

struct Image {
    int height;
    int width;
    vector&lt;vector&lt;Pixel&gt; &gt; matrix;
    void printImage();
    void cropImage(int startRow, int stopRow, int startCol, int stopCol);
    void swapPixel(int row1, int col1, int row2, int col2);
    void flipHorizontal();
    void flipVertical();
    void createBorder(Pixel p);
};

// Write your implementation of createBorder here.

int main() {
    vector&lt;vector&lt;Pixel&gt; &gt; matrix = { { { 25, 65, 23 }, { 73, 56, 24 }, { 255, 255, 255 }, { 253, 61, 56 } },
                                      { { 50, 50, 50 }, { 145, 52, 102 }, { 2, 0, 25 }, { 52, 47, 35 } },
                                      { { 45, 34, 100 }, { 213, 67, 45 }, { 2, 45, 255 }, { 34, 16, 76 } },
                                      { { 2, 2, 78 }, { 164, 16, 23 }, { 5, 255, 25 }, { 32, 65, 34 } },
                                      { { 150, 150, 150 }, { 241, 42, 64 }, { 1, 4, 255 }, { 16, 73, 84 } } };
    Image image = { 5, 4, matrix };
    image.printImage();
    cout &lt;&lt; endl;
    Pixel p = { 0, 0, 0 };
    image.createBorder(p);
    image.printImage();
}
        </input>
<tests>
void Pixel::printPixel() {
    cout &lt;&lt; "("&lt;&lt; r &lt;&lt; ", " &lt;&lt; g &lt;&lt; ", " &lt;&lt; b &lt;&lt; ")";
}

void Image::printImage() {
    for (int r = 0; r &lt; height; ++r) {
    for (int c = 0; c &lt; width; ++ c) {
        matrix[r][c].printPixel();
        cout &lt;&lt; " ";
    }
    cout &lt;&lt; endl;
    }
}

void Image::cropImage(int startRow, int stopRow, int startCol, int stopCol) {
    vector&lt;vector&lt;Pixel&gt; &gt; newMatrix(stopRow - startRow + 1);
    for (int r = startRow - 1; r &lt; stopRow; ++r) {
        for (int c = startCol - 1; c &lt; stopCol; ++c) {
            newMatrix[r - (startRow - 1)].push_back(matrix[r][c]);
        }
    }
    height = stopRow - startRow + 1;
    width = stopCol - startCol + 1;
    matrix = newMatrix;
}

void Image::swapPixel(int row1, int col1, int row2, int col2) {
    Pixel temp = { matrix[row1][col1].r, matrix[row1][col1].g,  matrix[row1][col1].b };
    matrix[row1][col1] = matrix[row2][col2];
    matrix[row2][col2] = temp;
}

void Image::flipHorizontal() {
    for (int r = 0; r &lt; height; ++r) {
        int start = 0;
        int end = width - 1;
        while (start &lt; end) {
            swapPixel(r, start, r, end);
            ++start;
            --end;
        }
    }
}

void Image::flipVertical() {
    for (int c = 0; c &lt; width; ++c) {
        int start = 0;
        int end = height - 1;
        while (start &lt; end) {
            swapPixel(start, c, end, c);
            ++start;
            --end;
        }
    }
}
</tests>

    </program><solution>


    
                Below is one way to implement the program. We set the first and last
                    row and first and last column of Pixels in the Image to the
                    given Pixel.

    
    <program xml:id="cp_12_AC_9a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
    void printPixel();
};

struct Image {
    int height;
    int width;
    vector&lt;vector&lt;Pixel&gt; &gt; matrix;
    void printImage();
    void cropImage(int startRow, int stopRow, int startCol, int stopCol);
    void swapPixel(int row1, int col1, int row2, int col2);
    void flipHorizontal();
    void flipVertical();
    void createBorder(Pixel p);
};

void Image::createBorder(Pixel p) {
    for (int r = 0; r &lt; height; ++r) {
        matrix[r][0] = p;
        matrix[r][width - 1] = p;
    }
    for (int c = 0; c &lt; width; ++c) {
        matrix[0][c] = p;
        matrix[height - 1][c] = p;
    }
}

int main() {
    vector&lt;vector&lt;Pixel&gt; &gt; matrix = { { { 25, 65, 23 }, { 73, 56, 24 }, { 255, 255, 255 }, { 253, 61, 56 } },
                                      { { 50, 50, 50 }, { 145, 52, 102 }, { 2, 0, 25 }, { 52, 47, 35 } },
                                      { { 45, 34, 100 }, { 213, 67, 45 }, { 2, 45, 255 }, { 34, 16, 76 } },
                                      { { 2, 2, 78 }, { 164, 16, 23 }, { 5, 255, 25 }, { 32, 65, 34 } },
                                      { { 150, 150, 150 }, { 241, 42, 64 }, { 1, 4, 255 }, { 16, 73, 84 } } };
    Image image = { 5, 4, matrix };
    image.printImage();
    cout &lt;&lt; endl;
    Pixel p = { 0, 0, 0 };
    image.createBorder(p);
    image.printImage();
}
        </input>
<tests>
void Pixel::printPixel() {
    cout &lt;&lt; "("&lt;&lt; r &lt;&lt; ", " &lt;&lt; g &lt;&lt; ", " &lt;&lt; b &lt;&lt; ")";
}

void Image::printImage() {
    for (int r = 0; r &lt; height; ++r) {
    for (int c = 0; c &lt; width; ++ c) {
        matrix[r][c].printPixel();
        cout &lt;&lt; " ";
    }
    cout &lt;&lt; endl;
    }
}

void Image::cropImage(int startRow, int stopRow, int startCol, int stopCol) {
    vector&lt;vector&lt;Pixel&gt; &gt; newMatrix(stopRow - startRow + 1);
    for (int r = startRow - 1; r &lt; stopRow; ++r) {
        for (int c = startCol - 1; c &lt; stopCol; ++c) {
            newMatrix[r - (startRow - 1)].push_back(matrix[r][c]);
        }
    }
    height = stopRow - startRow + 1;
    width = stopCol - startCol + 1;
    matrix = newMatrix;
}

void Image::swapPixel(int row1, int col1, int row2, int col2) {
    Pixel temp = { matrix[row1][col1].r, matrix[row1][col1].g,  matrix[row1][col1].b };
    matrix[row1][col1] = matrix[row2][col2];
    matrix[row2][col2] = temp;
}

void Image::flipHorizontal() {
    for (int r = 0; r &lt; height; ++r) {
        int start = 0;
        int end = width - 1;
        while (start &lt; end) {
            swapPixel(r, start, r, end);
            ++start;
            --end;
        }
    }
}

void Image::flipVertical() {
    for (int c = 0; c &lt; width; ++c) {
        int start = 0;
        int end = height - 1;
        while (start &lt; end) {
            swapPixel(start, c, end, c);
            ++start;
            --end;
        }
    }
}
</tests>

    </program>

            

<exercise label="cp_12_AC_9a">
    <statement>
                <p>Below is one way to implement the program. We set the first and last
                    row and first and last column of <c>Pixel</c>s in the <c>Image</c> to the
                    given <c>Pixel</c>.</p>

    </statement>
    <program xml:id="cp_12_AC_9a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
    void printPixel();
};

struct Image {
    int height;
    int width;
    vector&lt;vector&lt;Pixel&gt; &gt; matrix;
    void printImage();
    void cropImage(int startRow, int stopRow, int startCol, int stopCol);
    void swapPixel(int row1, int col1, int row2, int col2);
    void flipHorizontal();
    void flipVertical();
    void createBorder(Pixel p);
};

void Image::createBorder(Pixel p) {
    for (int r = 0; r &lt; height; ++r) {
        matrix[r][0] = p;
        matrix[r][width - 1] = p;
    }
    for (int c = 0; c &lt; width; ++c) {
        matrix[0][c] = p;
        matrix[height - 1][c] = p;
    }
}

int main() {
    vector&lt;vector&lt;Pixel&gt; &gt; matrix = { { { 25, 65, 23 }, { 73, 56, 24 }, { 255, 255, 255 }, { 253, 61, 56 } },
                                      { { 50, 50, 50 }, { 145, 52, 102 }, { 2, 0, 25 }, { 52, 47, 35 } },
                                      { { 45, 34, 100 }, { 213, 67, 45 }, { 2, 45, 255 }, { 34, 16, 76 } },
                                      { { 2, 2, 78 }, { 164, 16, 23 }, { 5, 255, 25 }, { 32, 65, 34 } },
                                      { { 150, 150, 150 }, { 241, 42, 64 }, { 1, 4, 255 }, { 16, 73, 84 } } };
    Image image = { 5, 4, matrix };
    image.printImage();
    cout &lt;&lt; endl;
    Pixel p = { 0, 0, 0 };
    image.createBorder(p);
    image.printImage();
}
        </input>
<tests>
void Pixel::printPixel() {
    cout &lt;&lt; "("&lt;&lt; r &lt;&lt; ", " &lt;&lt; g &lt;&lt; ", " &lt;&lt; b &lt;&lt; ")";
}

void Image::printImage() {
    for (int r = 0; r &lt; height; ++r) {
    for (int c = 0; c &lt; width; ++ c) {
        matrix[r][c].printPixel();
        cout &lt;&lt; " ";
    }
    cout &lt;&lt; endl;
    }
}

void Image::cropImage(int startRow, int stopRow, int startCol, int stopCol) {
    vector&lt;vector&lt;Pixel&gt; &gt; newMatrix(stopRow - startRow + 1);
    for (int r = startRow - 1; r &lt; stopRow; ++r) {
        for (int c = startCol - 1; c &lt; stopCol; ++c) {
            newMatrix[r - (startRow - 1)].push_back(matrix[r][c]);
        }
    }
    height = stopRow - startRow + 1;
    width = stopCol - startCol + 1;
    matrix = newMatrix;
}

void Image::swapPixel(int row1, int col1, int row2, int col2) {
    Pixel temp = { matrix[row1][col1].r, matrix[row1][col1].g,  matrix[row1][col1].b };
    matrix[row1][col1] = matrix[row2][col2];
    matrix[row2][col2] = temp;
}

void Image::flipHorizontal() {
    for (int r = 0; r &lt; height; ++r) {
        int start = 0;
        int end = width - 1;
        while (start &lt; end) {
            swapPixel(r, start, r, end);
            ++start;
            --end;
        }
    }
}

void Image::flipVertical() {
    for (int c = 0; c &lt; width; ++c) {
        int start = 0;
        int end = height - 1;
        while (start &lt; end) {
            swapPixel(start, c, end, c);
            ++start;
            --end;
        }
    }
}
</tests>

    </program>
</exercise>
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=cp_12_AC_10_sq data-questionlist='cp_12_AC_10q, cp_12_AC_10_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: cp_12_AC_10q, cp_12_AC_10_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
    </section>

