<section xml:id="chapter12_the-printcard-function">
        <title>The <c>printCard</c> function</title>
        <p>When you create a new type, the first step is usually to declare the
            instance variables and write constructors. The second step is often to
            write a function that prints the object in human-readable form.</p>
        <p>In the case of <c>Card</c> objects, &#8220;human-readable&#8221; means that we have to
            map the internal representation of the rank and suit onto words. A
            natural way to do that is with a vector of <c>string</c>s. You can
            create a vector of <c>string</c>s the same way you create an vector of
            other types:</p>
        <pre>vector&lt;string&gt; suits (4);</pre>
        <p>Of course, in order to use <c>vector</c>s and <c>string</c>s, you will
            have to include the header files for both.</p>
        <p>To initialize the elements of the vector, we can use a series of
            assignment statements.</p>
        <pre>suits[0] = "Clubs";
suits[1] = "Diamonds";
suits[2] = "Hearts";
suits[3] = "Spades";</pre>
        <p>A state diagram for this vector looks like this:</p>
        <p>We can build a similar vector to decode the ranks. Then we can select
            the appropriate elements using the <c>suit</c> and <c>rank</c> as indices.
            Finally, we can write a function called <c>print</c> that outputs the card
            on which it is invoked:</p>
        <pre>void Card::print () const {
  vector&lt;string&gt; suits (4);
  suits[0] = "Clubs";
  suits[1] = "Diamonds";
  suits[2] = "Hearts";
  suits[3] = "Spades";

  vector&lt;string&gt; ranks (14);
  ranks[1] = "Ace";
  ranks[2] = "2";
  ranks[3] = "3";
  ranks[4] = "4";
  ranks[5] = "5";
  ranks[6] = "6";
  ranks[7] = "7";
  ranks[8] = "8";
  ranks[9] = "9";
  ranks[10] = "10";
  ranks[11] = "Jack";
  ranks[12] = "Queen";
  ranks[13] = "King";

  cout &lt;&lt; ranks[rank] &lt;&lt; " of " &lt;&lt; suits[suit] &lt;&lt; endl;
}</pre>
        <p>The expression <c>suits[suit]</c> means &#8220;use the instance variable <c>suit</c>
            from the current object as an index into the vector named <c>suits</c>, and
            select the appropriate string.&#8221;</p>
        <p>Because <c>print</c> is a <c>Card</c> member function, it can refer to the
            instance variables of the current object implicitly (without having to
            use dot notation to specify the object). The output of this code</p>
        <pre>Card card (1, 11);
card.print ();</pre>
        <p>is <c>Jack of Diamonds</c>.</p>

<exercise label="12_3">
    <statement>
        <p>The active code below uses the <c>Card::print()</c> function.  Feel free to modify
            the values that <c>card</c> is being initialized to in the constructor:  this will
            change the output from the <c>Card::print()</c> function.</p>

    </statement>
    <program xml:id="prog_12_3_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
using namespace std;

struct Card {
    int suit, rank;

    Card ();
    Card (int s, int r);
    void print () const;
};

int main() {
    Card card (1,11);
    card.print ();
}

        </input>
<tests>

Card::Card () {
  suit = 0;  rank = 0;
}

Card::Card (int s, int r) {
  suit = s;  rank = r;
}

void Card::print () const {
  vector&lt;string&gt; suits (4);
  suits[0] = "Clubs";
  suits[1] = "Diamonds";
  suits[2] = "Hearts";
  suits[3] = "Spades";

  vector&lt;string&gt; ranks (14);
  ranks[1] = "Ace";
  ranks[2] = "2";
  ranks[3] = "3";
  ranks[4] = "4";
  ranks[5] = "5";
  ranks[6] = "6";
  ranks[7] = "7";
  ranks[8] = "8";
  ranks[9] = "9";
  ranks[10] = "10";
  ranks[11] = "Jack";
  ranks[12] = "Queen";
  ranks[13] = "King";

   cout &lt;&lt; ranks[rank] &lt;&lt; " of " &lt;&lt; suits[suit] &lt;&lt; endl;
}
</tests>

    </program>
</exercise>
        <p>You might notice that we are not using the zeroeth element of the
            <c>ranks</c> vector. That&#8217;s because the only valid ranks are 1&#8211;13. By
            leaving an unused element at the beginning of the vector, we get an
            encoding where 2 maps to &#8220;2&#8221;, 3 maps to &#8220;3&#8221;, etc. From the point of view
            of the user, it doesn&#8217;t matter what the encoding is, since all input and
            output uses human-readable formats. On the other hand, it is often
            helpful for the programmer if the mappings are easy to remember.</p>

    <exercise label="printCard_function_1">
        <statement>

        <p>Q-2: How would we select the appropriate string for the instance variable <c>rank</c>?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>rank.ranks</p>
                </statement>
                <feedback>
                    <p>Incorrect! Remember, ranks is a vector!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>ranks.rank</p>
                </statement>
                <feedback>
                    <p>Incorrect! Remember, ranks is a vector!</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>ranks[rank]</p>
                </statement>
                <feedback>
                    <p>Correct! This is an example of how we use mapping!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>rank[ranks]</p>
                </statement>
                <feedback>
                    <p>Incorrect! This is using the vector "ranks" as an index to a single "rank".</p>
                </feedback>
            </choice>
</choices>

    </exercise>

        <exercise label="printCard_function_2">
            <statement>
    <p>Q-3: <var/>  </p></statement><setup><var><pre>Card card (3, 1);
card.print ();</pre><p>What is printed by card.print()? Type your answer exactly as it would appear in the terminal.</p></var></setup></exercise>
    <exercise label="printCard_function_3">
        <statement>

        <p>Q-4: Does it matter how we encode a mapping?</p>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>Yes, because the mappings should be easy for the programmer to remember.</p>
                </statement>
                <feedback>
                    <p>Correct! The programmer should uses mappings that are easy to remember (even if this means we don't use the zeroeth element of the ranks vector).</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Yes, because the mappings should be easy for the user to remember.</p>
                </statement>
                <feedback>
                    <p>Incorrect! The user doesn't need to know how things are mapped.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>No! All input and output uses human-readable formats, so the programmer doesn't need to understand what is going on behind the scenes.</p>
                </statement>
                <feedback>
                    <p>Incorrect! The programmer should always know what is going on with their code.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>No! All input and output uses human-readable formats, so the user doesn't need to understand what is going on behind the scenes.</p>
                </statement>
                <feedback>
                    <p>Correct! The user doesn't need to know how the programmer coded things.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    </section>

