<section xml:id="chapter4_activecode-exercises">
        <title>Activecode Exercises</title>
        <p>Answer the following <term>Activecode</term> questions to
            assess what you have learned in this chapter.</p>
        <exercise xml:id=""><statement>
                <p>Construct a block of code that prints the remainder of 18 when
                    divided by 13.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="cond_recc_p1_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the code to print the remainder of 18 when divided by 13.

    
    <program xml:id="cond_recc_p1_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main () {
    int x = 18;
    int y = 13;
    cout &lt;&lt; x % y;
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="cond_recc_p1_ac_a">
    <statement>
                <p>Below is one way to write the code to print the remainder of 18 when divided by 13.</p>

    </statement>
    <program xml:id="cond_recc_p1_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main () {
    int x = 18;
    int y = 13;
    cout &lt;&lt; x % y;
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Construct a function, <c>is_even</c>, that prints whether a number
                    is even.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="cond_recc_p2_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
    is_even(4);
    is_even(3);
    is_even(0);
}
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to construct the is_even function.

    
    <program xml:id="cond_recc_p2_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void is_even (int number) {
    if (number % 2 == 0) {
    cout &lt;&lt; true;
    }
    else {
    cout &lt;&lt; false;
    }
}

int main() {
    is_even(4);
    is_even(3);
    is_even(0);
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="cond_recc_p2_ac_a">
    <statement>
                <p>Below is one way to construct the <c>is_even</c> function.</p>

    </statement>
    <program xml:id="cond_recc_p2_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void is_even (int number) {
    if (number % 2 == 0) {
    cout &lt;&lt; true;
    }
    else {
    cout &lt;&lt; false;
    }
}

int main() {
    is_even(4);
    is_even(3);
    is_even(0);
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Construct a function, <c>difference</c>, that prints the difference of a and b if the result
                    would result in a positive number.  Otherwise, prints -1.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="cond_recc_p3_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
    int a = 25;
    int b = 10;
    difference(a,b);
}
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the difference function.

    
    <program xml:id="cond_recc_p3_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void difference (int a, int b) {
    if (a - b &gt; 0) {
    cout &lt;&lt; a - b;
    }
    else {
    cout &lt;&lt; -1;
    }
}

int main() {
    int a = 25;
    int b = 10;
    difference(a,b);
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="cond_recc_p3_ac_a">
    <statement>
                <p>Below is one way to write the <c>difference</c> function.</p>

    </statement>
    <program xml:id="cond_recc_p3_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void difference (int a, int b) {
    if (a - b &gt; 0) {
    cout &lt;&lt; a - b;
    }
    else {
    cout &lt;&lt; -1;
    }
}

int main() {
    int a = 25;
    int b = 10;
    difference(a,b);
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Construct a function, <c>matic</c>, that takes as inputs 2 integers, x and y, and prints &#8220;automatic&#8221; if x is
                    an odd number, &#8220;systematic&#8221; if x is greater than y, AND
                    &#8220;hydromatic&#8221; if y is not equal to x.  Check all 3 conditions.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="cond_recc_p4_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to construct the code.

    
    <program xml:id="cond_recc_p4_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void matic(int x, int y) {
    if (x % 2 &gt; 0) {
        cout &lt;&lt; "automatic"; }
    if (x &gt; y) {
        cout &lt;&lt; "systematic"; }
    if (y != x) {
        cout &lt;&lt; "hydromatic"; }
}

int main() {
    matix(5,4);
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="cond_recc_p4_ac_a">
    <statement>
                <p>Below is one way to construct the code.</p>

    </statement>
    <program xml:id="cond_recc_p4_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void matic(int x, int y) {
    if (x % 2 &gt; 0) {
        cout &lt;&lt; "automatic"; }
    if (x &gt; y) {
        cout &lt;&lt; "systematic"; }
    if (y != x) {
        cout &lt;&lt; "hydromatic"; }
}

int main() {
    matix(5,4);
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Construct a block of code that prints &#8220;Pick me!&#8221; if x is
                    equal to y, &#8220;Choose me!&#8221; if x is less than y, OR &#8220;Love me!&#8221;
                    if x + y is even.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="cond_recc_p5_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to construct the code.

    
    <program xml:id="cond_recc_p5_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
    if (x == y) {
        cout &lt;&lt; "Pick me!"; }
    else if (y &gt; x) {
        cout &lt;&lt; "Choose me!"; }
    else if ((x + y) % 2 == 0) {
        cout &lt;&lt; "Love me!"; }
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="cond_recc_p5_ac_a">
    <statement>
                <p>Below is one way to construct the code.</p>

    </statement>
    <program xml:id="cond_recc_p5_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
    if (x == y) {
        cout &lt;&lt; "Pick me!"; }
    else if (y &gt; x) {
        cout &lt;&lt; "Choose me!"; }
    else if ((x + y) % 2 == 0) {
        cout &lt;&lt; "Love me!"; }
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Construct a function, <c>printLetterGrade</c>, that prints your letter grade according to this scheme.
                    [0, 70) = F, [70, 80) = C, [80, 90) = B, and [90, 100] = A.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="cond_recc_p6_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
    double grade = 90.0;
    printLetterGrade(grade);
}
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the printLetterGrade function.

    
    <program xml:id="cond_recc_p6_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void printLetterGrade (double grade) {
    if (grade &lt; 70) {
    cout &lt;&lt; "F"; }
    else if (grade &lt; 80) {
    cout &lt;&lt; "C"; }
    else if (grade &lt; 90) {
    cout &lt;&lt; "B"; }
    else {
    cout &lt;&lt; "A"; }
}

int main() {
    double grade = 90.0;
    printLetterGrade(grade);
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="cond_recc_p6_ac_a">
    <statement>
                <p>Below is one way to write the <c>printLetterGrade</c> function.</p>

    </statement>
    <program xml:id="cond_recc_p6_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void printLetterGrade (double grade) {
    if (grade &lt; 70) {
    cout &lt;&lt; "F"; }
    else if (grade &lt; 80) {
    cout &lt;&lt; "C"; }
    else if (grade &lt; 90) {
    cout &lt;&lt; "B"; }
    else {
    cout &lt;&lt; "A"; }
}

int main() {
    double grade = 90.0;
    printLetterGrade(grade);
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>According to a logic game, a knight is someone who cannot tell a lie,
                    and a knave is someone who cannot tell the truth.  Construct a function
                    that takes two booleans: the truth value of the story, and the truth value
                    told by the person.  The function should print whether the person was a
                    knight or a knave.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="cond_recc_p7_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to construct the knightKnave function.

    
    <program xml:id="cond_recc_p7_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void knightKnave (bool truth, bool told) {
    if (truth == true) {
        if (told == true) {
            cout &lt;&lt; "Knight";
        }
        else {
            cout &lt;&lt; "Knave";
        } }
        else {
            if (told == true) {
                cout &lt;&lt; "Knave";
            }
        else {
            cout &lt;&lt; "Knive";
        }
        }
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="cond_recc_p7_ac_a">
    <statement>
                <p>Below is one way to construct the <c>knightKnave</c> function.</p>

    </statement>
    <program xml:id="cond_recc_p7_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void knightKnave (bool truth, bool told) {
    if (truth == true) {
        if (told == true) {
            cout &lt;&lt; "Knight";
        }
        else {
            cout &lt;&lt; "Knave";
        } }
        else {
            if (told == true) {
                cout &lt;&lt; "Knave";
            }
        else {
            cout &lt;&lt; "Knive";
        }
        }
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>If a cat is in a good mood, it purrs; when it&#8217;s in a bad mood, it
                    meows.  If a doog is in a good mood, it barks; when it&#8217;s in a bad
                    mood it woofs.  Construct a function that accomplishes this.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="cond_recc_p8_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to construct the makeVocals function.

    
    <program xml:id="cond_recc_p8_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void makeVocals (string animal, string mood) {
    if (mood == "bad") {
        if (animal == "dog") {
            cout &lt;&lt; "Woof!" &lt;&lt; endl;
        }
        else {
            cout &lt;&lt; "Meow!" &lt;&lt; endl;
        }
    }
    else {
        if (animal == "dog") {
            cout &lt;&lt; "Bark!" &lt;&lt; endl;
        }
        else {
            cout &lt;&lt; "Purr!" &lt;&lt; endl;
        }
    }
}

int main() {
    makeVocals("dog","good");
    makeVocals("cat","bad");
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="cond_recc_p8_ac_a">
    <statement>
                <p>Below is one way to construct the <c>makeVocals</c> function.</p>

    </statement>
    <program xml:id="cond_recc_p8_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void makeVocals (string animal, string mood) {
    if (mood == "bad") {
        if (animal == "dog") {
            cout &lt;&lt; "Woof!" &lt;&lt; endl;
        }
        else {
            cout &lt;&lt; "Meow!" &lt;&lt; endl;
        }
    }
    else {
        if (animal == "dog") {
            cout &lt;&lt; "Bark!" &lt;&lt; endl;
        }
        else {
            cout &lt;&lt; "Purr!" &lt;&lt; endl;
        }
    }
}

int main() {
    makeVocals("dog","good");
    makeVocals("cat","bad");
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Construct a recursive function that tells the user to enter a positive
                    number.  It should then output that number to the terminal.  If the user
                    enters a negative number or zero, prompt the user again.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="cond_recc_p9_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the takeSum recursive function.

    
    <program xml:id="cond_recc_p9_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void takeSum () {
    cout &lt;&lt; "Input a positive number!";
    int num;
    cin &gt;&gt; num;
    if (num &lt; 0) {
        takeSum ();
    } // END "if"
    cout &lt;&lt; num;
} // END function

int main() {
    takeSum();
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="cond_recc_p9_ac_a">
    <statement>
                <p>Below is one way to write the <c>takeSum</c> recursive function.</p>

    </statement>
    <program xml:id="cond_recc_p9_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void takeSum () {
    cout &lt;&lt; "Input a positive number!";
    int num;
    cin &gt;&gt; num;
    if (num &lt; 0) {
        takeSum ();
    } // END "if"
    cout &lt;&lt; num;
} // END function

int main() {
    takeSum();
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>In the table of ASCII characters, the lowercase alphabet consists
                    of characters 97-122.  The uppercase alphabet consists of characters
                    65-90, which is a 32 character shift back from the lowercase.  Construct
                    a recursive function that asks the user to input a LOWERCASE character,
                    converts that character to UPPERCASE character and prints it.  If the user
                    enters a character outside of the range of the LOWERCASE alphabet, prompt
                    the user again.  Hint:  &#8220;||&#8221; means &#8220;or&#8221; when used between two conditional
                    statements.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="cond_recc_p10_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the capitalize function.

    
    <program xml:id="cond_recc_p10_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void capitalize () {
    cout &lt;&lt; "Input a lowercase character!";
    char let;
    cin &gt;&gt; let;
    if (int(let) &lt; 97 || int(let) &gt; 122) {
    capitalize (); }
    let = let - 32;
    cout &lt;&lt; char(let);
}

int main() {
    capitalize();
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="cond_recc_p10_ac_a">
    <statement>
                <p>Below is one way to write the <c>capitalize</c> function.</p>

    </statement>
    <program xml:id="cond_recc_p10_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void capitalize () {
    cout &lt;&lt; "Input a lowercase character!";
    char let;
    cin &gt;&gt; let;
    if (int(let) &lt; 97 || int(let) &gt; 122) {
    capitalize (); }
    let = let - 32;
    cout &lt;&lt; char(let);
}

int main() {
    capitalize();
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
    </section>

