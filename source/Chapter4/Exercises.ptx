<exercises xml:id="chapter4_multiple-choice-exercises">
        <title>Multiple Choice Exercises</title>
        <p>Answer the following <term>Multiple Choice</term> questions to
            assess what you have learned in this chapter.</p>

    <exercise label="cond_rec_mc1">
        <statement>

        <p>Q-1: Say you run the following code.  What is the value of <c>mod</c>?</p>
        <pre>int x = 4;
int y = 7;
int mod = y % x;</pre>
</statement><choices><choice><statement id="cond_rec_mc1_opt_a">        <p>0</p>
</statement><feedback id="cond_rec_mc1_opt_a">
        <p>There <em>is</em> a remainder.</p>
</feedback></choice><choice><statement id="cond_rec_mc1_opt_b">        <p>1</p>
</statement><feedback id="cond_rec_mc1_opt_b">
        <p>Incorrect!</p>
</feedback></choice><choice><statement id="cond_rec_mc1_opt_c">        <p>2</p>
</statement><feedback id="cond_rec_mc1_opt_c">
        <p>Incorrect!</p>
</feedback></choice><choice correct="yes"><statement id="cond_rec_mc1_opt_d">        <p>3</p>
</statement><feedback id="cond_rec_mc1_opt_d">
        <p>The remainder of <c>7 / 4</c> is 3.</p>
</feedback></choice><choice><statement id="cond_rec_mc1_opt_e">        <p>4</p>
</statement><feedback id="cond_rec_mc1_opt_e">
        <p>We can&#8217;t have a remainder of 4, since 4 is the divisor.</p>
</feedback></choice></choices>
    </exercise>

    <exercise label="cond_rec_mc2">
        <statement>

        <p>Q-2: What is printed when the following code executes?</p>
        <pre>int x = 8;

if (x % 3 == 2) {
    cout &lt;&lt; "hey!" &lt;&lt; endl;
}
else if (x != 7) {
    cout &lt;&lt; "hi!" &lt;&lt; endl;
}
else if (x % 2 == 0) {
    cout &lt;&lt; "hello!" &lt;&lt; endl;
}
else {
    cout &lt;&lt; "bye!" &lt;&lt; endl;
}</pre>
</statement><choices><choice correct="yes"><statement id="cond_rec_mc2_opt_a">        <pre>hey!</pre>
</statement><feedback id="cond_rec_mc2_opt_a">
        <p>Since the first conditon is met, the rest of the chained
            conditional does not execute.</p>
</feedback></choice><choice><statement id="cond_rec_mc2_opt_b">        <pre>hi!</pre>
</statement><feedback id="cond_rec_mc2_opt_b">
        <p>It&#8217;s true that <c>8 != 7</c>, but &#8220;hi!&#8221; is not printed here.</p>
</feedback></choice><choice><statement id="cond_rec_mc2_opt_c">        <pre>hi!</pre>
</statement><feedback id="cond_rec_mc2_opt_c">
        <p>It&#8217;s true that <c>8 % 2 == 0</c>, but &#8220;hello!&#8221; is not printed!</p>
</feedback></choice><choice><statement id="cond_rec_mc2_opt_d">        <pre>hey!
hi!
hello!</pre>
</statement><feedback id="cond_rec_mc2_opt_d">
        <p>All of these conditons are met, but only one expression is
            printed!</p>
</feedback></choice><choice><statement id="cond_rec_mc2_opt_e">        <pre>bye!</pre>
</statement><feedback id="cond_rec_mc2_opt_e">
        <p>At least one of the conditons is met, so the <c>else</c> will not
            execute!</p>
</feedback></choice></choices>
    </exercise>

    <exercise label="cond_rec_mc3">
        <statement>

        <p>Q-3: What is printed when the following code executes?</p>
        <pre>int x = 34;

if (32 &lt; x) {
    cout &lt;&lt; "It's Freezing!";
}
if (x &lt; 40) {
    cout &lt;&lt; "It's Cold!";
}
if (x &gt; 65) {
    cout &lt;&lt; "It's Warm!"'
}
else {
    cout &lt;&lt; "It's Hot!";
}</pre>
</statement><choices><choice><statement id="cond_rec_mc3_opt_a">        <pre>It's Freezing!</pre>
</statement><feedback id="cond_rec_mc3_opt_a">
        <p>Take a closer look at the conditions and the way they
            are written in the program.</p>
</feedback></choice><choice><statement id="cond_rec_mc3_opt_b">        <pre>It's Cold!</pre>
</statement><feedback id="cond_rec_mc3_opt_b">
        <p>Take a closer look at the conditions and the way they
            are written in the program.</p>
</feedback></choice><choice><statement id="cond_rec_mc3_opt_c">        <pre>It's Freezing!
It's Cold!</pre>
</statement><feedback id="cond_rec_mc3_opt_c">
        <p>You&#8217;ve identified some of the conditons that are met!
            Take another look at the <em>chain</em> of conditionals at the
            end!</p>
</feedback></choice><choice correct="yes"><statement id="cond_rec_mc3_opt_d">        <pre>It's Freezing!
It's Cold!
It's Hot!</pre>
</statement><feedback id="cond_rec_mc3_opt_d">
        <p>These statements are quite contradicting, but that&#8217;s exactly
            what the output would be if we ran this code.</p>
</feedback></choice><choice><statement id="cond_rec_mc3_opt_e">        <pre>It's Hot!</pre>
</statement><feedback id="cond_rec_mc3_opt_e">
        <p>Take a closer look at the conditions and the way they
            are written in the program.</p>
</feedback></choice></choices>
    </exercise>

    <exercise label="cond_rec_mc4">
        <statement>

        <p>Q-4: Suppose you have defined the following function:</p>
        <pre>void practicingReturns (int a, int b) {
    if (a &lt; b) {
        a += 2;
    }
    if (a &gt; b) {
        return;
    }
    cout &lt;&lt; a + b;
}</pre>
        <p>What is printed when we run the following code?</p>
        <pre>int x = practicingReturns(2, 3);</pre>
</statement><choices><choice><statement id="cond_rec_mc4_opt_a">        <p>5</p>
</statement><feedback id="cond_rec_mc4_opt_a">
        <p>This is what <c>a + b</c> would be before the first conditonal.</p>
</feedback></choice><choice><statement id="cond_rec_mc4_opt_b">        <p>7</p>
</statement><feedback id="cond_rec_mc4_opt_b">
        <p>This is the value of <c>a + b</c> after the first conditional, but it
            doesn&#8217;t print.</p>
</feedback></choice><choice><statement id="cond_rec_mc4_opt_c">        <p>23</p>
</statement><feedback id="cond_rec_mc4_opt_c">
        <p>This is not the value of <c>a + b</c>.</p>
</feedback></choice><choice correct="yes"><statement id="cond_rec_mc4_opt_d">        <p>Nothing.</p>
</statement><feedback id="cond_rec_mc4_opt_d">
        <p>The function exits with a return before anything is printed.</p>
</feedback></choice></choices>
    </exercise>

    <exercise label="cond_rec_mc5">
        <statement>

        <p>Q-5: Suppose you have defined the following function:</p>
        <pre>void fortuneCookie (int a, bool b, char c) {
    if (c &lt; 'm') {
        if (a % 2 == 0) {
            cout &lt;&lt; "An alien of some sort will be appearing to you shortly.";
        }
        else {
            cout &lt;&lt; "The fortune you seek is in another cookie.";
        }
    }
    else if (c &lt; 'r') {
        if (b) {
            cout &lt;&lt; "He who laughs at himself never runs out of things to laugh at.";
        }
        else {
            cout &lt;&lt; "You will be hungry again in one hour.";
        }
    }
    else {
        cout &lt;&lt; "Fortune not found? Abort, retry, ignore.";
    }
}</pre>
        <p>What will be your fortune if you run the following code?</p>
        <pre>fortuneCookie(14, false, 'm'');</pre>
</statement><choices><choice><statement id="cond_rec_mc5_opt_a">        <p><c>An alien of some sort will be appearing to you shortly.</c></p>
</statement><feedback id="cond_rec_mc5_opt_a">
        <p><c>'m'</c> is NOT less than <c>'m'</c>, so you don&#8217;t even enter the <c>if</c> block.</p>
</feedback></choice><choice><statement id="cond_rec_mc5_opt_b">        <p><c>The fortune you seek is in another cookie.</c></p>
</statement><feedback id="cond_rec_mc5_opt_b">
        <p><c>'m'</c> is NOT less than <c>'m'</c>, so you don&#8217;t even enter the <c>if</c> block.</p>
</feedback></choice><choice><statement id="cond_rec_mc5_opt_c">        <p><c>He who laughs at himself never runs out of things to laugh at.</c></p>
</statement><feedback id="cond_rec_mc5_opt_c">
        <p><c>if (b)</c> really means <c>if (b == true)</c>.</p>
</feedback></choice><choice correct="yes"><statement id="cond_rec_mc5_opt_d">        <p><c>You will be hungry again in one hour.</c></p>
</statement><feedback id="cond_rec_mc5_opt_d">
        <p><c>'m' &lt; 'r'</c> is true and <c>b == false</c>, so this is the fortune that will print.</p>
</feedback></choice><choice><statement id="cond_rec_mc5_opt_e">        <p><c>Fortune not found? Abort, retry, ignore.</c></p>
</statement><feedback id="cond_rec_mc5_opt_e">
        <p><c>'m'</c> is less than <c>'r'</c> so you would enter the <c>else if</c> block, not the <c>else</c>.</p>
</feedback></choice></choices>
    </exercise>

    <exercise label="cond_rec_mc6">
        <statement>

        <p>Q-6: Suppose you have defined the following function:</p>
        <pre>void fortuneCookie (int a, bool b, char c) {
    if (c &lt; 'm') {
        if (a % 2 == 0) {
            cout &lt;&lt; "An alien of some sort will be appearing to you shortly.";
        }
        else {
            cout &lt;&lt; "The fortune you seek is in another cookie.";
        }
    }
    else if (c &lt; 'r') {
        if (b) {
            cout &lt;&lt; "He who laughs at himself never runs out of things to laugh at.";
        }
        else {
            cout &lt;&lt; "You will be hungry again in one hour.";
        }
    }
    else {
        cout &lt;&lt; "Fortune not found? Abort, retry, ignore.";
    }
}</pre>
        <p>What will be your fortune if you run the following code?</p>
        <pre>fortuneCookie(22, true, 'b');</pre>
</statement><choices><choice correct="yes"><statement id="cond_rec_mc6_opt_a">        <p><c>An alien of some sort will be appearing to you shortly.</c></p>
</statement><feedback id="cond_rec_mc6_opt_a">
        <p><c>'b' &lt; 'm'</c> and <c>22 % 2 == 0</c>, so this is the fortune that will print.</p>
</feedback></choice><choice><statement id="cond_rec_mc6_opt_b">        <p><c>The fortune you seek is in another cookie.</c></p>
</statement><feedback id="cond_rec_mc6_opt_b">
        <p><c>22 % 2 == 0</c>, so you enter the <c>if</c> block, not the else.</p>
</feedback></choice><choice><statement id="cond_rec_mc6_opt_c">        <p><c>He who laughs at himself never runs out of things to laugh at.</c></p>
</statement><feedback id="cond_rec_mc6_opt_c">
        <p><c>'b'</c> is less than <c>'m'</c>, so you would enter the <c>if</c> block, not the <c>else if</c>.</p>
</feedback></choice><choice><statement id="cond_rec_mc6_opt_d">        <p><c>You will be hungry again in one hour.</c></p>
</statement><feedback id="cond_rec_mc6_opt_d">
        <p><c>'b'</c> is less than <c>'m'</c>, so you would enter the <c>if</c> block, not the <c>else if</c>.</p>
</feedback></choice><choice><statement id="cond_rec_mc6_opt_e">        <p><c>Fortune not found? Abort, retry, ignore.</c></p>
</statement><feedback id="cond_rec_mc6_opt_e">
        <p><c>'b'</c> is less than <c>'m'</c>, so you would enter the <c>if</c> block, not the <c>else</c>.</p>
</feedback></choice></choices>
    </exercise>

    <exercise label="cond_rec_mc7">
        <statement>

        <p>Q-7: Suppose you have defined the following function:</p>
        <pre>void theThing(int m, int n, bool b) {
    if (b) {
        if (m % 4 == 0) {
            cout &lt;&lt; m;
            return;
        }
        if ((m + n) &gt; 10) {
            cout &lt;&lt; m + n;
            return;
        }
    }
    else if ((m &gt; n) == b) {
        cout &lt;&lt; m - n;
        return;
    }
    else {
        if (n % 3 == 0) {
            cout &lt;&lt; n;
            return;
        }
    }
    cout &lt;&lt; -1;
}</pre>
        <p>What is printed when we run the following code?</p>
        <pre>theThing(5, 10, false);</pre>
</statement><choices><choice><statement id="cond_rec_mc7_opt_a">        <p>5</p>
</statement><feedback id="cond_rec_mc7_opt_a">
        <p>The outer <c>if</c> condition is not met, the block does not execute.</p>
</feedback></choice><choice><statement id="cond_rec_mc7_opt_b">        <p>15</p>
</statement><feedback id="cond_rec_mc7_opt_b">
        <p>The outer <c>if</c> condition is not met, the block does not execute.</p>
</feedback></choice><choice correct="yes"><statement id="cond_rec_mc7_opt_c">        <p>-5</p>
</statement><feedback id="cond_rec_mc7_opt_c">
        <p><c>m &gt; n</c> evaluates to false, so the <c>else if</c> block executes.</p>
</feedback></choice><choice><statement id="cond_rec_mc7_opt_d">        <p>10</p>
</statement><feedback id="cond_rec_mc7_opt_d">
        <p>The condition for <c>else if</c> is met, so the function never enters the <c>else</c>.</p>
</feedback></choice><choice><statement id="cond_rec_mc7_opt_e">        <p>-1</p>
</statement><feedback id="cond_rec_mc7_opt_e">
        <p>The function has returned.</p>
</feedback></choice></choices>
    </exercise>

    <exercise label="cond_rec_mc8">
        <statement>

        <p>Q-8: Suppose you have defined the following function:</p>
        <pre>void theThing(int m, int n, bool b) {
    if (b) {
        if (m % 4 == 0) {
            cout &lt;&lt; m;
            return;
        }
        if ((m + n) &gt; 10) {
            cout &lt;&lt; m + n;
            return;
        }
    }
    else if ((m &gt; n) == b) {
        cout &lt;&lt; m - n;
        return;
    }
    else {
        if (n % 3 == 0) {
            cout &lt;&lt; n;
            return;
        }
    }
    cout &lt;&lt; -1;
}</pre>
        <p>What is printed when we run the following code?</p>
        <pre>theThing(6, 4, true);</pre>
</statement><choices><choice><statement id="cond_rec_mc8_opt_a">        <p>6</p>
</statement><feedback id="cond_rec_mc8_opt_a">
        <p><c>5 % 4 != 0</c> in the <c>if</c> block, so the function doesn&#8217;t print 6.</p>
</feedback></choice><choice><statement id="cond_rec_mc8_opt_b">        <p>10</p>
</statement><feedback id="cond_rec_mc8_opt_b">
        <p><c>m + n !&gt; 10</c> in the <c>if</c> block, so the function doesn&#8217;t print 10.</p>
</feedback></choice><choice><statement id="cond_rec_mc8_opt_c">        <p>2</p>
</statement><feedback id="cond_rec_mc8_opt_c">
        <p>The condition for <c>if</c> is met, so the function never enters the <c>else if</c>.</p>
</feedback></choice><choice><statement id="cond_rec_mc8_opt_d">        <p>4</p>
</statement><feedback id="cond_rec_mc8_opt_d">
        <p>The condition for <c>if</c> is met, so the function never enters the <c>else</c>.</p>
</feedback></choice><choice correct="yes"><statement id="cond_rec_mc8_opt_e">        <p>-1</p>
</statement><feedback id="cond_rec_mc8_opt_e">
        <p>None of the conditions were met, so we reach the default cout -1.</p>
</feedback></choice></choices>
    </exercise>

    <exercise label="cond_rec_mc9">
        <statement>

        <p>Q-9: Suppose you have defined the following function:</p>
        <pre>void moo(int m, int n) {
    if (m != n) {
        m += 2;
        cout &lt;&lt; "Moo!";
        moo(m, n);
    }
    else {
        cout &lt;&lt; "Got Milk?";
    }
}</pre>
        <p>How many times does &#8220;Moo!&#8221; print when we run the following?</p>
        <pre>moo(4, 8);</pre>
</statement><choices><choice><statement id="cond_rec_mc9_opt_a">        <p>0</p>
</statement><feedback id="cond_rec_mc9_opt_a">
        <p>When we call the function <c>4 != 8</c>, so &#8220;Moo!&#8221; is printed at least
            once.</p>
</feedback></choice><choice><statement id="cond_rec_mc9_opt_b">        <p>1</p>
</statement><feedback id="cond_rec_mc9_opt_b">
        <p>The function calls itself inside of the <c>if</c> loop, so &#8220;Moo!&#8221; is printed
            more than once.</p>
</feedback></choice><choice correct="yes"><statement id="cond_rec_mc9_opt_c">        <p>2</p>
</statement><feedback id="cond_rec_mc9_opt_c">
        <p><c>m</c> is incremented by two each with each function call, so after two
            <c>m == n</c> and the recursion stops.</p>
</feedback></choice><choice><statement id="cond_rec_mc9_opt_d">        <p>3</p>
</statement><feedback id="cond_rec_mc9_opt_d">
        <p>Take a look at how <c>m</c> is incremented with each function call.</p>
</feedback></choice><choice><statement id="cond_rec_mc9_opt_e">        <p>infinite recursion</p>
</statement><feedback id="cond_rec_mc9_opt_e">
        <p>The function stops printing &#8220;Moo!&#8221; when <c>m == n</c>.</p>
</feedback></choice></choices>
    </exercise>

    <exercise label="cond_rec_mc10">
        <statement>

        <p>Q-10: Suppose you have defined the following function:</p>
        <pre>void moo(int m, int n) {
    if (m != n) {
        m += 2;
        cout &lt;&lt; "Moo!";
        moo (m, n);
    }
    else {
        cout &lt;&lt; "Got Milk?";
    }
}</pre>
        <p>How many times does &#8220;Moo!&#8221; print when we run the following?</p>
        <pre>moo(5, 10);</pre>
</statement><choices><choice><statement id="cond_rec_mc10_opt_a">        <p>0</p>
</statement><feedback id="cond_rec_mc10_opt_a">
        <p>When we call the function <c>5 != 10</c>, so &#8220;Moo!&#8221; is printed at least
            once.</p>
</feedback></choice><choice><statement id="cond_rec_mc10_opt_b">        <p>1</p>
</statement><feedback id="cond_rec_mc10_opt_b">
        <p>The function calls itself inside of the <c>if</c> loop, so &#8220;Moo!&#8221; is printed
            more than once.</p>
</feedback></choice><choice><statement id="cond_rec_mc10_opt_c">        <p>2</p>
</statement><feedback id="cond_rec_mc10_opt_c">
        <p>After two function calls, <c>m == 9</c> and <c>n == 10</c>.  The function is not
            done printing.</p>
</feedback></choice><choice><statement id="cond_rec_mc10_opt_d">        <p>3</p>
</statement><feedback id="cond_rec_mc10_opt_d">
        <p>After three function calls, <c>m == 11</c> and <c>n == 10</c>.  The function is not
            done printing</p>
</feedback></choice><choice correct="yes"><statement id="cond_rec_mc10_opt_e">        <p>infinite recursion</p>
</statement><feedback id="cond_rec_mc10_opt_e">
        <p>The function stops printing &#8220;Moo!&#8221; when <c>m == n</c>, but since <c>m</c> is odd
            and <c>n</c> is even, they will never be equal as long as we increment by two.</p>
</feedback></choice></choices>
    </exercise>
    </exercises>

