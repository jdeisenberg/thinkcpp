<section xml:id="chapter4_activecode-exercises">
        <title>Activecode Exercises</title>
        <p>Answer the following <term>Activecode</term> questions to
            assess what you have learned in this chapter.</p>
        <exercise xml:id=""><TabNode tabname="Activecode" tabnode_options="{'subchapter': 'activeCode_selectq', 'chapter': 'Chapter4', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">

<exercise label="cond_rec_a2">
    <statement>
                <p>You are part of a class where everyone passes, but it&#8217;s very hard
                    to pass with an A.  Fix the function so it prints your letter grade
                    according to this scheme.  [0, 50) = C, [50, 85) = B, and [85, 100] = A.
                    Select the Parsonsprob tab for hints for the construction of the code.</p>

    </statement>
    <program xml:id="cond_rec_a2_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

string whichDoor (double grade) {
    s = "";
    if (grade &lt; 50) {
        s = "C";
    }
    if (grade &lt; 85) {
        s = "B";
    }
    if (grade &gt;= 85) {
        s = "A";
    }
    cout &lt;&lt; s;
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </TabNode><TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'activeCode_selectq', 'chapter': 'Chapter4', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
<exercise label="cond_rec_a2_pp" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
                <p>You are part of a class where everyone passes, but it&#8217;s very hard
                    to pass with an A.  Fix the function so it prints your letter grade
                    according to this scheme.  [0, 50) = C, [50, 85) = B, and [85, 100] = A.
                    Use the lines to construct the code, then go back to complete the Activecode tab.</p>
</statement>
<blocks><block order="7">
<choice correct="yes"><cline>string whichDoor (double grade) {</cline>
</choice><choice><cline>void whichDoor (double grade) { </cline>
</choice></block><block order="1">
<choice correct="yes"><cline>    string s = "";</cline>
</choice><choice><cline>    s = ""; </cline>
</choice></block><block order="2">
<cline>    if (grade &lt; 50) {</cline>
<cline>        s = "C";</cline>
<cline>    }</cline>
</block><block order="9">
<choice correct="yes"><cline>    if (grade &lt; 85 &amp;&amp; grade &gt;= 50) {</cline>
<cline>        s = "B";</cline>
<cline>    }</cline>
</choice><choice><cline>    if (grade &lt; 85 || grade &gt;= 50) { </cline>
<cline>        s = "B";</cline>
<cline>    }</cline>
</choice></block><block order="3">
<cline>    if (grade &gt;= 85) {</cline>
<cline>        s = "A";</cline>
<cline>    }</cline>
</block><block order="5">
<cline>    cout &lt;&lt; s;</cline>
<cline>}</cline>
</block></blocks></exercise>            </TabNode></exercise>
        <exercise xml:id=""><TabNode tabname="Activecode" tabnode_options="{'subchapter': 'activeCode_selectq', 'chapter': 'Chapter4', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">

<exercise label="cond_rec_a4">
    <statement>
                <p>Finish the code below so that it prints true if <c>x</c> is even
                    and false if <c>x</c> is odd. Select the Parsonsprob tab for hints
                    for the construction of the code.</p>

    </statement>
    <program xml:id="cond_rec_a4_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void is_even (int num) {
    if (num % 2 == 0) {
        cout &lt;&lt; true;
    }
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </TabNode><TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'activeCode_selectq', 'chapter': 'Chapter4', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
<exercise label="cond_rec_a4_pp" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
                <p>Finish the code below so that it prints true if <c>x</c> is even
                    and false if <c>x</c> is odd. Use the lines to construct the code,
                    then go back to complete the Activecode tab.</p>
</statement>
<blocks><block order="3">
<cline>void is_even (int num) {</cline>
</block><block order="2">
<choice correct="yes"><cline>    if (num % 2 == 0) {</cline>
<cline>        cout &lt;&lt; "true";</cline>
<cline>    }</cline>
</choice><choice><cline>    if (num % 2 == 0) { </cline>
<cline>        cout &lt;&lt; true;</cline>
<cline>    }</cline>
</choice></block><block order="5">
<choice correct="yes"><cline>    else {</cline>
<cline>        cout &lt;&lt; "false";</cline>
<cline>    }</cline>
</choice><choice><cline>    else { </cline>
<cline>        cout &lt;&lt; false;</cline>
<cline>    }</cline>
</choice></block><block order="4">
<cline>}</cline>
</block></blocks></exercise>            </TabNode></exercise>
        <exercise xml:id=""><TabNode tabname="Activecode" tabnode_options="{'subchapter': 'activeCode_selectq', 'chapter': 'Chapter4', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">

<exercise label="cond_rec_a6">
    <statement>
                <p>Write the function <c>greaterThan</c> that prints true
                    if the first <c>double</c> argument is greater than the
                    second <c>double</c> argument.  Be sure to include any
                    necessary headers. Select the Parsonsprob tab for hints
                    for the construction of the code.</p>

    </statement>
    <program xml:id="cond_rec_a6_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void greaterThan () {

}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </TabNode><TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'activeCode_selectq', 'chapter': 'Chapter4', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
<exercise label="cond_rec_a6_pp" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
                <p>Write the function <c>greaterThan</c> that prints true
                    if the first <c>double</c> argument is greater than the
                    second <c>double</c> argument.  Be sure to include any
                    necessary headers. Use the lines to construct the code,
                    then go back to complete the Activecode tab.</p>
</statement>
<blocks><block order="3">
<choice correct="yes"><cline>void greaterThan (double a, double b) {</cline>
</choice><choice><cline>void greaterThan (int a , int b) { </cline>
</choice></block><block order="5">
<cline>    if (a &gt; b) {</cline>
<cline>        cout &lt;&lt; "true";</cline>
<cline>    }</cline>
</block><block order="2">
<cline>    if (a &lt; b) {</cline>
<cline>        cout &lt;&lt; true;</cline>
<cline>    }</cline>
</block><block order="4">
<cline>    else {</cline>
<cline>        cout &lt;&lt; "false";</cline>
<cline>    }</cline>
</block><block order="7" correct="no">
<cline>    if (double a &gt; double b) { </cline>
<cline>        cout &lt;&lt; true;</cline>
<cline>    }</cline>
</block><block order="1">
<cline>}</cline>
</block></blocks></exercise>            </TabNode></exercise>
        <exercise xml:id=""><TabNode tabname="Activecode" tabnode_options="{'subchapter': 'activeCode_selectq', 'chapter': 'Chapter4', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">

<exercise label="cond_rec_a8">
    <statement>
                <p>Write the function <c>exclusiveOr</c> that prints true If
                    either <c>a</c> OR <c>b</c> is true, and prints false otherwise.
                    Be sure to include any necessary headers. Select the Parsonsprob
                    tab for hints for the construction of the code.</p>

    </statement>
    <program xml:id="cond_rec_a8_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void exclusiveOr (bool a, bool b) {

}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </TabNode><TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'activeCode_selectq', 'chapter': 'Chapter4', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
<exercise label="cond_rec_a8_pp" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
                <p>Write the function <c>exclusiveOr</c> that prints true If
                    either <c>a</c> OR <c>b</c> is true, and prints false otherwise.
                    Be sure to include any necessary headers. Use the lines to
                    construct the code, then go back to complete the Activecode tab.</p>
</statement>
<blocks><block order="2">
<cline>void exclusiveOr (bool a, bool b) {</cline>
</block><block order="1">
<choice correct="yes"><cline>    if (a == true || b == true) {</cline>
<cline>        cout &lt;&lt; "true";</cline>
<cline>    }</cline>
</choice><choice><cline>    if (a == true &amp;&amp; b == true) { </cline>
<cline>        cout &lt;&lt; "true";</cline>
<cline>    }</cline>
</choice></block><block order="3">
<cline>    else {</cline>
<cline>        cout &lt;&lt; "false";</cline>
<cline>    }</cline>
</block><block order="5">
<cline>}</cline>
</block></blocks></exercise>            </TabNode></exercise>
        <exercise xml:id=""><TabNode tabname="Activecode" tabnode_options="{'subchapter': 'activeCode_selectq', 'chapter': 'Chapter4', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">

<exercise label="cond_rec_a10">
    <statement>
                <p>Write the function <c>printNegativeNum</c> that asks the user
                    for a negative number.  If the user does not provide a negative
                    number, it should contine asking until the user provides one.
                    It should then print the negative number. Select the Parsonsprob
                    tab for hints for the construction of the code.</p>

    </statement>
    <program xml:id="cond_rec_a10_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void printNegativeNum () {

}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </TabNode><TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'activeCode_selectq', 'chapter': 'Chapter4', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
<exercise label="cond_rec_a10_pp" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
                <p>Write the function <c>printNegativeNum</c> that asks the user
                    for a negative number.  If the user does not provide a negative
                    number, it should contine asking until the user provides one.
                    It should then print the negative number. Use the lines to construct
                    the code, then go back to complete the Activecode tab.</p>
</statement>
<blocks><block order="3">
<cline>void printNegativeNum () {</cline>
</block><block order="2">
<cline>    int negative;</cline>
</block><block order="1">
<cline>    cout &lt;&lt; "Please provide a negative number." &lt;&lt; endl;</cline>
</block><block order="6">
<cline>    cin &gt;&gt; negative;</cline>
</block><block order="8">
<choice correct="yes"><cline>    if (negative &gt;= 0) {</cline>
<cline>        printNegativeNum();</cline>
<cline>    }</cline>
</choice><choice><cline>    if (negative &gt;= 0) { </cline>
<cline>        cout &lt;&lt; "Please provide a negative nunber." &lt;&lt; endl;</cline>
<cline>    }</cline>
</choice></block><block order="4">
<cline>    cout &lt;&lt; negative &lt;&lt; endl;</cline>
</block><block order="5">
<cline>}</cline>
</block></blocks></exercise>            </TabNode></exercise>
    </section>

