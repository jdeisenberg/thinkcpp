<section xml:id="chapter4_conditional-execution">
        <title>Conditional Execution</title>
        
        
        <p>In order to write useful programs, we almost always need the ability to
            check certain conditions and change the behavior of the program
            accordingly. <term>Conditional statements</term> give us this ability. The
            simplest form is the if statement:</p>
        <pre>if (x &gt; 0) {
  cout &lt;&lt; "x is positive" &lt;&lt; endl;
}</pre>
        <p>The expression in parentheses is called the condition. If it is true,
            then the statements in brackets get executed. If the condition is not
            true, nothing happens.</p>
        
        
        <p>The condition can contain any of the <term>comparison operators</term>:</p>
        <pre>x == y               // x equals y
x != y               // x is not equal to y
x &gt; y                // x is greater than y
x &lt; y                // x is less than y
x &gt;= y               // x is greater than or equal to y
x &lt;= y               // x is less than or equal to y</pre>
        <p>Although these operations are probably familiar to you, the syntax C++
            uses is a little different from mathematical symbols like <math>=</math>,
            <math>\neq</math> and <math>\le</math>. A common error is to use a single <c>=</c>
            instead of a double <c>==</c>. Remember that = is the assignment operator, and
            <c>==</c> is a comparison operator. Also, there is no such thing as <c>=&lt;</c> or <c>=&gt;</c>.</p>
        <note>
            <p>Both sides of a conditional operator have to be the same type.</p>
        </note>
        <p>Despite automatic type conversion, you can only compare <c>int</c> s to <c>int</c> s and
            <c>double</c> s to <c>double</c> s. Unfortunately, at this point you can&#8217;t compare <c>string</c> s
            at all! There is a way to compare them, but we won&#8217;t get to it for a couple of
            chapters.</p>
        <p>Observe the conditional statement below.</p>

<exercise label="conditional_execution_AC_1">
    <statement>
        <p>This program shows how you can use conditional statements to
            assess true/false situations.</p>

    </statement>
    <program xml:id="conditional_execution_AC_1_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main () {
    int x = 12;
    if (x == 12) {
        cout &lt;&lt; "Equal!" &lt;&lt; endl;
    }
    if (x != 13) {
        cout &lt;&lt; "Not equal!" &lt;&lt; endl;
    }
    if (x &lt; 6) {
        cout &lt;&lt; "Bigger!" &lt;&lt; endl;
    }
    return 0;
}
        </input>
<tests>


</tests>

    </program>
</exercise>

    <exercise label="conditional_execution_1">
        <statement>

        <p>Q-2: Observe the code above. &#8220;Bigger&#8221; doesn&#8217;t print! How can you modify this so that all of the statements print?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Change the value of x to be anything less than 6.</p>
                </statement>
                <feedback>
                    <p>While "Bigger" would now print, the other two statements would not!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Change the value of x to 13.</p>
                </statement>
                <feedback>
                    <p>Now, none of the statements would print!</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Change the sign of the last conditional statement to x &gt; 6.</p>
                </statement>
                <feedback>
                    <p>Now, all of the statements would print.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Change the value of the return from 0 to "Bigger!"</p>
                </statement>
                <feedback>
                    <p>main returns an int, so trying to make it return a string will cause an error.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

<exercise label="conditional_execution_2">
    <statement><p>Match the operator to values of x and y that would return true.</p></statement>
    <feedback><p>Try again!</p></feedback>
<matches><match order="1"><premise>x &gt; y</premise><response>x = 10, y = 2</response></match><match order="2"><premise>x &lt;= y</premise><response>x = 5, y = 5</response></match><match order="3"><premise>x &lt; y</premise><response>x = 2, y = 10</response></match></matches></exercise>
<exercise label="conditional_execution_3">
    <statement><p>Match the operator to values of x and y that would return true.</p></statement>
    <feedback><p>Try again!</p></feedback>
<matches><match order="1"><premise>x == y</premise><response>x = 3, y = 3</response></match><match order="2"><premise>x &gt;= y</premise><response>x = 6, y = 2</response></match><match order="3"><premise>x &lt; y</premise><response>x = 2, y = 6</response></match></matches></exercise>    </section>

