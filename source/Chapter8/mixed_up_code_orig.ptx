<section xml:id="chapter8_mixed-up-code-practice">
        <title>Mixed Up Code Practice</title>
<exercise label="mucp_8_1" numbered="yes" adaptive="yes" indentation="show" language="python"><statement>
        <p>Let&#8217;s write the code for the struct definition of Song.
            The Song structure will have the instance variables string title,
            string artist, string album, and int year in that order.
            Put the necessary blocks of code in the correct order.</p>
</statement>
<blocks><block order="1">
<cline>struct Song {</cline>
</block><block order="5" correct="no">
<cline>struct song {  </cline>
</block><block order="6" correct="no">
<cline>struct Song (  </cline>
</block><block order="3">
<cline>   string title;</cline>
</block><block order="8">
<cline>   string artist;</cline>
</block><block order="11">
<cline>   string album;</cline>
</block><block order="10">
<cline>   int year;</cline>
</block><block order="4" correct="no">
<cline>   string year;  </cline>
</block><block order="9">
<cline>};</cline>
</block><block order="2" correct="no">
<cline>} </cline>
</block><block order="7" correct="no">
<cline>) </cline>
</block></blocks></exercise><exercise label="mucp_8_2" numbered="yes" adaptive="yes" indentation="show" language="python"><statement>
        <p>In main, create a Song object called fly which holds
            the data for Frank Sinatra&#8217;s &#8220;Fly Me to the Moon&#8221; from his 1964 album &#8220;It Might as Well Be Swing&#8221;.
            Put the necessary blocks of code in the correct order.</p>
</statement>
<blocks><block order="10">
<cline>int main() {</cline>
</block><block order="2">
<choice correct="yes"><cline>   Song fly;</cline>
</choice><choice><cline>   song fly;  </cline>
</choice></block><block order="9">
<cline>   fly.title = "Fly Me to the Moon";</cline>
</block><block order="11">
<cline>   fly.artist = "Frank Sinatra";</cline>
</block><block order="7">
<cline>   fly.album = "It Might as Well Be Swing";</cline>
</block><block order="5">
<cline>   fly.year = 1964;</cline>
</block><block order="8" correct="no">
<cline>   fly.year = "1964";  </cline>
</block><block order="4" correct="no">
<cline>   title = "Fly Me to the Moon";  </cline>
</block><block order="1" correct="no">
<cline>   artist.fly = "Frank Sinatra";  </cline>
</block><block order="3">
<cline>}</cline>
</block></blocks></exercise><exercise label="mucp_8_3" numbered="yes" adaptive="yes" indentation="show" language="python"><statement>
        <p>Let&#8217;s write the code for the printSong function. printSong
            takes a Song as a parameter and prints out the instance variables
            in the following format: &#8220;title&#8221; by artist (album, year). Put the necessary blocks of
            code in the correct order.</p>
</statement>
<blocks><block order="6">
<choice correct="yes"><cline>void printSong (Song s) {</cline>
</choice><choice><cline>struct printSong (Song s) {  </cline>
</choice></block><block order="2">
<cline>   cout &lt;&lt; "\"" &lt;&lt; s.title &lt;&lt; "\" by " &lt;&lt; s.artist;</cline>
</block><block order="5">
<cline>   cout &lt;&lt; " (" &lt;&lt; s.album &lt;&lt; ", " &lt;&lt; s.year &lt;&lt; ")" &lt;&lt; endl;</cline>
</block><block order="9" correct="no">
<cline>   cout &lt;&lt; title &lt;&lt; artist &lt;&lt; album &lt;&lt; year;  </cline>
</block><block order="8" correct="no">
<cline>   cout &lt;&lt; "\"" &lt;&lt; title &lt;&lt; "\" by " &lt;&lt; artist;  </cline>
</block><block order="7" correct="no">
<cline>   cout &lt;&lt; """ &lt;&lt; s.title &lt;&lt; "" by " &lt;&lt; s.artist;  </cline>
</block><block order="3" correct="no">
<cline>   cout &lt;&lt; " (" &lt;&lt; album &lt;&lt; ", " &lt;&lt; year &lt;&lt; ")" &lt;&lt; endl;  </cline>
</block><block order="1">
<cline>}</cline>
</block></blocks></exercise><exercise label="mucp_8_4" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>Let&#8217;s write the code for the struct definition of Unicorn.
            The Unicorn structure will have the instance variables name,
            age, hornLength, hairColor, and isSparkly in that order. A Unicorn&#8217;s
            horn length is measured to the nearest tenth of a unit.
            Put the necessary blocks of code in the correct order.</p>
</statement>
<blocks><block order="7">
<cline>struct Unicorn {</cline>
</block><block order="4" correct="no">
<cline>Struct Unicorn {  </cline>
</block><block order="8">
<cline>   string name;</cline>
</block><block order="3">
<cline>   int age;</cline>
</block><block order="2">
<cline>   double hornLength;</cline>
</block><block order="10">
<cline>   string hairColor;</cline>
</block><block order="5">
<cline>   bool isSparkly;</cline>
</block><block order="9" correct="no">
<cline>   int hornLength;  </cline>
</block><block order="1">
<cline>};</cline>
</block><block order="6" correct="no">
<cline>} </cline>
</block></blocks></exercise><exercise label="mucp_8_5" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>Let&#8217;s write the code for the convertToHumanAge function. convertToHumanAge
            takes a Unicorn as a parameter and returns the equivalent human age.
            If a unicorn is sparkly, then its equivalent human age is three times its age in unicorn years
            plus the length of its horn. If a unicorn is not sparkly, then its equivalent human age is
            four times its age in unicorn years plus twice the length of its horn.
            Put the necessary blocks of code in the correct order.</p>
</statement>
<blocks><block order="4">
<choice correct="yes"><cline>int convertToHumanAge (Unicorn u) {</cline>
</choice><choice><cline>void convertToHumanAge (Unicorn u) {  </cline>
</choice></block><block order="8">
<choice correct="yes"><cline>   if (u.isSparkly) {</cline>
</choice><choice><cline>   if (isSparkly) {  </cline>
</choice></block><block order="6">
<choice correct="yes"><cline>      return 3 * u.age + u.hornLength;</cline>
</choice><choice><cline>      return 3 * age + hornLength;  </cline>
</choice></block><block order="3">
<cline>   }</cline>
</block><block order="5">
<cline>   else {</cline>
</block><block order="1">
<cline>      return 4 * u.age + 2 * u.hornLength;</cline>
</block><block order="12" correct="no">
<cline>      return 4 * age + 2 * hornLength;  </cline>
</block><block order="11">
<cline>   }</cline>
</block><block order="10" correct="no">
<cline>   int humanYears;  </cline>
</block><block order="9">
<cline>}</cline>
</block></blocks></exercise><exercise label="mucp_8_6" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>Let&#8217;s write the code for the unicornPower function. unicornPower
            takes a Unicorn as a parameter and
            sets isSparkly to true and changes the color to rainbow.
            Put the necessary blocks of code in the correct order.</p>
</statement>
<blocks><block order="1">
<cline>void unicornPower (Unicorn&amp; u) {</cline>
</block><block order="8" correct="no">
<cline>void &amp;unicornPower (Unicorn u) {  </cline>
</block><block order="5" correct="no">
<cline>void unicornPower (Unicorn u) {  </cline>
</block><block order="7">
<choice correct="yes"><cline>   u.isSparkly = true;</cline>
</choice><choice><cline>   u.isSparkly == true;  </cline>
</choice></block><block order="3">
<choice correct="yes"><cline>   u.color = "rainbow";</cline>
</choice><choice><cline>   u.color = rainbow;  </cline>
</choice></block><block order="6">
<cline>}</cline>
</block></blocks></exercise><exercise label="mucp_8_7" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>Let&#8217;s write the code for the struct definitions of Address and Employee.
            The Address structure will have the instance variables houseNumber,
            state (abbreviation), and postalAddress in that order. The Employee
            structure will be a nested structure with the instance variables name
            and Address address in that order.
            Put the necessary blocks of code in the correct order, with Address defined before Employee.</p>
</statement>
<blocks><block order="12">
<cline>struct Address {</cline>
</block><block order="5" correct="no">
<cline>Struct Address {  </cline>
</block><block order="4">
<cline>   int houseNumber;</cline>
</block><block order="9">
<cline>   string state;</cline>
</block><block order="15">
<cline>   int postalAddress;</cline>
</block><block order="6" correct="no">
<cline>   Employee employee;  </cline>
</block><block order="8">
<cline>};</cline>
</block><block order="2">
<cline>struct Employee {</cline>
</block><block order="13" correct="no">
<cline>Struct Employee {  </cline>
</block><block order="14">
<cline>   string name;</cline>
</block><block order="10">
<cline>   Address address;</cline>
</block><block order="7">
<cline>};</cline>
</block><block order="1" correct="no">
<cline>   string address;  </cline>
</block><block order="3" correct="no">
<cline>   Address;  </cline>
</block><block order="11" correct="no">
<cline>}  </cline>
</block></blocks></exercise><exercise label="mucp_8_8" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>Let&#8217;s write the code for the printAddress function. printAddress takes
            an Employee as a parameter and should print out the information of the employee in the
            following format: name (id) lives at houseNumber in state, postalAddress.
            Put the necessary blocks of code in the correct order.</p>
</statement>
<blocks><block order="8">
<choice correct="yes"><cline>void printAddress (Employee e) {</cline>
</choice><choice><cline>string printAddress (Employee&amp; e) {  </cline>
</choice></block><block order="3">
<cline>   cout &lt;&lt; e.name &lt;&lt; " (" &lt;&lt; e.id &lt;&lt; ") lives at ";</cline>
</block><block order="2" correct="no">
<cline>   cout &lt;&lt; e.address.name &lt;&lt; " (" &lt;&lt; e.address.id &lt;&lt; ") lives at ";  </cline>
</block><block order="7" correct="no">
<cline>   cout &lt;&lt; e.name &lt;&lt; "(" &lt;&lt; e.address.id &lt;&lt; ") lives at";  </cline>
</block><block order="6">
<cline>   cout &lt;&lt; e.address.houseNumber &lt;&lt; " in " &lt;&lt; e.address.state &lt;&lt; ", " &lt;&lt; e.address.postalAddress &lt;&lt; endl;</cline>
</block><block order="5" correct="no">
<cline>   cout &lt;&lt; e.houseNumber &lt;&lt; " in " &lt;&lt; e.state &lt;&lt; ", " &lt;&lt; e.postalAddress &lt;&lt; endl;  </cline>
</block><block order="4">
<cline>}</cline>
</block></blocks></exercise><exercise label="mucp_8_9" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>Sometimes employees will move around and thus we&#8217;ll need to update their addresses.
            Let&#8217;s write the code for the updateAddress function. updateAddress takes an
            Employee and a new Address as parameters and sets the employee&#8217;s address to the new address.
            Put the necessary blocks of code in the correct order.</p>
</statement>
<blocks><block order="11">
<cline>void updateAddress (Employee&amp; e, Address a) {</cline>
</block><block order="5" correct="no">
<cline>void updateAddress (Employee e, Address&amp; a) {  </cline>
</block><block order="1" correct="no">
<cline>void updateAddress (Employee e, Address a) {  </cline>
</block><block order="10" correct="no">
<cline>Employee updateAddress (Employee e, Address a) {  </cline>
</block><block order="9">
<cline>   e.address = a;</cline>
</block><block order="6" correct="no">
<cline>   e.address = address;  </cline>
</block><block order="3" correct="no">
<cline>   e.address.houseNumber = a.houseNumber;  </cline>
</block><block order="8" correct="no">
<cline>   e.address.state = a.state;  </cline>
</block><block order="7" correct="no">
<cline>   e.address.houseNumber = a.houseNumber;  </cline>
</block><block order="2" correct="no">
<cline>   e.address.postalAddress = a.postalAddress;  </cline>
</block><block order="4">
<cline>}</cline>
</block><block order="12" correct="no">
<cline>};  </cline>
</block></blocks></exercise>    </section>

