<section xml:id="chapter8_accessing-instance-variables">
        <title>Accessing instance variables</title>
        <p>You can read the values of an instance variable using the same syntax we
            used to write them:</p>
        <pre>int x = blank.x;</pre>
        <p>The expression <c>blank.x</c> means &#8220;go to the object named <c>blank</c> and
            get the value of <c>x</c>.&#8221; In this case we assign that value to a local
            variable named <c>x</c>. Notice that there is no conflict between the local
            variable named <c>x</c> and the instance variable named <c>x</c>. The purpose
            of dot notation is to identify <em>which</em> variable you are referring to
            unambiguously.</p>
        <p>You can use dot notation as part of any C++ expression, so the following
            are legal.</p>
        <pre>cout &lt;&lt; blank.x &lt;&lt; ", " &lt;&lt; blank.y &lt;&lt; endl;
double distance = sqrt(blank.x * blank.x + blank.y * blank.y);</pre>

<exercise label="accessing_instance_variables_AC_1">
    <statement>
        <p>In the active code below, we access the instance variables of <c>Point</c> object
            <c>black</c> using dot notation and output their values. Next, we output the
            distance from the origin.</p>

    </statement>
    <program xml:id="accessing_instance_variables_AC_1_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;cmath&gt;
using namespace std;

struct Point {
    double x, y;
};

int main() {
    Point blank;
    blank.x = 3.0;
    blank.y = 4.0;
    cout &lt;&lt; blank.x &lt;&lt; ", " &lt;&lt; blank.y &lt;&lt; endl;
    double distance = sqrt(blank.x * blank.x + blank.y * blank.y);
    cout &lt;&lt; distance &lt;&lt; endl;
}
        </input>
<tests>


</tests>

    </program>
</exercise>

    <exercise label="accessing_instance_variables_1">
        <statement>

        <p>Q-2: In <c>string x = thing.cube;</c>, what is the object and what is the instance variable we are reading the value of?</p>
</statement><choices><choice><statement id="accessing_instance_variables_1_opt_a">        <p><c>string</c> is the instance variable, <c>cube</c> is the object</p>
</statement><feedback id="accessing_instance_variables_1_opt_a">
        <p><c>string</c> is a data type.</p>
</feedback></choice><choice><statement id="accessing_instance_variables_1_opt_b">        <p><c>x</c> is the instance variable, <c>thing</c> is the object</p>
</statement><feedback id="accessing_instance_variables_1_opt_b">
        <p><c>x</c> is the local variable.</p>
</feedback></choice><choice><statement id="accessing_instance_variables_1_opt_c">        <p><c>thing</c> is the instance variable, <c>cube</c> is the object</p>
</statement><feedback id="accessing_instance_variables_1_opt_c">
        <p>Consider the placement of <c>thing</c> &#8211; it is before the <c>.</c></p>
</feedback></choice><choice correct="yes"><statement id="accessing_instance_variables_1_opt_d">        <p><c>cube</c> is the instance variable, <c>thing</c> is the object</p>
</statement><feedback id="accessing_instance_variables_1_opt_d">
        <p>Yes, we access the instance variable <c>cube</c> of the object <c>thing</c> using the dot operator.</p>
</feedback></choice><choice><statement id="accessing_instance_variables_1_opt_e">        <p><c>cube</c> is the instance variable, <c>string</c> is the object</p>
</statement><feedback id="accessing_instance_variables_1_opt_e">
        <p><c>string</c> is a data type.</p>
</feedback></choice></choices>
    </exercise>

    <exercise label="accessing_instance_variables_2">
        <statement>

        <p>Q-3: What will print?</p>
        <program language="cpp"><input>
struct Blue {
  double x, y;
};

int main() {
  Blue blank;
  blank.x = 7.0;
  blank.y = 2.0;
  cout &lt;&lt; blank.y &lt;&lt; blank.x;
  double distance = blank.x * blank.x + blank.y * blank.y;
  cout &lt;&lt; distance &lt;&lt; endl;
}
</input></program>
</statement><choices><choice><statement id="accessing_instance_variables_2_opt_a">        <p><c>2.0 7.0 53</c></p>
</statement><feedback id="accessing_instance_variables_2_opt_a">
        <p>Spaces need to be printed out like any other output.</p>
</feedback></choice><choice correct="yes"><statement id="accessing_instance_variables_2_opt_b">        <p><c>2753</c></p>
</statement><feedback id="accessing_instance_variables_2_opt_b">
        <p>There are no spaces in the correct output.</p>
</feedback></choice><choice><statement id="accessing_instance_variables_2_opt_c">        <p><c>7253</c></p>
</statement><feedback id="accessing_instance_variables_2_opt_c">
        <p>The order in which the variables are printed out do not need to match the order in which they are declared.</p>
</feedback></choice><choice><statement id="accessing_instance_variables_2_opt_d">        <p><c>7.02.053</c></p>
</statement><feedback id="accessing_instance_variables_2_opt_d">
        <p>The order in which the variables are printed out do not need to match the order in which they are declared.</p>
</feedback></choice></choices>
    </exercise>

    <exercise label="accessing_instance_variables_3">
        <statement>

        <p>Q-4: You want to go to the object named <c>circle</c> and get the integer value of <c>y</c>, then assign it to the local variable <c>x</c>. How would you do that?</p>
</statement><choices><choice><statement id="accessing_instance_variables_3_opt_a">        <p><c>int y = circle.x();</c></p>
</statement><feedback id="accessing_instance_variables_3_opt_a">
        <p>No parentheses are needed.</p>
</feedback></choice><choice><statement id="accessing_instance_variables_3_opt_b">        <p><c>int circle = x.y;</c></p>
</statement><feedback id="accessing_instance_variables_3_opt_b">
        <p>You should be assigning to the local variable <c>x</c>.</p>
</feedback></choice><choice><statement id="accessing_instance_variables_3_opt_c">        <p><c>int y = circle.x;</c></p>
</statement><feedback id="accessing_instance_variables_3_opt_c">
        <p>You should be assigning to the local variable <c>x</c>.</p>
</feedback></choice><choice correct="yes"><statement id="accessing_instance_variables_3_opt_d">        <p><c>int x = circle.y;</c></p>
</statement><feedback id="accessing_instance_variables_3_opt_d">
        <p>This is the correct way to assign the value of <c>y</c> to <c>x</c>.</p>
</feedback></choice></choices>
    </exercise>
    </section>

