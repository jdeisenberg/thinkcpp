<section xml:id="chapter8_rectangles">
        <title>Rectangles</title>
        <p>Now let&#8217;s say that we want to create a structure to represent a
            rectangle. The question is, what information do I have to provide in
            order to specify a rectangle? To keep things simple let&#8217;s assume that
            the rectangle will be oriented vertically or horizontally, never at an
            angle.</p>
        <p>There are a few possibilities: I could specify the center of the
            rectangle (two coordinates) and its size (width and height), or I could
            specify one of the corners and the size, or I could specify two opposing
            corners.</p>
        <p>The most common choice in existing programs is to specify the upper left
            corner of the rectangle and the size. To do that in C++, we will define
            a structure that contains a <c>Point</c> and two doubles.</p>
        <pre>struct Rectangle {
  Point corner;
  double width, height;
};</pre>
        <p>Notice that one structure can contain another. In fact, this sort of
            thing is quite common. Of course, this means that in order to create a
            <c>Rectangle</c>, we have to create a <c>Point</c> first:</p>
        <pre>Point corner = { 0.0, 0.0 };
Rectangle box = { corner, 100.0, 200.0 };</pre>
        <p>This code creates a new <c>Rectangle</c> structure and initializes the
            instance variables. The figure shows the effect of this assignment.</p>
        <figure align="center" xml:id=""><image source="Chapter8/Images/8.8stackdiagram.png" width="50%" alt="image"/></figure>
        <p>We can access the <c>width</c> and <c>height</c> in the usual way:</p>
        <pre>box.width += 50.0;
cout &lt;&lt; box.height &lt;&lt; endl;</pre>
        <p>In order to access the instance variables of <c>corner</c>, we can use a
            temporary variable:</p>
        <pre>Point temp = box.corner;
double x = temp.x;</pre>
        <p>Alternatively, we can compose the two statements:</p>
        <pre>double x = box.corner.x;</pre>
        <p>It makes the most sense to read this statement from right to left:
            &#8220;Extract <c>x</c> from the <c>corner</c> of the <c>box</c>, and assign it to the
            local variable <c>x</c>.&#8221;</p>
        <p>While we are on the subject of composition, I should point out that you
            can, in fact, create the <c>Point</c> and the <c>Rectangle</c> at the same
            time:</p>
        <pre>Rectangle box = { { 0.0, 0.0 }, 100.0, 200.0 };</pre>
        
        
        <p xml:id="chapter8_index-0">The innermost squiggly braces are the coordinates of the corner point;
            together they make up the first of the three values that go into the new
            <c>Rectangle</c>. This statement is an example of <term>nested structure</term>.</p>

<exercise label="rectangles_AC_1">
    <statement>
        <p>The active code below uses the <c>Rectangle</c> structure. Feel free to
            modify the code and experiment around!</p>

    </statement>
    <program xml:id="rectangles_AC_1_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

struct Point {
    double x, y;
};

struct Rectangle {
    Point corner;
    double width, height;
};

int main() {
    Rectangle box = { { 0.0, 0.0 }, 100.0, 200.0 };
    box.width += 50.0;
    cout &lt;&lt; box.height &lt;&lt; endl;
    cout &lt;&lt; box.width &lt;&lt; endl;
}
        </input>
<tests>


</tests>

    </program>
</exercise>

    <exercise label="rectangles_1">
        <statement>

        <p>Q-2: How can you combine these two statements into one?</p>
        <program language="cpp"><input>
Point temp = box.corner;
double y = temp.y;
</input></program>
</statement><choices><choice><statement id="rectangles_1_opt_a">        <p><c>double y = corner.box.y;</c></p>
</statement><feedback id="rectangles_1_opt_a">
        <p>Try again.</p>
</feedback></choice><choice correct="yes"><statement id="rectangles_1_opt_b">        <p><c>double y = box.corner.y;</c></p>
</statement><feedback id="rectangles_1_opt_b">
        <p>Correct!</p>
</feedback></choice><choice><statement id="rectangles_1_opt_c">        <p><c>double y = corner.y;</c></p>
</statement><feedback id="rectangles_1_opt_c">
        <p>Try again.</p>
</feedback></choice><choice><statement id="rectangles_1_opt_d">        <p><c>double y = box.y;</c></p>
</statement><feedback id="rectangles_1_opt_d">
        <p>Try again.</p>
</feedback></choice></choices>
    </exercise>

<exercise label="rectangles_2">
    <statement><p>Click on the legal ways to create a Point and Rectangle structure, assuming that the Point and Rectangle structures are declared above the main function in the same way as in the active code above.</p></statement>
<feedback><p>Re-read the text above and try again.</p></feedback>
<areas>
<cline><area correct="no">def main() {</area></cline>
<cline>    <area correct="no">Point corner = ( 0.0, 0.0 );</area></cline>
<cline>    <area correct="no">Rectangle box = { ( 0.0, 0.0 ), 100.0, 200.0 }</area></cline>
<cline>    <area correct="yes">Rectangle box = { { 0.0, 0.0 }, 100.0, 200.0 };</area></cline>
<cline>    <area correct="yes">Point corner = { 0.0, 0.0 };</area></cline>
<cline>    <area correct="yes">Rectangle box = { corner, 100.0, 200.0 };</area></cline>
<cline>}</cline>
</areas></exercise>    </section>

