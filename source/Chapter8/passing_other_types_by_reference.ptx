<section xml:id="chapter8_passing-other-types-by-reference">
        <title>Passing other types by reference</title>
        <p>It&#8217;s not just structures that can be passed by reference. All the other
            types we&#8217;ve seen can, too. For example, to swap two integers, we could
            write something like:</p>
        <pre>void swap (int&amp; x, int&amp; y) {
  int temp = x;
  x = y;
  y = temp;
}</pre>
        <p>We would call this function in the usual way:</p>
        <pre>int i = 7;
int j = 9;
swap (i, j);
cout &lt;&lt; i &lt;&lt; j &lt;&lt; endl;</pre>
        <p>The output of this program is <c>97</c>. Draw a stack diagram for this
            program to convince yourself this is true. If the parameters <c>x</c> and
            <c>y</c> were declared as regular parameters (without the <c>&amp;</c>s),
            <c>swap</c> would not work. It would modify <c>x</c> and <c>y</c> and have no
            effect on <c>i</c> and <c>j</c>.</p>

<exercise label="pass_others_reference_AC_1">
    <statement>
        <p>The active code below uses the <c>swap</c> function. Run the active code
            for the output!</p>

    </statement>
    <program xml:id="pass_others_reference_AC_1_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void swap (int&amp; x, int&amp; y) {
    int temp = x;
    x = y;
    y = temp;
}

int main() {
    int i = 7;
    int j = 9;
    swap (i, j);
    cout &lt;&lt; i &lt;&lt; j &lt;&lt; endl;
}
        </input>
<tests>


</tests>

    </program>
</exercise>
        <p>When people start passing things like integers by reference, they often
            try to use an expression as a reference argument. For example:</p>
        <pre>int i = 7;
int j = 9;
swap (i, j + 1);         // WRONG!!</pre>
        <p>This is not legal because the expression <c>j+1</c> is not a variable&#8212;it
            does not occupy a location that the reference can refer to. It is a
            little tricky to figure out exactly what kinds of expressions can be
            passed by reference. For now a good rule of thumb is that reference
            arguments have to be variables.</p>

    <exercise label="pass_others_reference_1">
        <statement>

        <p>Q-2: Which of the parameters in the following code block are pass-by-reference?</p>
        <program language="cpp"><input>
void swap (int&amp; x, int&amp; y) {
  int temp = x;
  x = y;
  y = temp;
}

void add (int&amp; z, int q) {
  z = z + y;
}

int multiply (int a, int b) {
  int total = a * b;
  return total;
}
</input></program>
</statement><choices><choice correct="yes"><statement id="pass_others_reference_1_opt_a">        <p><c>x</c>, <c>y</c>, <c>z</c></p>
</statement><feedback id="pass_others_reference_1_opt_a">
        <p>Correct!</p>
</feedback></choice><choice><statement id="pass_others_reference_1_opt_b">        <p><c>x</c>, <c>y</c>, <c>z</c>, <c>q</c></p>
</statement><feedback id="pass_others_reference_1_opt_b">
        <p>Pay attention to the placement of the <c>&amp;</c></p>
</feedback></choice><choice><statement id="pass_others_reference_1_opt_c">        <p><c>a</c>, <c>b</c></p>
</statement><feedback id="pass_others_reference_1_opt_c">
        <p>Pay attention to the placement of the <c>&amp;</c></p>
</feedback></choice></choices>
    </exercise>
<exercise label="pass_others_reference_2" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>Create a function called <c>addNum</c> that takes two parameters, an integer <c>x</c> and an integer <c>y</c>. The function should add <c>y</c> to <c>x</c>, then print <c>x</c>. The variable <c>x</c> should be modified, while the variable <c>y</c> should not.</p>
</statement>
<blocks><block order="4">
<cline>void addNum(int&amp; x, int y) {</cline>
</block><block order="3" correct="no">
<cline>void addNum(int x, int y) { </cline>
</block><block order="7" correct="no">
<cline>void addNum(int&amp; x, int&amp; y) { </cline>
</block><block order="5">
<cline>   x = x + y;</cline>
</block><block order="8" correct="no">
<cline>   y = x + y; </cline>
</block><block order="2">
<cline>   cout &lt;&lt; x;</cline>
</block><block order="1" correct="no">
<cline>   return x; </cline>
</block><block order="6">
<cline>}</cline>
</block></blocks></exercise>    </section>

