<section xml:id="chapter8_activecode-exercises">
        <title>Activecode Exercises</title>
        <p>Answer the following <term>Activecode</term> questions to
            assess what you have learned in this chapter.</p>
        <exercise xml:id=""><statement>
                <p>Let&#8217;s write the code for the struct definition of <c>Song</c>.
                    The Song structure will have the instance variables string title,
                    string artist, string album, and int year in that order.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_8_1_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to define the struct definition of Song.

    
    <program xml:id="mucp_8_1_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

struct Song {
    string title;
    string artist;
    string album;
    int year;
};
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_8_1_ac_a">
    <statement>
                <p>Below is one way to define the struct definition of <c>Song</c>.</p>

    </statement>
    <program xml:id="mucp_8_1_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

struct Song {
    string title;
    string artist;
    string album;
    int year;
};
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>In main, create a Song object called <c>fly</c> which holds
                    the data for Frank Sinatra&#8217;s &#8220;Fly Me to the Moon&#8221; from his 1964 album &#8220;It Might as Well Be Swing&#8221;.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_8_2_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to create the object in the main function.

    
    <program xml:id="mucp_8_2_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

struct Song {
    string title;
    string artist;
    string album;
    int year;
};

int main() {
    Song fly;
    fly.title = "Fly Me to the Moon";
    fly.artist = "Frank Sinatra";
    fly.album = "It Might as Well Be Swing";
    fly.year = 1964;
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_8_2_ac_a">
    <statement>
                <p>Below is one way to create the object in the main function.</p>

    </statement>
    <program xml:id="mucp_8_2_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

struct Song {
    string title;
    string artist;
    string album;
    int year;
};

int main() {
    Song fly;
    fly.title = "Fly Me to the Moon";
    fly.artist = "Frank Sinatra";
    fly.album = "It Might as Well Be Swing";
    fly.year = 1964;
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Let&#8217;s write the code for the <c>printSong</c> function. printSong
                    takes a Song as a parameter and prints out the instance variables
                    in the following format: &#8220;title&#8221; by artist (album, year).</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_8_3_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the printSong function.

    
    <program xml:id="mucp_8_3_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

struct Song {
    string title;
    string artist;
    string album;
    int year;
};

void printSong (Song s) {
    cout &lt;&lt; "\"" &lt;&lt; s.title &lt;&lt; "\" by " &lt;&lt; s.artist;
    cout &lt;&lt; " (" &lt;&lt; s.album &lt;&lt; ", " &lt;&lt; s.year &lt;&lt; ")" &lt;&lt; endl;
}

int main() {
    Song fly;
    fly.title = "Fly Me to the Moon";
    fly.artist = "Frank Sinatra";
    fly.album = "It Might as Well Be Swing";
    fly.year = 1964;
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_8_3_ac_a">
    <statement>
                <p>Below is one way to write the printSong function.</p>

    </statement>
    <program xml:id="mucp_8_3_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

struct Song {
    string title;
    string artist;
    string album;
    int year;
};

void printSong (Song s) {
    cout &lt;&lt; "\"" &lt;&lt; s.title &lt;&lt; "\" by " &lt;&lt; s.artist;
    cout &lt;&lt; " (" &lt;&lt; s.album &lt;&lt; ", " &lt;&lt; s.year &lt;&lt; ")" &lt;&lt; endl;
}

int main() {
    Song fly;
    fly.title = "Fly Me to the Moon";
    fly.artist = "Frank Sinatra";
    fly.album = "It Might as Well Be Swing";
    fly.year = 1964;
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Let&#8217;s write the code for the struct definition of <c>Unicorn</c>.
                    The Unicorn structure will have the instance variables name,
                    age, hornLength, hairColor, and isSparkly in that order. A Unicorn&#8217;s
                    horn length is measured to the nearest tenth of a unit.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_8_4_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to define the struct Unicorn.

    
    <program xml:id="mucp_8_4_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

struct Unicorn {
    string name;
    int age;
    double hornLength;
    string hairColor;
    bool isSparkly;
};
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_8_4_ac_a">
    <statement>
                <p>Below is one way to define the struct <c>Unicorn</c>.</p>

    </statement>
    <program xml:id="mucp_8_4_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

struct Unicorn {
    string name;
    int age;
    double hornLength;
    string hairColor;
    bool isSparkly;
};
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Let&#8217;s write the code for the <c>convertToHumanAge</c> function. convertToHumanAge
                    takes a Unicorn as a parameter and returns the equivalent human age.
                    If a unicorn is sparkly, then its equivalent human age is three times its age in unicorn years
                    plus the length of its horn. If a unicorn is not sparkly, then its equivalent human age is
                    four times its age in unicorn years plus twice the length of its horn.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_8_5_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the convertToHumanAge function.

    
    <program xml:id="mucp_8_5_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

struct Unicorn {
    string name;
    int age;
    double hornLength;
    string hairColor;
    bool isSparkly;
};

int convertToHumanAge (Unicorn u) {
    if (u.isSparkly) {
        return 3 * u.age + u.hornLength;
    }
    else {
        return 4 * u.age + 2 * u.hornLength;
    }
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_8_5_ac_a">
    <statement>
                <p>Below is one way to write the convertToHumanAge function.</p>

    </statement>
    <program xml:id="mucp_8_5_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

struct Unicorn {
    string name;
    int age;
    double hornLength;
    string hairColor;
    bool isSparkly;
};

int convertToHumanAge (Unicorn u) {
    if (u.isSparkly) {
        return 3 * u.age + u.hornLength;
    }
    else {
        return 4 * u.age + 2 * u.hornLength;
    }
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Let&#8217;s write the code for the <c>unicornPower</c> function. unicornPower
                    takes a Unicorn as a parameter and
                    sets isSparkly to true and changes the color to rainbow.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_8_6_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the unicornPower function.

    
    <program xml:id="mucp_8_6_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

struct Unicorn {
    string name;
    int age;
    double hornLength;
    string hairColor;
    bool isSparkly;
};

void unicornPower (Unicorn&amp; u) {
    u.isSparkly = true;
    u.color = "rainbow";
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_8_6_ac_a">
    <statement>
                <p>Below is one way to write the unicornPower function.</p>

    </statement>
    <program xml:id="mucp_8_6_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

struct Unicorn {
    string name;
    int age;
    double hornLength;
    string hairColor;
    bool isSparkly;
};

void unicornPower (Unicorn&amp; u) {
    u.isSparkly = true;
    u.color = "rainbow";
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Let&#8217;s write the code for the struct definitions of <c>Address</c> and <c>Employee</c>.
                    The Address structure will have the instance variables houseNumber,
                    state (abbreviation), and postalAddress in that order. The Employee
                    structure will be a nested structure with the instance variables name
                    and Address address in that order.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_8_7_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to define the Address and Employee structs.

    
    <program xml:id="mucp_8_7_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

struct Address {
    int houseNumber;
    string state;
    int postalAddress;
};

struct Employee {
    string name;
    Address address;
};
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_8_7_ac_a">
    <statement>
                <p>Below is one way to define the <c>Address</c> and <c>Employee</c> structs.</p>

    </statement>
    <program xml:id="mucp_8_7_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

struct Address {
    int houseNumber;
    string state;
    int postalAddress;
};

struct Employee {
    string name;
    Address address;
};
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Let&#8217;s write the code for the <c>printAddress</c> function. printAddress takes
                    an Employee as a parameter and should print out the information of the employee in the
                    following format: name (id) lives at houseNumber in state, postalAddress.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_8_8_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the printAddress function

    
    <program xml:id="mucp_8_8_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

struct Address {
    int houseNumber;
    string state;
    int postalAddress;
};

struct Employee {
    string name;
    Address address;
    int id;
};

void printAddress (Employee e) {
    cout &lt;&lt; e.name &lt;&lt; " (" &lt;&lt; e.id &lt;&lt; ") lives at ";
    cout &lt;&lt; e.address.houseNumber &lt;&lt; " in" &lt;&lt; e.address.state &lt;&lt; " ," &lt;&lt; e.address.postalAddress &lt;&lt; endl;
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_8_8_ac_a">
    <statement>
                <p>Below is one way to write the printAddress function</p>

    </statement>
    <program xml:id="mucp_8_8_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

struct Address {
    int houseNumber;
    string state;
    int postalAddress;
};

struct Employee {
    string name;
    Address address;
    int id;
};

void printAddress (Employee e) {
    cout &lt;&lt; e.name &lt;&lt; " (" &lt;&lt; e.id &lt;&lt; ") lives at ";
    cout &lt;&lt; e.address.houseNumber &lt;&lt; " in" &lt;&lt; e.address.state &lt;&lt; " ," &lt;&lt; e.address.postalAddress &lt;&lt; endl;
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Sometimes employees will move around and thus we&#8217;ll need to update their addresses.
                    Let&#8217;s write the code for the <c>updateAddress</c> function. updateAddress takes an
                    Employee and a new Address as parameters and sets the employee&#8217;s address to the new address.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_8_9_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the updateAddress function.

    
    <program xml:id="mucp_8_9_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

struct Address {
    int houseNumber;
    string state;
    int postalAddress;
};

struct Employee {
    string name;
    Address address;
};

void updateAdress (Employee&amp; e, Address a) {
    e.address = a;
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_8_9_ac_a">
    <statement>
                <p>Below is one way to write the <c>updateAddress</c> function.</p>

    </statement>
    <program xml:id="mucp_8_9_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

struct Address {
    int houseNumber;
    string state;
    int postalAddress;
};

struct Employee {
    string name;
    Address address;
};

void updateAdress (Employee&amp; e, Address a) {
    e.address = a;
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Let&#8217;s write the code for the <c>storeEmployeeData</c> function. storeEmployeeData doesn&#8217;t
                    take any parameters and prompts the user for information regarding their
                    name, house number, state, and postal code. It then returns an Employee object with
                    the stored data. Declare all variables before prompting the user.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_8_10_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the storeEmployeeData function.

    
    <program xml:id="mucp_8_10_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

struct Address {
    int houseNumber;
    string state;
    int postalCode;
};

struct Employee {
    string name;
    Address address;
};

void storeEmployeeData() {
    Employee e;
    cout &lt;&lt; "What is your full name?";
    getline(cin, e.name);
    cout &lt;&lt; "What is your house number?";
    cin &gt;&gt; e.address.houseNumber;
    cout &lt;&lt; "What state do you live in?";
    cin &gt;&gt; e.address.state;
    cout &lt;&lt; "What is your postal code?";
    cin &gt;&gt; e.address.postalCode;
    return e;
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_8_10_ac_a">
    <statement>
                <p>Below is one way to write the <c>storeEmployeeData</c> function.</p>

    </statement>
    <program xml:id="mucp_8_10_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

struct Address {
    int houseNumber;
    string state;
    int postalCode;
};

struct Employee {
    string name;
    Address address;
};

void storeEmployeeData() {
    Employee e;
    cout &lt;&lt; "What is your full name?";
    getline(cin, e.name);
    cout &lt;&lt; "What is your house number?";
    cin &gt;&gt; e.address.houseNumber;
    cout &lt;&lt; "What state do you live in?";
    cin &gt;&gt; e.address.state;
    cout &lt;&lt; "What is your postal code?";
    cin &gt;&gt; e.address.postalCode;
    return e;
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
    </section>

