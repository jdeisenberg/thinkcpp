<section xml:id="chapter8_structures-as-parameters">
        <title>Structures as parameters</title>
        <p>You can pass structures as parameters in the usual way. For example,</p>
        <pre>void printPoint (Point p) {
  cout &lt;&lt; "(" &lt;&lt; p.x &lt;&lt; ", " &lt;&lt; p.y &lt;&lt; ")" &lt;&lt; endl;
}</pre>
        <p><c>printPoint</c> takes a point as an argument and outputs it in the
            standard format. If you call <c>printPoint (blank)</c>, it will output
            <c>(3, 4)</c>.</p>

<exercise label="structures_parameters_AC_1">
    <statement>
        <p>The active code below uses the <c>printPoint</c> function. Run the code to
            see the output!</p>

    </statement>
    <program xml:id="structures_parameters_AC_1_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

struct Point {
    double x, y;
};

void printPoint (Point p) {
    cout &lt;&lt; "(" &lt;&lt; p.x &lt;&lt; ", " &lt;&lt; p.y &lt;&lt; ")" &lt;&lt; endl;
}

int main() {
    Point blank = { 3.0, 4.0 };
    printPoint (blank);
}
        </input>
<tests>


</tests>

    </program>
</exercise>
        <p>As a second example, we can rewrite the <c>distance</c> function from
            <number_reference internal="True" refuri="../Chapter5/programdevelopment#distance" title="Section %s"><inline classes="std std-numref">Section 5.2</inline></number_reference> so that it takes two <c>Point</c>s as
            parameters instead of four <c>double</c>s.</p>
        <pre>double distance (Point p1, Point p2) {
  double dx = p2.x - p1.x;
  double dy = p2.y - p1.y;
  return sqrt (dx*dx + dy*dy);
}</pre>

<exercise label="structures_parameters_AC_2">
    <statement>
        <p>The active code below uses the updated version of the <c>distance</c> function.
            Feel free to modify the code!</p>

    </statement>
    <program xml:id="structures_parameters_AC_2_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;cmath&gt;
using namespace std;

struct Point {
    double x, y;
};

double distance (Point p1, Point p2) {
    double dx = p2.x - p1.x;
    double dy = p2.y - p1.y;
    return sqrt (dx*dx + dy*dy);
}

int main() {
    Point origin = { 0.0, 0.0 };
    Point point = { 3.0, 4.0 };
    cout &lt;&lt; "The distance from the point to the origin is " &lt;&lt; distance (origin, point) &lt;&lt; endl;
}
        </input>
<tests>


</tests>

    </program>
</exercise>

    <exercise label="structures_parameters_1">
        <statement>

        <p>Q-3: What will print?</p>
        <program language="cpp"><input>
struct Coordinate {
  int x, y;
};

void printOppositeCoordinate (Coordinate p) {
  cout &lt;&lt; "(" &lt;&lt; -p.y &lt;&lt; ", " &lt;&lt; -p.x &lt;&lt; ")" &lt;&lt; endl;
}

int main() {
  Coordinate coord = { 2, 7 };
  printOppositeCoordinate (coord);
}
</input></program>
</statement><choices><choice><statement id="structures_parameters_1_opt_a">        <p><c>(-2, -7)</c></p>
</statement><feedback id="structures_parameters_1_opt_a">
        <p>Take a close look at the printOppositeCoordinate function.</p>
</feedback></choice><choice><statement id="structures_parameters_1_opt_b">        <p><c>(2.0, 7.0)</c></p>
</statement><feedback id="structures_parameters_1_opt_b">
        <p>Take a close look at the printOppositeCoordinate function.</p>
</feedback></choice><choice correct="yes"><statement id="structures_parameters_1_opt_c">        <p><c>(-7, -2)</c></p>
</statement><feedback id="structures_parameters_1_opt_c">
        <p>Yes, this is the correct output.</p>
</feedback></choice><choice><statement id="structures_parameters_1_opt_d">        <p><c>(-7.0, -2.0)</c></p>
</statement><feedback id="structures_parameters_1_opt_d">
        <p>Take a close look at the Coordinate struct.</p>
</feedback></choice></choices>
    </exercise>
<exercise label="structures_parameters_2" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>Construct a function that takes in three Point structures and prints the average of the x coordinates and the average of the y coordinates as a coordinate. Find the x average before the y average.</p>
</statement>
<blocks><block order="4">
<cline>void printAveragePoint(Point p1, Point p2, Point p3) {</cline>
</block><block order="3">
<cline> double avgX = (p1.x + p2.x + p3.x)/3;</cline>
</block><block order="2">
<cline> double avgY = (p1.y + p2.y + p3.y)/3;</cline>
</block><block order="1" correct="no">
<cline> double avgY = (y.p1 + y.p2 + y.p3)/3; </cline>
</block><block order="7">
<cline> cout &lt;&lt; "(" &lt;&lt; avgX &lt;&lt; "," &lt;&lt; avgY &lt;&lt; ")";</cline>
</block><block order="5" correct="no">
<cline> cout &lt;&lt; "(" &lt;&lt; "avgX" &lt;&lt; "," &lt;&lt; "avgY" &lt;&lt; ")"; </cline>
</block><block order="6">
<cline>}</cline>
</block></blocks></exercise>    </section>

