<section xml:id="chapter9_pure-functions">
        <title>Pure functions</title>
        
        
        <p xml:id="chapter9_index-0">A function is considered a pure function if the result depends only on
            the arguments, and it has no side effects like modifying an argument or
            outputting something. The only result of calling a pure function is the
            return value.</p>

<exercise label="pure_function_AC_1">
    <statement>
        <p>One example is the function <c>after</c>, which compares two <c>Time</c>s and returns a
            <c>bool</c> that indicates whether the first operand comes after the second. Take a look
            at the active code below.</p>

    </statement>
    <program xml:id="pure_function_AC_1_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

struct Time {
    int hour, minute;
    double second;
};

bool after (Time&amp; time1, Time&amp; time2) {
    if (time1.hour &gt; time2.hour) { return true; }
    if (time1.hour &lt; time2.hour) { return false; }
    if (time1.minute &gt; time2.minute) { return true; }
    if (time1.minute &lt; time2.minute) { return false; }
    if (time1.second &gt; time2.second) { return true; }
    return false;
}

int main () {
    Time time = { 11, 59, 3.14159 };
    Time time2 = { 1, 50, 3.14159 };
    cout &lt;&lt; after(time, time2);
}
        </input>
<tests>


</tests>

    </program>
</exercise>
        <p>What is the result of this function if the two times are equal? Does
            that seem like the appropriate result for this function? If you were
            writing the documentation for this function, would you mention that case
            specifically?</p>
        <p>A second example is <c>addTime</c>, which calculates the sum of two times.
            For example, if it is <c>9:14:30</c>, and your breadmaker takes 3 hours and
            35 minutes, you could use <c>addTime</c> to figure out when the bread will
            be done.</p>
        <p>Here is a rough draft of this function that is not quite right:</p>
        <pre>Time addTime (Time&amp; t1, Time&amp; t2) {
  Time sum;
  sum.hour = t1.hour + t2.hour;
  sum.minute = t1.minute + t2.minute;
  sum.second = t1.second + t2.second;
  return sum;
}</pre>

<exercise label="pure_function_AC_2">
    <statement>
        <p>Take a look at the active code below. If <c>currentTime</c>
            contains the current time and <c>breadTime</c> contains the amount of time
            it takes for your breadmaker to make bread, then you could use
            <c>addTime</c> to figure out when the bread will be done.</p>

    </statement>
    <program xml:id="pure_function_AC_2_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

struct Time {
    int hour, minute;
    double second;
};

void printTime (Time&amp; t) {
    cout &lt;&lt; t.hour &lt;&lt; ":" &lt;&lt; t.minute &lt;&lt; ":" &lt;&lt; t.second &lt;&lt; endl;
}

Time addTime (Time&amp; t1, Time&amp; t2) {
    Time sum;
    sum.hour = t1.hour + t2.hour;
    sum.minute = t1.minute + t2.minute;
    sum.second = t1.second + t2.second;
    return sum;
}

int main() {
    Time currentTime = { 9, 14, 30.0 };
    Time breadTime = { 3, 35, 0.0 };
    Time doneTime = addTime (currentTime, breadTime);
    printTime (doneTime);
}
        </input>
<tests>


</tests>

    </program>
</exercise>
        <p>The output of this program is <c>12:49:30</c>, which is correct. On the
            other hand, there are cases where the result is not correct. Can you
            think of one?</p>
        <p>The problem is that this function does not deal with cases where the
            number of seconds or minutes adds up to more than 60. When that happens
            we have to &#8220;carry&#8221; the extra seconds into the minutes column, or extra
            minutes into the hours column.</p>
        <p>Here&#8217;s a second, corrected version of this function.</p>

<exercise label="pure_function_AC_3">
    <statement>
        <p>The active code below is the corrected version of <c>addTime</c>.</p>

    </statement>
    <program xml:id="pure_function_AC_3_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

struct Time {
    int hour, minute;
    double second;
};

void printTime (Time&amp; t) {
    cout &lt;&lt; t.hour &lt;&lt; ":" &lt;&lt; t.minute &lt;&lt; ":" &lt;&lt; t.second &lt;&lt; endl;
}

Time addTime (Time&amp; t1, Time&amp; t2) {
    Time sum;
    sum.hour = t1.hour + t2.hour;
    sum.minute = t1.minute + t2.minute;
    sum.second = t1.second + t2.second;
    if (sum.second &gt;= 60.0) {
        sum.second -= 60.0;
        sum.minute += 1;
    }
    if (sum.minute &gt;= 60) {
        sum.minute -= 60;
        sum.hour += 1;
    }
    return sum;
}

int main() {
    Time currentTime = { 9, 14, 30.0 };
    Time breadTime = { 3, 35, 0.0 };
    Time doneTime = addTime (currentTime, breadTime);
    printTime (doneTime);
}
        </input>
<tests>


</tests>

    </program>
</exercise>
        <p>Although it&#8217;s correct, it&#8217;s starting to get big. Later, I will suggest
            an alternate approach to this problem that will be much shorter.</p>
        <p>This code demonstrates two operators we have not seen before, <c>+=</c> and
            <c>-=</c>. These operators provide a concise way to increment and decrement
            variables. For example, the statement <c>sum.second -= 60.0;</c> is
            equivalent to <c>sum.second = sum.second - 60;</c></p>

<exercise label="pure_functions_1">
    <statement><p>Match the statement to its equivalent.</p></statement>
    <feedback><p>Try again.</p></feedback>
<matches><match order="1"><premise>x.dollar += 2;</premise><response>x.dollar = x.dollar + 2;</response></match><match order="2"><premise>x.dollar -= 2;</premise><response>x.dollar = x.dollar - 2;</response></match><match order="3"><premise>x.cents -= 2;</premise><response>x.cents = x.cents - 2;</response></match><match order="4"><premise>x.cents += 2;</premise><response>x.cents = x.cents + 2;</response></match></matches></exercise>    </section>

