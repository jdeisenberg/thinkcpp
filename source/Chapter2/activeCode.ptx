<section xml:id="chapter2_activecode-exercises">
        <title>Activecode Exercises</title>
        <p>Answer the following <term>Activecode</term> questions to assess what you have learned in this chapter.</p>
        <exercise xml:id=""><statement>
                <p>Fix the code below so that it runs without errors.  Hint: you might need to change the names of some variables.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="VARS_a1q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main () {
    char true = 'T';
    char false = 'F';

    cout &lt;&lt; true &lt;&lt; " is short for true. ";
    cout &lt;&lt; false &lt;&lt; " is short for false." &lt;&lt; endl;
}
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to fix the program.  true and false are keywords, so they cannot be used as variable names.

    
    <program xml:id="VARS_a1a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main () {
    char t = 'T';
    char f = 'F';
    cout &lt;&lt; t &lt;&lt; " is short for true. ";
    cout &lt;&lt; f &lt;&lt; " is short for false." &lt;&lt; endl;
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="VARS_a1a">
    <statement>
                <p>Below is one way to fix the program.  <c>true</c> and <c>false</c> are keywords, so they cannot be used as variable names.</p>

    </statement>
    <program xml:id="VARS_a1a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main () {
    char t = 'T';
    char f = 'F';
    cout &lt;&lt; t &lt;&lt; " is short for true. ";
    cout &lt;&lt; f &lt;&lt; " is short for false." &lt;&lt; endl;
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=VARS_a2_sq data-questionlist='VARS_a2, VARS_a2_p'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: VARS_a2, VARS_a2_p&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
        <exercise xml:id=""><statement>
                <p>Fix the code below so that it prints &#8220;Cady scored 90% on the exam.&#8221;</p>

    </statement><program interactive="activecode" language="cpp" xml:id="VARS_a3q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
    // Modify the next line so that Cady = 0.9.
    int Cady = 3 * 5 * (6 / 100);

    // DO NOT MODIFY ANYTHING BELOW THIS LINE.
    cout &lt;&lt; "Cady scored " &lt;&lt; Cady * 100 &lt;&lt; "% on the exam.";
}
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to fix the program.  We want to use doubles so that our result isn&#8217;t rounded down to 0 through integer division.

    
    <program xml:id="VARS_a3a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
    double Cady = 3 * 5 * (6 / 100.0);
    cout &lt;&lt; "Cady scored " &lt;&lt; Cady * 100 &lt;&lt; "% on the exam.";
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="VARS_a3a">
    <statement>
                <p>Below is one way to fix the program.  We want to use doubles so that our result isn&#8217;t rounded down to 0 through integer division.</p>

    </statement>
    <program xml:id="VARS_a3a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
    double Cady = 3 * 5 * (6 / 100.0);
    cout &lt;&lt; "Cady scored " &lt;&lt; Cady * 100 &lt;&lt; "% on the exam.";
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=VARS_a4_sq data-questionlist='VARS_a4, VARS_a4_p'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: VARS_a4, VARS_a4_p&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
        <exercise xml:id=""><statement>
                <p>Fix the code below so that assigns <c>a</c> its correct value of <c>'a'</c>.  Hint: use character operations!</p>

    </statement><program interactive="activecode" language="cpp" xml:id="VARS_a5q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main () {
   char a = 's';

   // Fix the line below.  Do NOT change the numbers!  Instead,
   // change the location of the parentheses.
   a = a - 3 * 4 + (1 + 3);

   // DO NOT MODIFY ANYTHING BELOW THIS LINE.
   cout &lt;&lt; a;
}
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to complete the program.  There are many creative ways that you could use the order of operations to come up with a complex expression that will bring you to 'a', here is one way.

    
    <program xml:id="VARS_a5a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main () {
   char a = 's';
   a = a - (3 * (4 + 1) + 3);
   cout &lt;&lt; a;
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="VARS_a5a">
    <statement>
                <p>Below is one way to complete the program.  There are many creative ways that you could use the order of operations to come up with a complex expression that will bring you to <c>'a'</c>, here is one way.</p>

    </statement>
    <program xml:id="VARS_a5a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main () {
   char a = 's';
   a = a - (3 * (4 + 1) + 3);
   cout &lt;&lt; a;
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=VARS_a6_sq data-questionlist='VARS_a6, VARS_a6_p'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: VARS_a6, VARS_a6_p&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
        <exercise xml:id=""><statement>
                <p>Write code that prints &#8220;Eat&#8221;, &#8220;More&#8221;, and &#8220;Chicken&#8221; on 3 consecutive lines. Be sure to inclue any necessary headers.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="VARS_a7q_editor">

        <input>
int main () {

}
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to implement the solution.

    
    <program xml:id="VARS_a7a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main () {
    cout &lt;&lt; "Eat" &lt;&lt; endl;
    cout &lt;&lt; "More" &lt;&lt; endl;
    cout &lt;&lt; "Chicken" &lt;&lt; endl;
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="VARS_a7a">
    <statement>
                <p>Below is one way to implement the solution.</p>

    </statement>
    <program xml:id="VARS_a7a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main () {
    cout &lt;&lt; "Eat" &lt;&lt; endl;
    cout &lt;&lt; "More" &lt;&lt; endl;
    cout &lt;&lt; "Chicken" &lt;&lt; endl;
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=VARS_a8_sq data-questionlist='VARS_a8, VARS_a8_p'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: VARS_a8, VARS_a8_p&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
        <exercise xml:id=""><statement>
                <p>You have about three hours and fifteen minutes of homework to do today.  Rather than starting it right away, you choose to procrastinate by calculating how many seconds you&#8217;ll be spending on your work.  Convert the time to seconds and store the result in <c>seconds</c>.  Be sure to inclue any necessary headers.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="VARS_a9q_editor">

        <input>
int main () {

    // DO NOT MODIFY ANYTHING BELOW THIS LINE.
    cout &lt;&lt; "Your solution had seconds = " &lt;&lt; seconds &lt;&lt; endl;  cout &lt;&lt; "The correct solution has seconds = 11700";
}
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to implement the solution.

    
    <program xml:id="VARS_a9a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main () {
    int hours = 3;
    int minutes = 15;
    int totalMinutes = minutes + 60 * hours;
    int seconds = totalMinutes * 60;
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="VARS_a9a">
    <statement>
                <p>Below is one way to implement the solution.</p>

    </statement>
    <program xml:id="VARS_a9a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main () {
    int hours = 3;
    int minutes = 15;
    int totalMinutes = minutes + 60 * hours;
    int seconds = totalMinutes * 60;
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=VARS_a10_sq data-questionlist='VARS_a10, VARS_a10_p'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: VARS_a10, VARS_a10_p&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
    </section>

