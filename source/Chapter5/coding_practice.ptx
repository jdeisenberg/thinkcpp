<section xml:id="chapter5_coding-practice">
        <title>Coding Practice</title>
        <exercise xml:id=""><statement/><program interactive="" language="" xml:id=""/><solution>
                Below is one way to implement the calculator function. Using conditionals,
                    we return the correct result depending on which operation was given.

    <program xml:id="cp_5_AC_1a" language="cpp">
    
        <input>
#include &lt;iostream&gt;
using namespace std;

double calculator (double first, double second, char operation) {
    if (operation == '+') {
        return first + second;
    }
    else if (operation == '-') {
        return first - second;
    }
    else if (operation == '*') {
        return first * second;
    }
    else {
        return first / second;
    }
}
        </input>
<tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("calculator function: addition") {
    REQUIRE(calculator(3, 6, '+') == 9);
    REQUIRE(calculator(-2.6, 4, '+') == 1.4);
}

TEST_CASE("calculator function: subtraction") {
    REQUIRE(calculator(19, 2, '-') == 17);
    REQUIRE(calculator(-2.3, 2, '-') == -4.3);
}

TEST_CASE("calculator function: multiplication") {
    REQUIRE(calculator(5, 8, '*') == 40);
    REQUIRE(calculator(0.5, -6, '*') == -3.0);
}

TEST_CASE("calculator function: division") {
    REQUIRE(calculator(16, 4, '/') == 4);
    REQUIRE(calculator(3, 8, '/') == 0.375);
}
</tests>

    </program>
            
                <p>Below is one way to implement the <c>calculator</c> function. Using conditionals,
                    we return the correct result depending on which operation was given.</p>

    
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=cp_5_AC_2q_sq data-questionlist='cp_5_AC_2q, cp_5_AC_2q_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: cp_5_AC_2q, cp_5_AC_2q_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
        <exercise xml:id=""><statement/><program interactive="" language="" xml:id=""/><solution>
                Below is one way to implement the program. Using the formula given,
                    we can find the interior angle and return it. Notice how we use 180.0
                    instead of 180 to avoid integer division.

    <program xml:id="cp_5_AC_3a" language="cpp">
    
        <input>
#include &lt;iostream&gt;
using namespace std;

double calculateIntAngle (int numSides) {
    return (numSides - 2) * 180.0 / numSides;
}
        </input>
<tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("calculateIntAngle function") {
    REQUIRE(calculateIntAngle (3) == 60);
    REQUIRE(calculateIntAngle (4) == 90);
    REQUIRE(calculateIntAngle (5) == 108);
    REQUIRE(calculateIntAngle (8) == 135);
}
</tests>

    </program>
            
                <p>Below is one way to implement the program. Using the formula given,
                    we can find the interior angle and return it. Notice how we use 180.0
                    instead of 180 to avoid integer division.</p>

    
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=cp_5_AC_4q_sq data-questionlist='cp_5_AC_4q, cp_5_AC_4q_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: cp_5_AC_4q, cp_5_AC_4q_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
        <exercise xml:id=""><statement/><program interactive="" language="" xml:id=""/><solution>
                Below is one way to implement the program. We can use a conditional to
                    check to see if the dog is one year old. If it is older than one, then
                    we can use the formula to return the correct age in human years.

    <program xml:id="cp_5_AC_5a" language="cpp">
    
        <input>
#include &lt;iostream&gt;
using namespace std;

int dogToHumanYears (int dogAge) {
    if (dogAge == 1) {
        return 15;
    }
    return 24 + (dogAge - 2) * 4;
}
        </input>
<tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("dogToHumanYears function for 1 and under") {
    REQUIRE(dogToHumanYears (1) == 15);
}

TEST_CASE("dogToHumanYears function for &gt;1") {
    REQUIRE(dogToHumanYears (2) == 24);
    REQUIRE(dogToHumanYears (3) == 28);
    REQUIRE(dogToHumanYears (5) == 36);
}
</tests>

    </program>
            
                <p>Below is one way to implement the program. We can use a conditional to
                    check to see if the dog is one year old. If it is older than one, then
                    we can use the formula to return the correct age in human years.</p>

    
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=cp_5_AC_6q_sq data-questionlist='cp_5_AC_6q, cp_5_AC_6q_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: cp_5_AC_6q, cp_5_AC_6q_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
        <exercise xml:id=""><statement/><program interactive="" language="" xml:id=""/><solution>
                Below is one way to implement the program. We can use conditionals in this
                    order to efficiently determine whether or not a given year is a leap year.

    <program xml:id="cp_5_AC_7a" language="cpp">
    
        <input>
#include &lt;iostream&gt;
using namespace std;

bool isLeapYear (int year) {
    if (year % 400 == 0) {
        return true;
    }
    else if (year % 100 == 0) {
        return false;
    }
    else if (year % 4 == 0) {
        return true;
    }
    else {
        return false;
    }
}
        </input>
<tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("isLeapYear not divisible by 4") {
    REQUIRE(isLeapYear (2001) == 0);
    REQUIRE(isLeapYear (2005) == 0);
}

TEST_CASE("isLeapYear divisible by 4") {
    REQUIRE(isLeapYear (2004) == 1);
    REQUIRE(isLeapYear (2008) == 1);
}

TEST_CASE("isLeapYear divisible by 100") {
    REQUIRE(isLeapYear (2100) == 0);
    REQUIRE(isLeapYear (1900) == 0);
}

TEST_CASE("isLeapYear divisible by 400") {
    REQUIRE(isLeapYear (2000) == 1);
    REQUIRE(isLeapYear (2400) == 1);
}
</tests>

    </program>
            
                <p>Below is one way to implement the program. We can use conditionals in this
                    order to efficiently determine whether or not a given year is a leap year.</p>

    
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=cp_5_AC_8q_sq data-questionlist='cp_5_AC_8q, cp_5_AC_8q_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: cp_5_AC_8q, cp_5_AC_8q_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
        <exercise xml:id=""><statement/><program interactive="" language="" xml:id=""/><solution>
                Below is one way to implement the program. We can use conditionals to
                    separate the base case and recursive cases. Our base case is when n
                    is 1, and in that case we return 1. Otherwise, we recursively
                    call triangularNum on n-1.

    <program xml:id="cp_5_AC_9a" language="cpp">
    
        <input>
#include &lt;iostream&gt;
using namespace std;

int triangularNum (int n) {
    if (n == 1) {
        return 1;
    }
    else {
        return n + triangularNum(n - 1);
    }
}
        </input>
<tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("triangularNum function") {
    REQUIRE(triangularNum (1) == 1);
    REQUIRE(triangularNum (3) == 6);
    REQUIRE(triangularNum (6) == 21);
    REQUIRE(triangularNum (17) == 153);
}
</tests>

    </program>
            
                <p>Below is one way to implement the program. We can use conditionals to
                    separate the base case and recursive cases. Our base case is when <c>n</c>
                    is 1, and in that case we return 1. Otherwise, we recursively
                    call <c>triangularNum</c> on <c>n-1</c>.</p>

    
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=cp_5_AC_10q_sq data-questionlist='cp_5_AC_10q, cp_5_AC_10q_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: cp_5_AC_10q, cp_5_AC_10q_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
    </section>

