<section xml:id="chapter5_more-recursion">
        <title>More recursion</title>
        
        
        <p>So far we have only learned a small subset of C++, but you might be
            interested to know that this subset is now a <term>complete</term> programming
            language, by which I mean that anything that can be computed can be
            expressed in this language. Any program ever written could be rewritten
            using only the language features we have used so far (actually, we would
            need a few commands to control devices like the keyboard, mouse, disks,
            etc., but that&#8217;s all).</p>
        <p>Proving that claim is a non-trivial exercise first accomplished by Alan
            Turing, one of the first computer scientists (well, some would argue
            that he was a mathematician, but a lot of the early computer scientists
            started as mathematicians). Accordingly, it is known as the Turing
            thesis. If you take a course on the Theory of Computation, you will have
            a chance to see the proof.</p>
        <p>To give you an idea of what you can do with the tools we have learned so
            far, we&#8217;ll evaluate a few recursively-defined mathematical functions. A
            recursive definition is similar to a circular definition, in the sense
            that the definition contains a reference to the thing being defined. A
            truly circular definition is typically not very useful:</p>
        <dl>
            <li>
                <title>frabjuous:</title>
                
                    <p>an adjective used to describe something that is frabjuous.</p>
                
            </li>
        </dl>
        
        
        <p xml:id="chapter5_index-1">If you saw that definition in the dictionary, you might be annoyed. On
            the other hand, if you looked up the definition of the mathematical
            function <term>factorial</term>, you might get something like:</p>
        <me>\begin{aligned}
&amp;&amp;  0! = 1 \\
&amp;&amp;  n! = n \cdot (n-1)!\end{aligned}</me>
        <note>
            <p>Factorial is usually denoted with the symbol <m>!</m>, which is not to
                be confused with the C++ logical operator ! which means NOT.</p>
        </note>
        <p>This definition says that the factorial of 0 is 1, and the factorial of any
            other value, <m>n</m>, is <m>n</m> multiplied by the factorial of
            <m>n-1</m>. So <m>3!</m> is 3 times <m>2!</m>, which is 2 times
            <m>1!</m>, which is 1 times 0!. Putting it all together, we get
            <m>3!</m> equal to 3 times 2 times 1 times 1, which is 6.</p>
        <p>If you can write a recursive definition of something, you can usually
            write a C++ program to evaluate it. The first step is to decide what the
            parameters are for this function, and what the return type is. With a
            little thought, you should conclude that factorial takes an integer as a
            parameter and returns an integer:</p>
        <pre>int factorial (int n) {
}</pre>
        <p>If the argument happens to be zero, all we have to do is return 1:</p>
        <pre>int factorial(int n) {
  if (n == 0) {
    return 1;
  }
}</pre>
        <p>Otherwise, and this is the interesting part, we have to make a recursive
            call to find the factorial of <m>n-1</m>, and then multiply it by
            <m>n</m>.</p>

<exercise label="more_recursion_AC_1">
    <statement>
        <p>This program uses recursion to calculate the factorial of
            the passed argument.</p>

    </statement>
    <program xml:id="more_recursion_AC_1_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int factorial(int n) {
    if (n == 0) {
        return 1;
    }
    else {
        int recurse = factorial(n - 1);
        int result = n * recurse;
        return result;
    }
}

int main () {
    cout &lt;&lt; factorial(3) &lt;&lt; endl;
}
        </input>
<tests>


</tests>

    </program>
</exercise>
        <p>If we look at the flow of execution for this program, it is similar to
            nLines from the previous chapter. If we call factorial with the value 3:</p>
        <p>Since 3 is not zero, we take the second branch and calculate the
            factorial of <c>n&#160;-&#160;1</c>&#8230;</p>
        <blockquote>
            <p>Since 2 is not zero, we take the second branch and calculate the
                factorial of <c>n&#160;-&#160;1</c>&#8230;</p>
            <blockquote>
                <p>Since 1 is not zero, we take the second branch and calculate the
                    factorial of <c>n&#160;-&#160;1</c>&#8230;</p>
                <blockquote>
                    <p>Since 0 <em>is</em> zero, we take the first branch and return the
                        value 1 immediately without making any more recursive calls.</p>
                </blockquote>
                <p>The return value (1) gets multiplied by <c>n</c>, which is 1, and the
                    result is returned.</p>
            </blockquote>
            <p>The return value (1) gets multiplied by <c>n</c>, which is 2, and the
                result is returned.</p>
        </blockquote>
        <p>The return value (2) gets multiplied by <c>n</c>, which is 3, and the result,
            6, is returned to <c>main</c>, or whoever called factorial (3).</p>
        <p>Here is what the stack diagram looks like for this sequence of function
            calls:</p>
        <figure align="center" xml:id="img_5_10_stackdiagram"><image source="Chapter5/Images/5.10stackdiagram.png" width="50%" alt="image"/></figure>
        <p>The return values are shown being passed back up the stack.</p>
        <p>Notice that in the last instance of factorial, the local variables
            recurse and result do not exist because when n=0 the branch that creates
            them does not execute.</p>

    <exercise label="more_recursion_1">
        <statement>

        <p>Q-2: In the example above, how many times was the <c>factorial</c> function
            called?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>1</p>
                </statement>
                <feedback>
                    <p>As the programmer, we explicitly call this function one time... but remember, recursive functions call themselves!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>2</p>
                </statement>
                <feedback>
                    <p>Not quite! Maybe you were thinking of the two possible branches of the function call.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>3</p>
                </statement>
                <feedback>
                    <p>You're close! But what happens when n = 0?</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>4</p>
                </statement>
                <feedback>
                    <p>The function is called four times total.  Three of those times, the function recurses.  The last time, the function reaches its base case and returns 1.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

        <exercise label="more_recursion_2">
            <statement>
    <p>Q-3: <term>Complete the circular definition:</term> unreal - a word used to describe
something that is <var/>.</p></statement>

<setup>
    <var case="insensitive">
        <condition string="unreal"><feedback><p>Correct! Circular defintions are a great example of recursion.</p></feedback></condition>
        <condition string=".*"><feedback><p>Try again!</p></feedback></condition>
    </var></setup></exercise>

        <exercise label="more_recursion_3">
            <statement>
    <p>Q-4: The factorial of 12 is <var/>.</p></statement>
        <setup><var><condition number="479001600"><feedback><p>Correct!</p></feedback></condition>
        <condition string=".*"><feedback><p>Try plugging this into the active code!</p></feedback></condition>
        </var></setup></exercise>

    <exercise label="return_print_des_mc">
        <statement>

        <p>Q-5: What gets printed by the following code?</p>
        <pre>void print_descend(int a) {
    if (a == 0) {
        return;
    }
    cout&lt;&lt;a&lt;&lt;" ";
    a = a - 1;
    print_descend(a);
}

int main() {
    print_descend(5);
    return 0;
}</pre>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>"5 4 3 2 1 0"</p>
                </statement>
                <feedback>
                    <p>Consider what the base case is.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>"5 5 5 5 5"</p>
                </statement>
                <feedback>
                    <p>Does the value of <c>a</c> stay the same after every function call?</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>"5 4 3 2 1 0 -1 -2 -3 ...."</p>
                </statement>
                <feedback>
                    <p>Consider what the base case is.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>"5 4 3 2 1"</p>
                </statement>
                <feedback>
                    <p>Correct! we recursively print every value of <c>a</c> until we reach 0.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    </section>

