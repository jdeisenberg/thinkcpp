<section xml:id="chapter5_logical-operators">
        <title>Logical operators</title>
        
        
        <p>There are three <term>logical operators</term> in C++: AND, OR and NOT, which are
            denoted by the symbols <c>>&amp;&amp;</c>, <c>||</c> and <c>!</c>. The semantics (meaning) of these
            operators is similar to their meaning in English. For example,
            <c>x&#160;&gt;&#160;0&#160;&amp;&amp;&#160;x&#160;&lt;&#160;10</c> is true only if <c>x</c> is greater than zero AND less than 10.</p>
        <p><c>evenFlag&#160;||&#160;n%3&#160;==&#160;0</c> is true if <em>either</em> of the conditions is true,
            that is, if <c>evenFlag</c> is true OR the number is divisible by 3.</p>
        <p>Finally, the NOT operator has the effect of negating or inverting a bool
            expression, so <c>!evenFlag</c> is true if <c>evenFlag</c> is false; that is, if the
            number is odd.</p>
        <p>Logical operators often provide a way to simplify nested conditional
            statements.</p>

    <exercise label="logical_op_1">
        <statement>

        <p>Q-1: Multiple Response: How could you re-write the following code using a single conditional?</p>
        <pre>if (x &gt; 0) {
  if (x &lt; 10) {
    cout &lt;&lt; "x is a positive single digit" &lt;&lt; endl;
  }
}</pre>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>if (x &gt; 0 &amp;&amp; x &lt; 10) {...</p>
                </statement>
                <feedback>
                    <p>This is exactly what the nested conditionals are saying.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>if (x &gt; 0 || x &lt; 10) {...</p>
                </statement>
                <feedback>
                    <p>|| represents "or", but we need both sides of the conditional to be true.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>if (x &gt; 0 ! x &lt; 10) {...</p>
                </statement>
                <feedback>
                    <p>The ! operator cannot be used to compare two sides of a conditional.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>if (!(x &lt; 0) &amp;&amp; !(x &gt; 10)) {...</p>
                </statement>
                <feedback>
                    <p>If x = 0 or if x = 10, this expression will return true when it shouldn't.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>if (!(x &lt;= 0) &amp;&amp; !(x &gt;= 10)) {...</p>
                </statement>
                <feedback>
                    <p>If it IS NOT what we don't want, then it IS what we want!</p>
                </feedback>
            </choice>
</choices>

    </exercise>

<exercise label="logical_op_2">
    <statement><p>Match the conditional statement to the correct boolean and the meaning of the operator in use, given n = 7.</p></statement>
    <feedback><p>Try again!</p></feedback>
<matches><match order="1"><premise>(n * 2 &gt; 10 &amp;&amp; n &gt;= 7)</premise><response>true, "and"</response></match><match order="2"><premise>(n * 2 &gt; 10 &amp;&amp; n &lt; 7)</premise><response>false, "and"</response></match><match order="3"><premise>(n%2 == 1 || n == 8)</premise><response>true, "or"</response></match><match order="4"><premise>(n%2 == 0 || n == 8)</premise><response>false, "or"</response></match><match order="5"><premise>!(n == 7)</premise><response>false, "not"</response></match><match order="6"><premise>!(n &gt;= 10)</premise><response>true, "not"</response></match></matches></exercise>
        <exercise label="logical_op_3">
            <statement>
                <p>Q-3: Add a single logical operator to make the expression check if x is greater than or equal to 50</p>
                <p><var/><c>( x &lt; 50 )</c></p>
            </statement>
            <setup>
                <var>
                    <condition string="!"><feedback><p>If the expression checks for the opposite of what you want then just <c>!</c> the result</p></feedback></condition>
                    <condition string="^\s*.*\s*$"><feedback><p>Hint: we want the <em>opposite</em> of the given condition.</p></feedback></condition>
                </var>
            </setup>
        </exercise>
</section>

