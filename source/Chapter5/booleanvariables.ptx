<section xml:id="chapter5_boolean-variables">
        <title>Boolean Variables</title>
        
        
        <p>As usual, for every type of value, there is a corresponding type of
            variable. In C++ the boolean type is called <term>bool</term>. Boolean variables
            work just like the other types:</p>
        <pre>bool validAge;
validAge = true;
bool passedTest = false;</pre>
        <p>The first line is a simple variable declaration; the second line is an
            assignment, and the third line is a combination of a declaration and as
            assignment, called an initialization.</p>
        <p>As I mentioned, the result of a comparison operator is a boolean, so you
            can store it in a bool variable</p>
        <pre>bool evenFlag = (n % 2 == 0);     // true if n is even
bool plusFlag = (x &gt; 0);    // true if x is positive</pre>
        <p>and then use it as part of a conditional statement later</p>
        <pre>if (evenFlag) {
  cout &lt;&lt; "n was even when I checked it";
}</pre>
        
        
        <p>A variable used in this way is called a <term>flag</term>, since it flags the
            presence or absence of some condition.</p>

<exercise label="bool_var_1">
    <statement><p>Match the conditional statement to the correct boolean, given x = 2.</p></statement>
    <feedback><p>Try again!</p></feedback>
<matches><match order="1"><premise>x * 2 &gt; 4</premise><response>false</response></match><match order="2"><premise>x &gt;= 2</premise><response>true</response></match></matches></exercise>
<exercise label="bool_var_2">
    <statement><p>Match the statement to the word that describes it best.</p></statement>
    <feedback><p>Try again!</p></feedback>
<matches><match order="1"><premise>bool fred;</premise><response>variable declaration</response></match><match order="2"><premise>fred = true;</premise><response>assignment</response></match><match order="3"><premise>bool testResult = false;</premise><response>initialization</response></match></matches></exercise>
    <exercise label="bool_var_3">
        <statement>

        <p>Q-3: What will print?</p>
        <pre>int n = 16;
int x = 4;

bool evenFlag = (n % 2 == 0);
bool plusFlag = (x &gt; 0);

if (evenFlag) {
  cout &lt;&lt; "n was even when I checked it ";
}

if (plusFlag) {
  cout &lt;&lt; "x was positive when I checked it";
}</pre>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>n was even when I checked it x was positive when I checked it</p>
                </statement>
                <feedback>
                    <p>Great!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>x was positive when I checked it n was even when I checked it</p>
                </statement>
                <feedback>
                    <p>Make sure you follow the correct order of execution.  Also, a space is not automatically added.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>x was positive when I checked it</p>
                </statement>
                <feedback>
                    <p>Take another look at the result from the modulus operator.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>n was even when I checked itx was positive when I checked it</p>
                </statement>
                <feedback>
                    <p>Both flags are made, But A space is after it.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>x was positive when I checked itn was even when I checked it</p>
                </statement>
                <feedback>
                    <p>Make sure you follow the correct order of execution.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="bool_var_4">
        <statement>

        <p>Q-4: What will print?</p>
        <pre>bool lowBattery=true;
bool powerOutage=true;

if (lowBattery) {

  if (powerOutage) {
      powerOutage = !powerOutage;
  }
  else {
      lowBattery=false;
  }

  if (!powerOutage) {

    if (lowBattery) {
        cout&lt;&lt;"Charging your phone"&lt;&lt;endl;
    }
    else {
        cout&lt;&lt;"Battery is charged"&lt;&lt;endl;
    }

  }
  else {
    cout&lt;&lt;"There is no power"&lt;&lt;endl&gt;&gt;;
  }
}</pre>
</statement>
<choices><choice><statement id="bool_var_4_opt_a">        <p>nothing will print</p>
</statement><feedback id="bool_var_4_opt_a">
        <p>The value of <c>lowBattery</c> is <c>true</c> so we enter the first <c>if</c> block.</p>
</feedback></choice><choice correct="yes"><statement id="bool_var_4_opt_b">        <p>&#8220;Charging your phone&#8221;</p>
</statement><feedback id="bool_var_4_opt_b">
        <p>correct! <c>lowBattery</c> stays <c>true</c> and we set <c>powerOutage</c> to <c>false</c>.</p>
</feedback></choice><choice><statement id="bool_var_4_opt_c">        <p>&#8220;Battery is charged&#8221;</p>
</statement><feedback id="bool_var_4_opt_c">
        <p><c>lowBattery</c> is <c>true</c> so we don&#8217;t reach this <c>else</c>.</p>
</feedback></choice><choice><statement id="bool_var_4_opt_d">        <p>&#8220;There is no power&#8221;</p>
</statement><feedback id="bool_var_4_opt_d">
        <p>We change the value of <c>powerOutage</c> to <c>false</c> before hand.</p>
</feedback></choice></choices>
    </exercise>
    </section>

