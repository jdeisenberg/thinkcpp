<section xml:id="chapter5_composition">
        <title>Composition</title>
        <p>As you should expect by now, once you define a new function, you can use
            it as part of an expression, and you can build new functions using
            existing functions. For example, what if someone gave you two points,
            the center of the circle and a point on the perimeter, and asked for the
            area of the circle?</p>
        <p>Let&#8217;s say the center point is stored in the variables <c>xc</c> and <c>yc</c>, and the
            perimeter point is in <c>xp</c> and <c>yp</c>. The first step is to find the radius of
            the circle, which is the distance between the two points. Fortunately,
            we have a function, <c>distance</c>, that does that.</p>
        <pre>double radius = distance (xc, yc, xp, yp);</pre>
        <p>The second step is to find the area of a circle with that radius, and
            return it.</p>
        <pre>double result = area (radius);
return result;</pre>
        <p>Wrapping that all up in a function, we get:</p>
        <pre>double fred (double xc, double yc, double xp, double yp) {
  double radius = distance (xc, yc, xp, yp);
  double result = area (radius);
  return result;
}</pre>
        <p>The name of this function is <c>fred</c>, which may seem odd. I will explain
            why in the next section.</p>
        <p>The temporary variables radius and area are useful for development and
            debugging, but once the program is working we can make it more concise
            by composing the function calls:</p>
        <pre>double fred (double xc, double yc, double xp, double yp) {
  return area (distance (xc, yc, xp, yp));
}</pre>

<exercise label="fun_comp_AC_1">
    <statement>
        <p>This program shows you how the distance and area functions are
            composed in the fred function to calculate the area of a circle
            if we only know the coordinates of the center, and one other point
            of the circle.</p>

    </statement>
    <program xml:id="fun_comp_AC_1_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;cmath&gt;
using namespace std;

double distance (double x1, double y1, double x2, double y2) {
    double dx = x2 - x1;
    double dy = y2 - y1;
    double dsquared = dx * dx + dy * dy;
    double result = sqrt (dsquared);
    return result;
}

double area (double radius) {
    double area = 3.14 * (radius * radius);
    return area;
}

double fred (double xc, double yc, double xp, double yp) {
    return area (distance (xc, yc, xp, yp));
}

int main () {
    double circle_area = fred (1.0, 2.0, 4.0, 6.0);
    cout &lt;&lt; circle_area &lt;&lt; endl;
    return 0;
}
        </input>
<tests>


</tests>

    </program>
</exercise>

    <exercise label="fun_comp_1">
        <statement>

        <p>Q-2: What is the composition of the function <c>fred</c> ?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>the types and quantities of variables that make up the function</p>
                </statement>
                <feedback>
                    <p>This would tell us what variables the function is composed of, but this is not what function composition means.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>the process of combining one or more functions into more complicated ones</p>
                </statement>
                <feedback>
                    <p>This is what we did inside of the fred function.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>the process of creating a function using incremental development</p>
                </statement>
                <feedback>
                    <p>Incremental development is useful in function composition, but does not define it.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>all of the above</p>
                </statement>
                <feedback>
                    <p>There is only one correct answer here!</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="fun_comp_2">
        <statement>

        <p>Q-3: It turns out you already have a function called <c>printHelloName</c>
            so you must rename this one.  Which of the following could be the
            new name for your function?</p>
        <pre>void printHelloName (string name) {
  cout &lt;&lt; "Hello " &lt;&lt; name &lt;&lt; "!" &lt;&lt;  endl;
}</pre>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>print_hello_name</p>
                </statement>
                <feedback>
                    <p>This function name isn't much of a change from our original, and would be a good choice, but what about the other options?</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>fluffy_cat</p>
                </statement>
                <feedback>
                    <p>Although unconventional, there is nothing wrong about this name, but what about eat_pizza?</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>eat_pizza</p>
                </statement>
                <feedback>
                    <p>Although unconventional, there is nothing wrong about this name, but what about fluffy_cat?</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>all of the above</p>
                </statement>
                <feedback>
                    <p>All of these function names are technically legal, but in general, it's good practice to name your functions something that describes what they do.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>none of the above</p>
                </statement>
                <feedback>
                    <p>There's nothing wrong with any of these function names, although some of them are weird.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
        <p>Function composition is not limited to a fixed number of calls.
            Multiple calls can be made to the same function as well as to a number of
            different functions.</p>

<exercise label="multi_comp_1">
    <statement>
        <p>This program shows how mutliple calls are made to one function and it
            also shows that calling two or more different functions is valid.</p>

    </statement>
    <program xml:id="multi_comp_1_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int increase_population (int population) {
    return population*2;
}

void print_population (int population) {
    cout&lt;&lt;"The current population is "&lt;&lt;population&lt;&lt;endl;
}

void grow_4(int start_size){
    int new_size = increase_population(start_size);
    //we will increase population again by doubling new_size
    new_size = increase_population(new_size);
    print_population(new_size);
}

int main () {
    int begin_population=3;
    grow_4(begin_population);
}
        </input>
<tests>


</tests>

    </program>
</exercise>
    </section>

