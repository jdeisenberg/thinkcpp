<section xml:id="chapter6_encapsulation-and-generalization">
        <title>Encapsulation and generalization</title>
        <p>Encapsulation usually means taking a piece of code and wrapping it up in
            a function, allowing you to take advantage of all the things functions
            are good for. We have seen two examples of encapsulation, when we wrote
            <c>printParity</c> in <number_reference internal="True" refuri="../Chapter4/AlternativeExecution#alternative" title="Section %s"><inline classes="std std-numref">Section 4.3</inline></number_reference> and
            <c>isSingleDigit</c> in <number_reference internal="True" refuri="../Chapter5/boolfunctions#bool" title="Section %s"><inline classes="std std-numref">Section 5.8</inline></number_reference>.</p>
        <p>Generalization means taking something specific, like printing multiples
            of 2, and making it more general, like printing the multiples of any
            integer.</p>
        <p>Here&#8217;s a function that encapsulates the loop from the previous section
            and generalizes it to print multiples of <c>n</c>.</p>
        <pre>void printMultiples (int n) {
  int i = 1;
  while (i &lt;= 6) {
    cout &lt;&lt; n * i &lt;&lt; "   ";
    i = i + 1;
  }
  cout &lt;&lt; endl;
}</pre>
        <p>To encapsulate, all I had to do was add the first line, which declares
            the name, parameter, and return type. To generalize, all I had to do was
            replace the value 2 with the parameter <c>n</c>.</p>
        <p>If we call this function with the argument 2, we get the same output as
            before. With argument 3, the output is:</p>
        <pre>3   6   9   12   15   18</pre>
        <p>and with argument 4, the output is</p>
        <pre>4   8   12   16   20   24</pre>
        <p>By now you can probably guess how we are going to print a multiplication
            table: we&#8217;ll call <c>printMultiples</c> repeatedly with different
            arguments. In fact, we are going to use another loop to iterate through
            the rows.</p>
        <pre>int i = 1;
while (i &lt;= 6) {
  printMultiples (i);
  i = i + 1;
}</pre>
        <p>First of all, notice how similar this loop is to the one inside
            <c>printMultiples</c>. All I did was replace the print statement with a
            function call.</p>

<exercise label="encapsulation_generalization_AC_1">
    <statement>
        <p>Try running the active code below, which uses <c>printMultiples</c>.</p>

    </statement>
    <program xml:id="encapsulation_generalization_AC_1_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void printMultiples (int n) {
    int i = 1;
    while (i &lt;= 6) {
        cout &lt;&lt; n * i &lt;&lt; "   ";
        i = i + 1;
    }
    cout &lt;&lt; endl;
}

int main() {
    int i = 1;
    while (i &lt;= 6) {
        printMultiples (i);
        i = i + 1;
    }
}
        </input>
<tests>


</tests>

    </program>
</exercise>
        <p>The output of this program is</p>
        <pre>1   2   3   4   5   6
2   4   6   8   10   12
3   6   9   12   15   18
4   8   12   16   20   24
5   10   15   20   25   30
6   12   18   24   30   36</pre>
        <p>which is a (slightly sloppy) multiplication table. If the sloppiness
            bothers you, you can also use tab characters, like below.</p>

<exercise label="encapsulation_generalization_AC_2">
    <statement>
        <p>The active code below uses tab characters to make the table neater.</p>

    </statement>
    <program xml:id="encapsulation_generalization_AC_2_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void printMultiples (int n) {
    int i = 1;
    while (i &lt;= 6) {
        cout &lt;&lt; n * i &lt;&lt; '\t';
        i = i + 1;
    }
    cout &lt;&lt; endl;
}

int main() {
    int i = 1;
    while (i &lt;= 6) {
        printMultiples (i);
        i = i + 1;
    }
}
        </input>
<tests>


</tests>

    </program>
</exercise>

    <exercise label="encapsulation_generalization_1">
        <statement>

        <p>Q-3: What is the purpose of generalization?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Replacing integers with parameters.</p>
                </statement>
                <feedback>
                    <p>This may be a possible way to generalize, but not the purpose.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Using a parameter that exists in several different functions.</p>
                </statement>
                <feedback>
                    <p>This is not the purpose of generalization.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Taking a very specific task and making it more applicable to other situations.</p>
                </statement>
                <feedback>
                    <p>This makes your code more versatile.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Creating two functions with the same purpose but different names.</p>
                </statement>
                <feedback>
                    <p>This is not the purpose of generalization.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
<exercise label="encapsulation_generalization_2" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>Create a function called <c>powersOfTwo</c> which prints out a table with the powers of two up to <m>2^{5}</m>.</p>
</statement>
<blocks><block order="1">
<cline>void powersOfTwo () {</cline>
</block><block order="4">
<cline>  int x = 1;</cline>
</block><block order="6">
<cline>  while (x &lt;= 5) {</cline>
</block><block order="2">
<choice correct="yes"><cline>    cout &lt;&lt; x &lt;&lt; "\t" &lt;&lt; pow(2, x) &lt;&lt; endl;</cline>
</choice><choice><cline>    cout &lt;&lt; x &lt;&lt; "\t" &lt;&lt; pow(x, 2) &lt;&lt; endl;  </cline>
</choice></block><block order="3">
<cline>    x++;</cline>
<cline>  }</cline>
<cline>}</cline>
</block></blocks></exercise><exercise label="encapsulation_generalization_3" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>Now let&#8217;s generalize the function to print out the powers of a parameter n up to <m>n^{5}</m>. Create a
            function called <c>powersOfn</c> which takes an int n as a parameter.</p>
</statement>
<blocks><block order="5">
<choice correct="yes"><cline>void powersOfn (int n) {</cline>
</choice><choice><cline>void powersOfn (string n) {  </cline>
</choice></block><block order="6">
<cline>  int x = 1;</cline>
</block><block order="4">
<cline>  while (x &lt;= 5) {</cline>
</block><block order="7">
<choice correct="yes"><cline>    cout &lt;&lt; x &lt;&lt; "\t" &lt;&lt; pow(n, x) &lt;&lt; endl;</cline>
</choice><choice><cline>    cout &lt;&lt; x &lt;&lt; "\t" &lt;&lt; pow(5, x) &lt;&lt; endl;  </cline>
</choice></block><block order="2">
<cline>    x++;</cline>
<cline>  }</cline>
<cline>}</cline>
</block></blocks></exercise>    </section>

