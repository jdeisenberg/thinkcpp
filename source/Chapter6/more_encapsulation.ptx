<section xml:id="chapter6_more-encapsulation">
        <title>More encapsulation</title>
        <p>To demonstrate encapsulation again, I&#8217;ll take the code from the previous
            section and wrap it up in a function:</p>
        <pre>void printMultTable () {
  int i = 1;
  while (i &lt;= 6) {
    printMultiples (i);
    i = i + 1;
  }
}</pre>
        <p>The process I am demonstrating is a common development plan. You develop
            code gradually by adding lines to <c>main</c> or someplace else, and then
            when you get it working, you extract it and wrap it up in a function.</p>
        <p>The reason this is useful is that you sometimes don&#8217;t know when you
            start writing exactly how to divide the program into functions. This
            approach lets you design as you go along.</p>

<exercise label="more_encapsulation_AC_1">
    <statement>
        <p>The active code below uses the <c>printMultTable</c> function.
            Run the active code to see what happens!</p>

    </statement>
    <program xml:id="more_encapsulation_AC_1_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void printMultiples (int n) {
    int i = 1;
    while (i &lt;= 6) {
        cout &lt;&lt; n * i &lt;&lt; '\t';
        i = i + 1;
    }
    cout &lt;&lt; endl;
}

void printMultTable() {
    int i = 1;
    while (i &lt;= 6) {
        printMultiples (i);
        i = i + 1;
    }
}

int main() {
    printMultTable();
}
        </input>
<tests>


</tests>

    </program>
</exercise>
    </section>

