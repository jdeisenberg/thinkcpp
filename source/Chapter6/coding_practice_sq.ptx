<section xml:id="chapter6_coding-practice">
        <title>Coding Practice</title>
        <exercise xml:id=""><TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter6', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">

<exercise label="cp_6_AC_2q">
    <statement>
                <p>Encapsulate the triangle printing program into a function called
                    <c>printTriangle</c>. Generalize it so that it takes a parameter
                    <c>int n</c> to generate a nxn triangle. Select the Parsonsprob tab
                    for hints for the construction of the code. Call your function in main
                    with an input of 4, which should result in the following output:</p>
                <pre>*
**
***
****</pre>

    </statement>
    <program xml:id="cp_6_AC_2q_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void printTriangle (int n) {
    // Write your implementation here.
}

int main() {
    // Write your implementation here.
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </TabNode><TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter6', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
<exercise label="cp_6_AC_2q_pp" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
                <p>Encapsulate the triangle printing program into a function called
                    <c>printTriangle</c>. Generalize it so that it takes a parameter
                    <c>int n</c> to generate a nxn triangle. Use the lines to construct the
                    code, then go back to complete the Activecode tab. Call your function in main
                    with an input of 4, which should result in the following output:</p>
                <pre>*
**
***
****</pre>
</statement>
<blocks><block order="7">
<cline>// Create function</cline>
<cline>void printTriangle (int n) {</cline>
</block><block order="17">
<cline>    int row = 0;</cline>
</block><block order="4" correct="no">
<cline>    int row = 4; </cline>
</block><block order="9">
<cline>    while (row &lt; n) {</cline>
</block><block order="12">
<choice correct="yes"><cline>        int col = 0;</cline>
</choice><choice><cline>        int col = 4; </cline>
</choice></block><block order="15">
<cline>        while (col &lt;= row) {</cline>
</block><block order="10">
<cline>        while (col &lt;= n) {</cline>
</block><block order="3">
<cline>            cout &lt;&lt; "*";</cline>
</block><block order="19">
<cline>            col++;</cline>
</block><block order="2">
<cline>        }</cline>
</block><block order="1">
<cline>        cout &lt;&lt; endl;</cline>
</block><block order="16">
<cline>        row++;</cline>
</block><block order="8">
<cline>        }</cline>
</block><block order="14">
<cline>    }</cline>
</block><block order="18">
<cline>}</cline>
</block><block order="6">
<cline>// Write main implementation</cline>
<cline>int main() {</cline>
</block><block order="11">
<cline>    printTriangle(4);</cline>
</block><block order="13">
<cline>}</cline>
</block></blocks></exercise>            </TabNode></exercise>
        <exercise xml:id=""><TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter6', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">

<exercise label="cp_6_AC_4q">
    <statement>
                <p>Write a function called <c>printNumPyramid</c> that prints out an <c>n</c> x <c>n</c> number pyramid.
                    An example is shown below with <c>n</c> equal to 5. Your code should use while loops. Select the
                    Parsonsprob tab for hints for the construction of the code. (Hint: similar to the previous
                    question, if you want the output to look nice, using conditionals that print different amounts of spaces.)</p>
                <pre>    1
   222
  33333
 4444444
555555555</pre>

    </statement>
    <program xml:id="cp_6_AC_4q_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void printNumPyramid (int n) {
    // Write your implementation here.
}

int main() {
    printNumPyramid (5);
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </TabNode><TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter6', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
<exercise label="cp_6_AC_4q_pp" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
                <p>Write a function called <c>printNumPyramid</c> that prints out an <c>n</c> x <c>n</c> number pyramid.
                    An example is shown below with <c>n</c> equal to 5. Your code should use while loops. Use the lines to
                    construct the code, then go back to complete the Activecode tab. (Hint: similar to the previous
                    question, if you want the output to look nice, using conditionals that print different amounts of spaces.)</p>
                <pre>    1
   222
  33333
 4444444
555555555</pre>
</statement>
<blocks><block order="6">
<cline>void printNumPyramid (int n) {</cline>
</block><block order="5">
<choice correct="yes"><cline>    int space;</cline>
<cline>    int numPrinted;</cline>
<cline>    int count = 1;</cline>
<cline>    int sub = 4;</cline>
</choice><choice><cline>    int space; </cline>
<cline>    int numPrinted = 5;</cline>
<cline>    int count = 1;</cline>
<cline>    int sub = 1;</cline>
</choice></block><block order="8">
<cline>    while (count &lt;= n) {</cline>
<cline>        space = n - count;</cline>
</block><block order="7">
<cline>        while (space &gt; 0) {</cline>
<cline>            cout &lt;&lt; " ";</cline>
<cline>            space --</cline>
<cline>        }</cline>
</block><block order="2">
<cline>        numprinted = 2 * count - 1;</cline>
</block><block order="10">
<cline>        while (numPrinted &gt; 0) {</cline>
<cline>            cout &lt;&lt; n - sub;</cline>
<cline>            numPrinted--;</cline>
<cline>        }</cline>
</block><block order="1">
<choice correct="yes"><cline>        cout &lt;&lt; endl;</cline>
<cline>        count ++;</cline>
<cline>        sub--;</cline>
</choice><choice><cline>        cout &lt;&lt; endl; ;</cline>
<cline>        count++;</cline>
<cline>        sub++;</cline>
</choice></block><block order="3">
<cline>    }</cline>
<cline>}</cline>
</block></blocks></exercise>            </TabNode></exercise>
        <exercise xml:id=""><TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter6', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">

<exercise label="cp_6_AC_6q">
    <statement>
                <p>Write the function <c>printAddTable</c> which takes an <c>int n</c> as a parameter
                    and prints out a nxn addition table. Call your function in <c>main</c> with
                    &#8220;10&#8221; as the argument. Select the Parsonsprob tab for hints for the construction of the code.
                    Your output should look like this:</p>
                <pre>0       1       2       3       4       5       6       7       8       9       10
1       2       3       4       5       6       7       8       9       10      11
2       3       4       5       6       7       8       9       10      11      12
3       4       5       6       7       8       9       10      11      12      13
4       5       6       7       8       9       10      11      12      13      14
5       6       7       8       9       10      11      12      13      14      15
6       7       8       9       10      11      12      13      14      15      16
7       8       9       10      11      12      13      14      15      16      17
8       9       10      11      12      13      14      15      16      17      18
9       10      11      12      13      14      15      16      17      18      19
10      11      12      13      14      15      16      17      18      19      20</pre>

    </statement>
    <program xml:id="cp_6_AC_6q_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void printAddTable (int n) {
    // Write your implementation here.
}

int main() {
    // Call your function here.
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </TabNode><TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter6', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
<exercise label="cp_6_AC_6q_pp" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
                <p>Write the function <c>printAddTable</c> which takes an <c>int n</c> as a parameter
                    and prints out a nxn addition table. Call your function in <c>main</c> with
                    &#8220;10&#8221; as the argument. Use the lines to construct the code, then go back to complete
                    the Activecode tab. Your output should look like this:</p>
                <pre>0       1       2       3       4       5       6       7       8       9       10
1       2       3       4       5       6       7       8       9       10      11
2       3       4       5       6       7       8       9       10      11      12
3       4       5       6       7       8       9       10      11      12      13
4       5       6       7       8       9       10      11      12      13      14
5       6       7       8       9       10      11      12      13      14      15
6       7       8       9       10      11      12      13      14      15      16
7       8       9       10      11      12      13      14      15      16      17
8       9       10      11      12      13      14      15      16      17      18
9       10      11      12      13      14      15      16      17      18      19
10      11      12      13      14      15      16      17      18      19      20</pre>
</statement>
<blocks><block order="1">
<cline>void printAddTable (int n) {</cline>
</block><block order="3">
<choice correct="yes"><cline>    for (int i = 0; i &lt;= n; i++) {</cline>
</choice><choice><cline>    for (int i = 0; i &lt; n; i++) { </cline>
</choice></block><block order="7">
<cline>        for (int j = 0; j &lt;= n; j++) {</cline>
</block><block order="5" correct="no">
<cline>        for (int j = 0; j &lt; n; j++) { </cline>
</block><block order="6">
<cline>            cout &lt;&lt; i + j &lt;&lt; '\t';</cline>
</block><block order="2">
<cline>        }</cline>
</block><block order="4">
<cline>        cout &lt;&lt; '\n';</cline>
</block><block order="9">
<cline>    }</cline>
</block><block order="8">
<cline>}</cline>
</block></blocks></exercise>            </TabNode></exercise>
        <exercise xml:id=""><TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter6', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">

<exercise label="cp_6_AC_8q">
    <statement>
                <p>Write a program that uses a <c>while</c> loop to print out the alphabet from &#8216;a&#8217; to &#8216;z&#8217;.
                    Select the Parsonsprob tab for hints for the construction of the code.</p>

    </statement>
    <program xml:id="cp_6_AC_8q_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
    // Write your implementation here.
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </TabNode><TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter6', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
<exercise label="cp_6_AC_8q_pp" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
                <p>Write a program that uses a <c>while</c> loop to print out the alphabet from &#8216;a&#8217; to &#8216;z&#8217;.
                    Use the lines to construct the code, then go back to complete the Activecode tab.</p>
</statement>
<blocks><block order="5">
<cline>int main() {</cline>
</block><block order="1">
<cline>    char letter = 'a';</cline>
</block><block order="8">
<choice correct="yes"><cline>    while (letter &lt;= 'z') {</cline>
</choice><choice><cline>    while (letter != 'z') { </cline>
</choice></block><block order="2">
<cline>        cout &lt;&lt; letter &lt;&lt; endl;</cline>
</block><block order="4">
<cline>        letter++;</cline>
</block><block order="7">
<cline>    }</cline>
</block><block order="6">
<cline>}</cline>
</block></blocks></exercise>            </TabNode></exercise>
        <exercise xml:id=""><TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter6', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">

<exercise label="cp_6_AC_10q">
    <statement>
                <p>Write a function called <c>factorial</c> which takes an <c>int n</c> as a parameter
                    and returns <c>n</c> factorial. Remembers that a factorial (denoted by !) is the product of all
                    positive integers less than or equal to <c>n</c>, so 4! is 24. Use a <c>while</c> loop.
                    Run and test your code! Select the Parsonsprob tab for hints for the construction of the code.</p>

    </statement>
    <program xml:id="cp_6_AC_10q_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int factorial (int n) {
    // Write your implementation here.
}
        </input>
<tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("factorial function") {
    REQUIRE(factorial (4) == 24);
    REQUIRE(factorial (6) == 720);
    REQUIRE(factorial (9) == 362880);
}
</tests>

    </program>
</exercise>
            </TabNode><TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter6', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
<exercise label="cp_6_AC_10q_pp" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
                <p>Write a function called <c>factorial</c> which takes an <c>int n</c> as a parameter
                    and returns <c>n</c> factorial. Remembers that a factorial (denoted by !) is the product of all
                    positive integers less than or equal to <c>n</c>, so 4! is 24. Use a <c>while</c> loop.
                    Run and test your code! Use the lines to construct the code, then go back to complete the Activecode tab.</p>
</statement>
<blocks><block order="10">
<cline>int factorial (int n) {</cline>
</block><block order="1">
<cline>    int i = n;</cline>
</block><block order="7">
<cline>    int fact = 1;</cline>
</block><block order="2" correct="no">
<cline>    int fact = 0; ;</cline>
</block><block order="6">
<cline>    while (n / i != n) {</cline>
</block><block order="5">
<choice correct="yes"><cline>        fact *= i;</cline>
</choice><choice><cline>        fact = n * (n - 1); </cline>
</choice></block><block order="4">
<cline>        i--;</cline>
</block><block order="3">
<cline>    }</cline>
</block><block order="11">
<cline>    return fact;</cline>
</block><block order="8">
<cline>}</cline>
</block></blocks></exercise>            </TabNode></exercise>
    </section>

