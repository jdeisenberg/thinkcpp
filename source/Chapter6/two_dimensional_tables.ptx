<section xml:id="chapter6_two-dimensional-tables">
        <title>Two-dimensional tables</title>
        <p>A two-dimensional table is a table where you choose a row and a column
            and read the value at the intersection. A multiplication table is a good
            example. Let&#8217;s say you wanted to print a multiplication table for the
            values from 1 to 6.</p>
        <p>A good way to start is to write a simple loop that prints the multiples
            of 2, all on one line.</p>

<exercise label="2D_tables_AC_1">
    <statement>
        <p>Run the active code below, which uses a simple loop that prints the multiples
            of 2, all on one line.</p>

    </statement>
    <program xml:id="prog_2D_tables_AC_1_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
    int i = 1;
    while (i &lt;= 6) {
        cout &lt;&lt; 2 * i &lt;&lt; "   ";
        i = i + 1;
    }
    cout &lt;&lt; endl;
    return 0;
}
        </input>
<tests>


</tests>

    </program>
</exercise>
        
        
        <p>The first line initializes a variable named <c>i</c>, which is going to act
            as a counter, or <term>loop variable</term>. As the loop executes, the value of
            <c>i</c> increases from 1 to 6, and then when <c>i</c> is 7, the loop
            terminates. Each time through the loop, we print the value <c>2*i</c>
            followed by three spaces. By omitting the <c>endl</c> from the first output
            statement, we get all the output on a single line.</p>
        <p>The output of this program is:</p>
        <pre>2   4   6   8   10   12</pre>
        
        
        <p>So far, so good. The next step is to <term>encapsulate</term> and <term>generalize</term>.</p>

    <exercise label="2D_tables_1">
        <statement>

        <p>Q-2: What is a good name for the variable x, found in the code block below?</p>
        <program language="cpp"><input>
#include &lt;iostream&gt;
using namespace std;

int main() {
  int x = 1;
  while (x &lt;= 6) {
    cout &lt;&lt; 3 * x &lt;&lt; "   ";
    x = x + 1;
  }
  cout &lt;&lt; endl;
  return 0;
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>counter</p>
                </statement>
                <feedback>
                    <p>Try again!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>loop variable</p>
                </statement>
                <feedback>
                    <p>Try again!</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Both a and b</p>
                </statement>
                <feedback>
                    <p>Correct!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>None of the above</p>
                </statement>
                <feedback>
                    <p>Try again!</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="2D_tables_2">
        <statement>

        <p>Q-3: Currently, the code below prints all of the multiples of three on one line. How can you change the output so that each multiple prints on its own line?</p>
        <program language="cpp"><input>
#include &lt;iostream&gt;
using namespace std;

int main() {
  int x = 1;
  while (x &lt;= 6) {
    cout &lt;&lt; 3 * x &lt;&lt; "  ";
    x = x + 1;
  }
  cout &lt;&lt; endl;
  return 0;
}
</input></program>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>Change the first output statement to say cout &lt;&lt; 3 * x &lt;&lt; endl;</p>
                </statement>
                <feedback>
                    <p>The addition of the endl will print the multiples of three on separate lines.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Change the first output statement to say cout &lt;&lt; 3 * x &lt;&lt; \n;</p>
                </statement>
                <feedback>
                    <p>A newline character must be used in conjunction with a string. In this case, we are outputting an integer. To use a newline character in this scenario you must use quotes around it. (ex. "\n")</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Change the second output statement to say cout &lt;&lt; endl &lt;&lt; endl;</p>
                </statement>
                <feedback>
                    <p>This would simply print out two new lines after all of the multiples have already printed on one line.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>This code already prints each multiple on its own line.</p>
                </statement>
                <feedback>
                    <p>This code prints all multiples out on one line.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    </section>

