<section xml:id="chapter6_coding-practice">
        <title>Coding Practice</title>
        <exercise xml:id=""><statement/><program interactive="" language="" xml:id=""/><solution>
                Below is one way to implement the program. We use nested loops
                    similar to the last version of the printMultTable function
                    to print out the triangular shape.

    <program xml:id="cp_6_AC_1a" language="cpp">
    
        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
    int row = 0;
    while (row &lt; 5) {
        int col = 0;
        while (col &lt;= row) {
            cout &lt;&lt; "*";
            col++;
        }
        cout &lt;&lt; endl;
        row++;
    }
}
        </input>
<tests>


</tests>

    </program>
            
                <p>Below is one way to implement the program. We use nested loops
                    similar to the last version of the <c>printMultTable</c> function
                    to print out the triangular shape.</p>

    
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=cp_6_AC_2q_sq data-questionlist='cp_6_AC_2q, cp_6_AC_2q_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: cp_6_AC_2q, cp_6_AC_2q_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
        <exercise xml:id=""><statement/><program interactive="" language="" xml:id=""/><solution>
                Below is one way to implement the program. We use multiple while
                    loops to print out spaces and asterisks. The outer loop creates the
                    number of rows, and within the outer loop, the two inner loops
                    print out the correct number of spaces and asterisks.

    <program xml:id="cp_6_AC_3a" language="cpp">
    
        <input>
#include &lt;iostream&gt;
using namespace std;

void printPyramid(int n) {
    int space, numAsterisks;
    int count = 1;
    while (count &lt;= n) {
        space = n - count;
        while (space &gt; 0) {
            cout &lt;&lt; " ";
            space--;
        }
        numAsterisks = 2 * count - 1;
        while (numAsterisks &gt; 0) {
            cout &lt;&lt; "*";
            numAsterisks--;
        }
        cout &lt;&lt; endl;
        count++;
    }
}

int main() {
    printPyramid (5);
}
        </input>
<tests>


</tests>

    </program>
            
                <p>Below is one way to implement the program. We use multiple <c>while</c>
                    loops to print out spaces and asterisks. The outer loop creates the
                    number of rows, and within the outer loop, the two inner loops
                    print out the correct number of spaces and asterisks.</p>

    
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=cp_6_AC_4q_sq data-questionlist='cp_6_AC_4q, cp_6_AC_4q_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: cp_6_AC_4q, cp_6_AC_4q_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
        <exercise xml:id=""><statement/><program interactive="" language="" xml:id=""/><solution>
                Below is one way to implement the &#8220;FizzBuzz&#8221; program. We use conditionals
                    with modulus operators in a while loop to categorize every number and print
                    the correct output. Feel free to search up on the FizzBuzz coding interview
                    problem if you are interested in other ways to code this program!

    <program xml:id="cp_6_AC_5a" language="cpp">
    
        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
    int n = 1;
    while (n &lt;= 100) {
        if (n % 3 == 0 &amp;&amp; n % 5 == 0) {
            cout &lt;&lt; "FizzBuzz" &lt;&lt; endl;
        }
        else if (n % 3 == 0) {
            cout &lt;&lt; "Fizz" &lt;&lt; endl;
        }
        else if (n % 5 == 0) {
            cout &lt;&lt; "Buzz" &lt;&lt; endl;
        }
        else {
            cout &lt;&lt; n &lt;&lt; endl;
        }
        n++;
    }
}
        </input>
<tests>


</tests>

    </program>
            
                <p>Below is one way to implement the &#8220;FizzBuzz&#8221; program. We use conditionals
                    with modulus operators in a while loop to categorize every number and print
                    the correct output. Feel free to search up on the FizzBuzz coding interview
                    problem if you are interested in other ways to code this program!</p>

    
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=cp_6_AC_6q_sq data-questionlist='cp_6_AC_6q, cp_6_AC_6q_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: cp_6_AC_6q, cp_6_AC_6q_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
        <exercise xml:id=""><statement/><program interactive="" language="" xml:id=""/><solution>
                Below is one way to implement the isPrime function. First,
                    we check to see if num is less than or equal to 1, and return
                    false if that is the case. Next, we use a while loop
                    to continuously check if a factor n divides num evenly.
                    If it does, we return false. If no value of n divides num
                    evenly, then we return true. Notice the while loop only goes up to
                    num / 2 because if 2 doesn&#8217;t divide evenly, then there isn&#8217;t a smaller factor.

    <program xml:id="cp_6_AC_7a" language="cpp">
    
        <input>
#include &lt;iostream&gt;
using namespace std;

bool isPrime (int num) {
    if (num &lt;= 1) {
        return false;
    }
    int n = 2;
    while (n &lt; num / 2) {
        if (num % n == 0) {
            return false;
        }
        n++;
    }
    return true;
}
        </input>
<tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("isPrime function") {
    REQUIRE(isPrime (1) == 0);
    REQUIRE(isPrime (13) == 1);
    REQUIRE(isPrime (24) == 0);
}

TEST_CASE("isPrime for 0") {
    REQUIRE(isPrime (0) == 0);
}
</tests>

    </program>
            
                <p>Below is one way to implement the <c>isPrime</c> function. First,
                    we check to see if <c>num</c> is less than or equal to 1, and return
                    <c>false</c> if that is the case. Next, we use a <c>while</c> loop
                    to continuously check if a factor <c>n</c> divides <c>num</c> evenly.
                    If it does, we return <c>false</c>. If no value of <c>n</c> divides <c>num</c>
                    evenly, then we return <c>true</c>. Notice the <c>while</c> loop only goes up to
                    <c>num / 2</c> because if 2 doesn&#8217;t divide evenly, then there isn&#8217;t a smaller factor.</p>

    
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=cp_6_AC_8q_sq data-questionlist='cp_6_AC_8q, cp_6_AC_8q_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: cp_6_AC_8q, cp_6_AC_8q_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
        <exercise xml:id=""><statement/><program interactive="" language="" xml:id=""/><solution>
                Below is one way to implement the program. First,
                    we check to see if num is less than or equal to 1, and return
                    false if that is the case. Next, we use a while loop
                    to continuously check if a factor n divides num evenly.
                    If it does, we return false. If no value of n divides num
                    evenly, then we return true. Notice the while loop only goes up to
                    num / 2 because if 2 doesn&#8217;t divide evenly, then there isn&#8217;t a smaller factor.

    <program xml:id="cp_6_AC_9a" language="cpp">
    
        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
    int first = 0;
    int second = 1;
    int third;
    int n = 2;
    cout &lt;&lt; first &lt;&lt; " " &lt;&lt; second &lt;&lt; " ";
    while (n &lt; 20) {
        third = first + second;
        cout &lt;&lt; third &lt;&lt; " ";
        first = second;
        second = third;
        n++;
    }
}
        </input>
<tests>


</tests>

    </program>
            
                <p>Below is one way to implement the program. First,
                    we check to see if <c>num</c> is less than or equal to 1, and return
                    <c>false</c> if that is the case. Next, we use a <c>while</c> loop
                    to continuously check if a factor <c>n</c> divides <c>num</c> evenly.
                    If it does, we return <c>false</c>. If no value of <c>n</c> divides <c>num</c>
                    evenly, then we return <c>true</c>. Notice the <c>while</c> loop only goes up to
                    <c>num / 2</c> because if 2 doesn&#8217;t divide evenly, then there isn&#8217;t a smaller factor.</p>

    
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=cp_6_AC_10q_sq data-questionlist='cp_6_AC_10q, cp_6_AC_10q_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: cp_6_AC_10q, cp_6_AC_10q_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
    </section>

