<section xml:id="chapter6_the-while-statement">
        <title>The while statement</title>
        <p>Using a <c>while</c> statement, we can rewrite <c>countdown</c>:</p>

<exercise label="the_while_statement_AC_1">
    <statement>
        <p>Try running the active code below! Afterwards, try changing 9 to a different
            integer to see how the function works!</p>

    </statement>
    <program xml:id="the_while_statement_AC_1_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void countdown (int n) {
    while (n &gt; 0) {
        cout &lt;&lt; n &lt;&lt; endl;
        n = n - 1;
    }
    cout &lt;&lt; "Blastoff!" &lt;&lt; endl;
}

int main() {
    countdown (9);
}
        </input>
<tests>


</tests>

    </program>
</exercise>
        <p>You can almost read a <c>while</c> statement as if it were English. What
            this means is, &#8220;While <c>n</c> is greater than zero, continue displaying
            the value of <c>n</c> and then reducing the value of <c>n</c> by 1. When you
            get to zero, output the word &#8216;Blastoff!&#8217;&#8221;</p>
        <p>More formally, the flow of execution for a <c>while</c> statement is as
            follows:</p>
        <p><ol label="1">
            <li>
                <p>Evaluate the condition in parentheses, yielding <c>true</c> or
                    <c>false</c>.</p>
            </li>
            <li>
                <p>If the condition is false, exit the <c>while</c> statement and continue
                    execution at the next statement.</p>
            </li>
            <li>
                <p>If the condition is true, execute each of the statements between the
                    squiggly-braces, and then go back to step 1.</p>
            </li>
        </ol></p>
        
        
        <p xml:id="chapter6_index-0">This type of flow is called a <term>loop</term> because the third step loops back
            around to the top. Notice that if the condition is false the first time
            through the loop, the statements inside the loop are never executed. The
            statements inside the loop are called the <term>body</term> of the loop.</p>
        <p>The body of the loop should change the value of one or more variables so
            that, eventually, the condition becomes false and the loop terminates.
            Otherwise the loop will repeat forever, which is called an <term>infinite
                loop</term>. An endless source of amusement for computer scientists is the
            observation that the directions on shampoo, &#8220;Lather, rinse, repeat,&#8221; are
            an infinite loop.</p>
        <warning>
            <p>Make sure your while loops don&#8217;t loop forever! If they are
                meant to terminate, make sure to change the value of a variable, like
                incrementing or decrementing a counter.</p>
        </warning>
        
        
        <p xml:id="chapter6_index-1">In the case of <c>countdown</c>, we can prove that the loop will terminate
            because we know that the value of <c>n</c> is finite, and we can see that
            the value of <c>n</c> gets smaller each time through the loop (each
            <term>iteration</term>), so eventually we have to get to zero. In other cases it
            is not so easy to tell:</p>
        <pre>void sequence (int n) {
  while (n != 1) {
    cout &lt;&lt; n &lt;&lt; endl;
    if (n % 2 == 0) {           // n is even
      n = n / 2;
    }
    else {                     // n is odd
      n = n * 3 + 1;
    }
  }
}</pre>
        <p>The condition for this loop is <c>n != 1</c>, so the loop will continue
            until <c>n</c> is 1, which will make the condition false.</p>
        <p>At each iteration, the program outputs the value of <c>n</c> and then
            checks whether it is even or odd. If it is even, the value of <c>n</c> is
            divided by two. If it is odd, the value is replaced by <m>3n+1</m>. For
            example, if the starting value (the argument passed to <c>sequence</c>) is
            3, the resulting sequence is 3, 10, 5, 16, 8, 4, 2, 1.</p>
        <p>Since <c>n</c> sometimes increases and sometimes decreases, there is no
            obvious proof that <c>n</c> will ever reach 1, or that the program will
            terminate. For some particular values of <c>n</c>, we can prove
            termination. For example, if the starting value is a power of two, then
            the value of <c>n</c> will be even every time through the loop, until we
            get to 1. The previous example ends with such a sequence, starting with
            16.</p>
        <p>Particular values aside, the interesting question is whether we can
            prove that this program terminates for <em>all</em> values of n. So far, no one
            has been able to prove it <em>or</em> disprove it!</p>

    <exercise label="while_statement_1">
        <statement>

        <p>Q-2: Which of the following is NOT a valid condition for a while statement?</p>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>n = 2</p>
                </statement>
                <feedback>
                    <p>A single equal sign is the assignment operator, not comparison.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>n != 0</p>
                </statement>
                <feedback>
                    <p>This would be valid because it means the loop would run while n is not equal to 0.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>n % 2 == 1</p>
                </statement>
                <feedback>
                    <p>This would be valid because it mean the loop would run until n was an even number.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="while_statement_2">
        <statement>

        <p>Q-3: The following code contains an infinite loop.  Which is the best explanation for why the loop does not terminate?</p>
        <program language="cpp"><input>
int n = 10;
int answer = 1;
while (n &gt; 0) {
  answer = answer + n;
  n = n + 1;
}
cout &lt;&lt; answer;
</input></program>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>n starts at 10 and is incremented by 1 each time through the loop, so it will always be positive.</p>
                </statement>
                <feedback>
                    <p>The loop will run as long as n is positive. In this case, we can see that n will never become non-positive as the while statement condition will never be met.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>The answer starts at 1 and is incremented by n each time, so it will always be positive.</p>
                </statement>
                <feedback>
                    <p>While it is true that answer will always be positive, answer is not considered in the loop condition.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>You cannot compare n to 0 in while loop.  You must compare it to another variable.</p>
                </statement>
                <feedback>
                    <p>It is perfectly valid to compare n to 0. Though indirectly, this is what causes the infinite loop.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>In the while loop body, we must set n to False, and this code does not do that.</p>
                </statement>
                <feedback>
                    <p>The loop condition must become False for the loop to terminate, but n by itself is not the condition in this case.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="while_statement_3">
        <statement>

        <p>Q-4: The following code is a program to print the <term>even numbers from 0 to 20</term>. The code contains blanks. What is the correct while statement condition and iteration needed in order for the code to run successfully.</p>
        <pre>int n = 0;
  while (_____) {    // while statement condition
  cout &lt;&lt; n &lt;&lt; endl;
  _______;           // iteration of the variable
}</pre>
</statement><choices><choice><statement id="while_statement_3_opt_a">        <p><c>n % 2 = 0 &amp;&amp; n &lt;= 20</c> and <c>n = n + 1</c></p>
</statement><feedback id="while_statement_3_opt_a">
        <p>A single equal sign is the assignment operator, not comparison.</p>
</feedback></choice><choice><statement id="while_statement_3_opt_b">        <p><c>n % 2 != 0 &amp;&amp; n &lt;= 20</c> and <c>n = n + 1</c></p>
</statement><feedback id="while_statement_3_opt_b">
        <p>The code is meant to print the <term>even</term> numbers from 0-20</p>
</feedback></choice><choice correct="yes"><statement id="while_statement_3_opt_c">        <p><c>n % 2 == 0 &amp;&amp; n &lt;= 20</c> and <c>n = n + 1</c></p>
</statement><feedback id="while_statement_3_opt_c">
        <p>The condition checks whether a number is even and increments the variable <c>n</c></p>
</feedback></choice><choice><statement id="while_statement_3_opt_d">        <p><c>n == "even" &amp;&amp; n &lt;= 20</c> and <c>n = n + 2</c></p>
</statement><feedback id="while_statement_3_opt_d">
        <p><c>n</c> is an <c>int</c> and here you are comparing it to a <c>string</c>.</p>
</feedback></choice></choices>
    </exercise>

    <exercise label="while_statement_4">
        <statement>

        <p>Q-5: What is printed by this code?</p>
        <program language="cpp"><input>
int n = 1;
int x = 2;
while (n &lt; 5) {
  n = n + 1;
  x = x + 1;
  n = n + 2;
  x = x + n;
}
cout &lt;&lt; n;
cout &lt;&lt; x;
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>4 7</p>
                </statement>
                <feedback>
                    <p>Setting a variable so the loop condition would be false in the middle of the loop body does not keep the variable from actually being set.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>5 7</p>
                </statement>
                <feedback>
                    <p>Setting a variable so the loop condition would be false in the middle of the loop body does not stop execution of statements in the rest of the loop body.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>7 15</p>
                </statement>
                <feedback>
                    <p>After n becomes 5 and the test would be False, but the test does not actually come until after the end of the loop - only then stopping execution of the repetition of the loop.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    </section>

