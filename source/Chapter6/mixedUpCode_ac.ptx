<section xml:id="chapter6_activecode-exercises">
        <title>Activecode Exercises</title>
        <p>Answer the following <term>Activecode</term> questions to
            assess what you have learned in this chapter.</p>
        <exercise xml:id=""><statement>
                <p>Write a program that prints out the even numbers between 20 and 40, inclusive.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_6_1_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the program

    
    <program xml:id="mucp_6_1_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
   int n = 20;
   while (n &lt;= 40){
      cout &lt;&lt; n &lt;&lt; endl;
      n = n + 2;
   }
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_6_1_ac_a">
    <statement>
                <p>Below is one way to write the program</p>

    </statement>
    <program xml:id="mucp_6_1_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
   int n = 20;
   while (n &lt;= 40){
      cout &lt;&lt; n &lt;&lt; endl;
      n = n + 2;
   }
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Write a program that counts down from 100 to 0 in decrements of 10.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_6_2_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the program

    
    <program xml:id="mucp_6_2_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
   int n = 100;
   while (n &gt;= 0){
      cout &lt;&lt; n &lt;&lt; endl;
      n -= 10;
   }
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_6_2_ac_a">
    <statement>
                <p>Below is one way to write the program</p>

    </statement>
    <program xml:id="mucp_6_2_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
   int n = 100;
   while (n &gt;= 0){
      cout &lt;&lt; n &lt;&lt; endl;
      n -= 10;
   }
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Write a program that finds the sum of the first 10 natural numbers.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_6_3_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the program.

    
    <program xml:id="mucp_6_3_aq_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
   int n = 1;
   int sum = 0;
   while (n &lt;= 10) {
      sum = sum + n;
      n++;
   }
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_6_3_aq_a">
    <statement>
                <p>Below is one way to write the program.</p>

    </statement>
    <program xml:id="mucp_6_3_aq_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
   int n = 1;
   int sum = 0;
   while (n &lt;= 10) {
      sum = sum + n;
      n++;
   }
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Write a function, <c>repreatHello</c>, that is a void function that takes no arguments and uses a while loop to print out &#8220;hello&#8221; three times.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_6_4_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
   repeatHello();
}
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the function

    
    <program xml:id="mucp_6_4_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void repeatHello() {
   int n = 0;
   while (n &lt; 3) {
      cout &lt;&lt; "hello" &lt;&lt; endl;
      n++;
   }
}

int main() {
   repeatHello();
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_6_4_ac_a">
    <statement>
                <p>Below is one way to write the function</p>

    </statement>
    <program xml:id="mucp_6_4_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void repeatHello() {
   int n = 0;
   while (n &lt; 3) {
      cout &lt;&lt; "hello" &lt;&lt; endl;
      n++;
   }
}

int main() {
   repeatHello();
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Now let&#8217;s generalize the repeatHello function so that it repeats a given string three times.
                    Let&#8217;s write the code for the <c>repeatString</c> function, which takes
                    input as a parameter and uses a while loop to print out the string three times.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_6_5_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
   repeatString("Hello world");
}
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the function.

    
    <program xml:id="mucp_6_5_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void repeatString (string input) {
   int n = 0;
   while (n &lt; 3) {
      cout &lt;&lt; input &lt;&lt; endl;
      n++;
   }
}

int main() {
   repeatString("Hello world");
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_6_5_ac_a">
    <statement>
                <p>Below is one way to write the function.</p>

    </statement>
    <program xml:id="mucp_6_5_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void repeatString (string input) {
   int n = 0;
   while (n &lt; 3) {
      cout &lt;&lt; input &lt;&lt; endl;
      n++;
   }
}

int main() {
   repeatString("Hello world");
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>We can further generalize repeatString so that it repeats a given string a given number of times.
                    Let&#8217;s write the code for the new <c>repeatString</c> function, which takes
                    input and x as parameters and uses a while loop to print out the string x number of times.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_6_6_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
   repeatString("Hello world!", 5);
}
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the function

    
    <program xml:id="mucp_6_6_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void repeatString (string input, int x) {
   int n = 0;
   while (n &lt; x) {
      cout &lt;&lt; input &lt;&lt; endl;
      n = n + 1;
   }
}

int main() {
   repeatString("Hello world!", 5);
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_6_6_ac_a">
    <statement>
                <p>Below is one way to write the function</p>

    </statement>
    <program xml:id="mucp_6_6_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void repeatString (string input, int x) {
   int n = 0;
   while (n &lt; x) {
      cout &lt;&lt; input &lt;&lt; endl;
      n = n + 1;
   }
}

int main() {
   repeatString("Hello world!", 5);
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>On the last day of every year, we count down the seconds before the new year arrives.
                    Write the function <c>newYearCountdown</c>, which prints out a countdown from 10 and then
                    prints out &#8220;Happy New Year!&#8221;.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_6_7_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
   newYearCountdown();
}
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the function.

    
    <program xml:id="mucp_6_7_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void newYearCountdown() {
   int n = 10;
   while (n &gt; 0) {
      cout &lt;&lt; n &lt;&lt; " ";
      n--;
   }
   cout &lt;&lt; "Happy New Year!" &lt;&lt; endl;
}

int main() {
   newYearCountdown();
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_6_7_ac_a">
    <statement>
                <p>Below is one way to write the function.</p>

    </statement>
    <program xml:id="mucp_6_7_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void newYearCountdown() {
   int n = 10;
   while (n &gt; 0) {
      cout &lt;&lt; n &lt;&lt; " ";
      n--;
   }
   cout &lt;&lt; "Happy New Year!" &lt;&lt; endl;
}

int main() {
   newYearCountdown();
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Help Goku reach power levels of over 9000! Write the function
                    <c>powerUp</c> which takes powerLevel as a parameter.
                    powerUp checks to see if powerLevel is over 9000. If it
                    isn&#8217;t, it repeatedly prints &#8220;More power!&#8221; and increments powerLevel by
                    1000 until powerLevel is over 9000. Then powerUp prints &#8220;It&#8217;s over 9000!&#8221;.
                    Write the necessary code for the powerUp function.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_6_8_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
   powerUp(5000);
}
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the function

    
    <program xml:id="mucp_6_8_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void powerUp (int powerLevel) {
   while (powerLevel &lt; 9000) {
      cout &lt;&lt; "More power!" &lt;&lt; endl;
      powerLevel = powerLevel + 1000;
   }
   cout &lt;&lt; "It's over 9000!" &lt;&lt; endl;
}

int main() {
   powerUp(5000);
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_6_8_ac_a">
    <statement>
                <p>Below is one way to write the function</p>

    </statement>
    <program xml:id="mucp_6_8_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void powerUp (int powerLevel) {
   while (powerLevel &lt; 9000) {
      cout &lt;&lt; "More power!" &lt;&lt; endl;
      powerLevel = powerLevel + 1000;
   }
   cout &lt;&lt; "It's over 9000!" &lt;&lt; endl;
}

int main() {
   powerUp(5000);
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Write the function <c>summation</c> which takes two
                    parameters, start and end. summation adds
                    all the integers from start to end, inclusive, together and returns
                    the sum. Write the necessary code for the summation function.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_6_9_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE


        </input>
<tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("summation function") {
   REQUIRE(summation(1,5) == 15);
   REQUIRE(summation(1,9) == 45);
   REQUIRE(summation(1,20) == 210);
}
</tests>

    </program><solution>


    
                Below is one way to write the function

    
    <program xml:id="mucp_6_9_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int summation (int start, int end) {
   int n = start;
   int sum = 0;
   while (n &lt;= end) {
      sum = sum + n;
      n++;
   }
   return sum;
}

int main() {
   summation(1,10);
}

        </input>
<tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("summation function") {
   REQUIRE(summation(1,5) == 15);
   REQUIRE(summation(1,9) == 45);
   REQUIRE(summation(1,20) == 210);
}
</tests>

    </program>

            

<exercise label="mucp_6_9_ac_a">
    <statement>
                <p>Below is one way to write the function</p>

    </statement>
    <program xml:id="mucp_6_9_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int summation (int start, int end) {
   int n = start;
   int sum = 0;
   while (n &lt;= end) {
      sum = sum + n;
      n++;
   }
   return sum;
}

int main() {
   summation(1,10);
}

        </input>
<tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("summation function") {
   REQUIRE(summation(1,5) == 15);
   REQUIRE(summation(1,9) == 45);
   REQUIRE(summation(1,20) == 210);
}
</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Write the function <c>reverseNumber</c> which takes num
                    as a parameter and returns num but with its digits reversed.
                    For example, reverseNumber (1324) returns 4231.
                    Write the necessary code, with reverse
                    declared first, then temp, and lastly remainder.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_6_10_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE


        </input>
<tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("reverseNumber function") {
   REQUIRE(reverseNumber(1324) == 4231);
   REQUIRE(reverseNumber(4231) == 1324);
   REQUIRE(reverseNumber(1) == 1);
}
</tests>

    </program><solution>


    
                Below is one way to write the function

    
    <program xml:id="mucp_6_10_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int reverseNumber (int num) {
   int reverse = 0;
   int temp = num;
   int remainder = 0;
   while (temp &gt; 0) {
      remainder = temp % 10;
      reverse = reverse * 10 + remainder;
      temp = temp / 10;
   }
   return reverse;
}

        </input>
<tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("reverseNumber function") {
   REQUIRE(reverseNumber(1324) == 4231);
   REQUIRE(reverseNumber(4231) == 1324);
   REQUIRE(reverseNumber(1) == 1);
}
</tests>

    </program>

            

<exercise label="mucp_6_10_ac_a">
    <statement>
                <p>Below is one way to write the function</p>

    </statement>
    <program xml:id="mucp_6_10_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int reverseNumber (int num) {
   int reverse = 0;
   int temp = num;
   int remainder = 0;
   while (temp &gt; 0) {
      remainder = temp % 10;
      reverse = reverse * 10 + remainder;
      temp = temp / 10;
   }
   return reverse;
}

        </input>
<tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("reverseNumber function") {
   REQUIRE(reverseNumber(1324) == 4231);
   REQUIRE(reverseNumber(4231) == 1324);
   REQUIRE(reverseNumber(1) == 1);
}
</tests>

    </program>
</exercise>
            </solution></exercise>
    </section>

