<section xml:id="chapter10_copying-vectors">
        <title>Copying vectors</title>
        <p>There is one more constructor for <c>vector</c>s, which is called a copy
            constructor because it takes one <c>vector</c> as an argument and creates a
            new vector that is the same size, with the same elements.</p>
        <pre>vector&lt;int&gt; copy (count);</pre>
        <p>Although this syntax is legal, it is almost never used for <c>vector</c>s
            because there is a better alternative:</p>
        <pre>vector&lt;int&gt; copy = count;</pre>
        <p>The <c>=</c> operator works on <c>vector</c>s in pretty much the way you
            would expect.</p>

<exercise label="copying_vectors_AC_1">
    <statement>
        <p>Take a look at the active code below, which uses the copy constructor.</p>

    </statement>
    <program xml:id="copying_vectors_AC_1_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

void print_vec(vector&lt;int&gt; vec);

int main() {
    vector&lt;int&gt; count = {1,2,3,4};
    cout &lt;&lt; "count = "; print_vec(count);

    vector&lt;int&gt; copy_1 (count);
    vector&lt;int&gt; copy_2 = count;

    cout &lt;&lt; "copy_1 = "; print_vec(copy_1);
    cout &lt;&lt; "copy_2 = "; print_vec(copy_2);
    cout &lt;&lt; "We just made two copies of count.  As you can see, both methods work the same!" &lt;&lt; endl;
}

        </input>
<tests>

void print_vec(vector&lt;int&gt; vec) {
   size_t i = 0;
   cout &lt;&lt; "[";
   while (i &lt; vec.size()-1) {
       cout &lt;&lt; vec[i] &lt;&lt; ",";
       i++;
   }
   cout &lt;&lt; vec[vec.size()-1];
   cout &lt;&lt; "]" &lt;&lt; endl;
}
</tests>

    </program>
</exercise>

    <exercise label="copying_vectors_1">
        <statement>

        <p>Q-2: <term>Multiple Response</term> How would you make a copy of <c>vector&lt;double&gt; decimals</c> called <term>nums</term>?</p>
</statement><choices><choice correct="yes"><statement id="copying_vectors_1_opt_a">        <p><c>vector&lt;double&gt; nums = decimals;</c></p>
</statement><feedback id="copying_vectors_1_opt_a">
        <p>This is one way to make a copy.</p>
</feedback></choice><choice><statement id="copying_vectors_1_opt_b">        <p><c>vector&lt;double&gt; decimals = nums;</c></p>
</statement><feedback id="copying_vectors_1_opt_b">
        <p>This makes a copy of nums called decimals.</p>
</feedback></choice><choice correct="yes"><statement id="copying_vectors_1_opt_c">        <p><c>vector&lt;double&gt; nums (decimals);</c></p>
</statement><feedback id="copying_vectors_1_opt_c">
        <p>This is one way to make a copy.</p>
</feedback></choice><choice><statement id="copying_vectors_1_opt_d">        <p><c>vector&lt;double&gt; decimals (nums);</c></p>
</statement><feedback id="copying_vectors_1_opt_d">
        <p>This makes a copy of nums called decimals.</p>
</feedback></choice></choices>
    </exercise>

        <exercise label="copying_vectors_2">
            <statement>
    <p>Q-3: What is the name of the function that takes a vector as an argument, and
creates a new vector of the same size and with the same elements? <var/>  </p></statement><setup><var><condition string="^\s*[Cc][Oo][Pp][Yy]\s+[Cc][Oo][Nn][Ss][Tt][Rr][Uu][Cc][Tt][Oo][Rr]\s*$"><feedback><p>Correct!</p></feedback></condition><condition string="^\s*.*\s*$"><feedback><p>incorrect! You can find the answer by re-reading the text above.</p></feedback></condition></var></setup></exercise>    </section>

