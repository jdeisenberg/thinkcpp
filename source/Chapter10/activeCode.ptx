<section xml:id="chapter10_activecode-exercises">
        <title>Activecode Exercises</title>
        <p>Answer the following <term>Activecode</term> questions to assess what you have learned in this chapter.</p>
        <exercise xml:id=""><statement>
                <p>Fix the code below so that it creates a vector with 5 elements initialized to 1, and changes
                    the third element of that vector to a 2.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="vectors_a1q_editor">

        <input>
#include &lt;iostream&gt;


using namespace std;

int main () {
    vector&lt;int&gt; nums (5) = 1;
    nums[3] = 2;
}
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to fix the program.  You must always include the &lt;vector&gt; header when
                    dealing with vectors.  Furthermore, to initialize a vector&#8217;s elements to a certain value, you
                    must include that value as a second argument to the size.  Finally, vectors are zero-indexed.

    
    <program xml:id="vectors_a1a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

int main () {
    vector&lt;int&gt; nums (5, 1);
    nums[2] = 2;
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="vectors_a1a">
    <statement>
                <p>Below is one way to fix the program.  You must always include the <c>&lt;vector&gt;</c> header when
                    dealing with vectors.  Furthermore, to initialize a vector&#8217;s elements to a certain value, you
                    must include that value as a second argument to the size.  Finally, vectors are zero-indexed.</p>

    </statement>
    <program xml:id="vectors_a1a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

int main () {
    vector&lt;int&gt; nums (5, 1);
    nums[2] = 2;
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=vectors_a2_sq data-questionlist='vectors_a2, vectors_a2_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: vectors_a2, vectors_a2_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
        <exercise xml:id=""><statement>
                <p>Fix the function below so that it creates a vector of all of the words in <c>words</c> that end with
                    the passed character.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="vectors_a3q_editor">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
using namespace std;

int endsWith (const vector&lt;string&gt;&amp; vec, char c) {
    int count;
    for (size_t i = 0; i &lt; vec.size(); i++) {
        last = vec.size() - 1;
        if (vec[last] == c) {
            count++;
        }
    }
    return count;
}
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to fix the function.  You must initialize count to zero.
                    You also must initialize last as an integer.  To access a string inside
                    of vec,  we use vec[i].  To get the last character, we must index the
                    string to the last index, which is one less than the length of the string.

    
    <program xml:id="vectors_a3a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
using namespace std;

int endsWith (const vector&lt;string&gt;&amp; vec, char c) {
    int count = 0;
    for (size_t i = 0; i &lt; vec.size(); i++) {
        int last = vec[i].size() - 1;
        if (vec[i][last] == c) {
            count++;
        }
    }
    return count;
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="vectors_a3a">
    <statement>
                <p>Below is one way to fix the function.  You must initialize <c>count</c> to zero.
                    You also must initialize <c>last</c> as an integer.  To access a string <em>inside</em>
                    of <c>vec</c>,  we use <c>vec[i]</c>.  To get the last character, we must index the
                    string to the last index, which is one less than the length of the string.</p>

    </statement>
    <program xml:id="vectors_a3a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
using namespace std;

int endsWith (const vector&lt;string&gt;&amp; vec, char c) {
    int count = 0;
    for (size_t i = 0; i &lt; vec.size(); i++) {
        int last = vec[i].size() - 1;
        if (vec[i][last] == c) {
            count++;
        }
    }
    return count;
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=vectors_a4_sq data-questionlist='vectors_a4, vectors_a4_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: vectors_a4, vectors_a4_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
        <exercise xml:id=""><statement>
                <p>Finish the code below so that it creates removes elements from the end of the vector until
                    it ends with <c>"stop"</c>.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="vectors_a5q_editor">

        <input>
#include &lt;iostream&gt;


using namespace std;

int main () {
    vector&lt;string&gt; words = {"roses", "are", "red", "violets", "stop", "are", "blue"}

    while(          ) {

    }

}
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to finish the program.  We just use the pop_back function until the
                    last element of the vector is "stop".

    
    <program xml:id="vectors_a5a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;

using namespace std;

int main () {
    vector&lt;string&gt; words = {"roses", "are", "red", "violets", "stop", "are", "blue"};

    while (words[words.size() - 1] != "stop"){
        words.pop_back();
    }
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="vectors_a5a">
    <statement>
                <p>Below is one way to finish the program.  We just use the <c>pop_back</c> function until the
                    last element of the vector is <c>"stop"</c>.</p>

    </statement>
    <program xml:id="vectors_a5a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;

using namespace std;

int main () {
    vector&lt;string&gt; words = {"roses", "are", "red", "violets", "stop", "are", "blue"};

    while (words[words.size() - 1] != "stop"){
        words.pop_back();
    }
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=vectors_a6_sq data-questionlist='vectors_a6, vectors_a6_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: vectors_a6, vectors_a6_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
        <exercise xml:id=""><statement>
                <p>Write a function called <c>has_char</c> that returns a boolean of whether every string in the
                    vector <c>vec</c> contains the character <c>let</c>.  It should return true if all strings contain the <c>let</c>.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="vectors_a7q_editor">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to finish the program.  We loop through the vector, and we loop through each string
                    inside it.  If the string has the character, it is added to count.  We then check whether count
                    is equal to the number of elements in vec and return a boolean.

    
    <program xml:id="vectors_a7a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;


int has_char (const vector&lt;string&gt;&amp; vec, char let) {
    int count = 0;
    for (size_t i = 0; i &lt; vec.size(); i++) {
        for (size_t c = 0; c &lt; vec[i].size(); c++) {
            if (vec[i][c] == let) {
                count++;
            }
        }
    }
    if (count == vec.size()) {
        return true;
    }
    return false;
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="vectors_a7a">
    <statement>
                <p>Below is one way to finish the program.  We loop through the vector, and we loop through each string
                    inside it.  If the string has the character, it is added to <c>count</c>.  We then check whether <c>count</c>
                    is equal to the number of elements in <c>vec</c> and return a boolean.</p>

    </statement>
    <program xml:id="vectors_a7a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;


int has_char (const vector&lt;string&gt;&amp; vec, char let) {
    int count = 0;
    for (size_t i = 0; i &lt; vec.size(); i++) {
        for (size_t c = 0; c &lt; vec[i].size(); c++) {
            if (vec[i][c] == let) {
                count++;
            }
        }
    }
    if (count == vec.size()) {
        return true;
    }
    return false;
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=vectors_a8_sq data-questionlist='vectors_a8, vectors_a8_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: vectors_a8, vectors_a8_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
        <exercise xml:id=""><statement>
                <p>Write the function <c>mean</c> which returns the average of a vector of numbers.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="vectors_a9q_editor">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to finish the program.  First we take the sum, then divide the sum by the number
                    of elements in nums.

    
    <program xml:id="vectors_a9a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

double mean (const vector&lt;double&gt; nums) {
    double sum = 0;
    for (size_t i = 0; i &lt; nums.size(); ++i) {
        sum = sum + nums[i];
    }
    return sum/nums.size();
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="vectors_a9a">
    <statement>
                <p>Below is one way to finish the program.  First we take the sum, then divide the sum by the number
                    of elements in <c>nums</c>.</p>

    </statement>
    <program xml:id="vectors_a9a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

double mean (const vector&lt;double&gt; nums) {
    double sum = 0;
    for (size_t i = 0; i &lt; nums.size(); ++i) {
        sum = sum + nums[i];
    }
    return sum/nums.size();
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=vectors_a10_sq data-questionlist='vectors_a10, vectors_a10_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: vectors_a10, vectors_a10_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
        <exercise xml:id=""><statement>
                <p>Write the function <c>make_odd</c> which subtracts 1 from every even number in a vector of integers.
                    We don&#8217;t want any negative values so don&#8217;t subtract 1 from 0.
                    ( remember to take in the vector by reference to make changes to the actual vector! )</p>

    </statement><program interactive="activecode" language="cpp" xml:id="vectors_a11q_editor">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to finish the program.  We us the modulus operator to check for even numbers and decrement them.
                    we keep an extra check for 0 to make sure wew are not decrementing 0.

    
    <program xml:id="vectors_a11a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

void make_odd ( vector&lt;int&gt; &amp;nums) {
    for (size_t i = 0; i &lt; nums.size(); ++i) {

        if((nums[i] % 2 == 0) &amp;&amp; (nums[i] != 0)){
            nums[i]--;
        }

    }
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="vectors_a11a">
    <statement>
                <p>Below is one way to finish the program.  We us the modulus operator to check for even numbers and decrement them.
                    we keep an extra check for 0 to make sure wew are not decrementing 0.</p>

    </statement>
    <program xml:id="vectors_a11a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

void make_odd ( vector&lt;int&gt; &amp;nums) {
    for (size_t i = 0; i &lt; nums.size(); ++i) {

        if((nums[i] % 2 == 0) &amp;&amp; (nums[i] != 0)){
            nums[i]--;
        }

    }
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=vectors_a12_sq data-questionlist='vectors_a12, vectors_a12_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: vectors_a12, vectors_a12_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
    </section>

