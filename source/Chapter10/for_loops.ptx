<section xml:id="chapter10_for-loops">
        <title><c>for</c> loops</title>
        <p>The loops we have written so far have a number of elements in common.
            All of them start by initializing a variable; they have a test, or
            condition, that depends on that variable; and inside the loop they do
            something to that variable, like increment it.</p>
        
        
        <p xml:id="chapter10_index-0">This type of loop is so common that there is an alternate loop
            statement, called <c>for</c>, that expresses it more concisely. The general
            syntax looks like this:</p>
        <pre>for (INITIALIZER; CONDITION; INCREMENTOR) {
  BODY
}</pre>
        <p>This statement is exactly equivalent to</p>
        <pre>INITIALIZER;
while (CONDITION) {
  BODY
  INCREMENTOR
}</pre>
        <p>except that it is more concise and, since it puts all the loop-related
            statements in one place, it is easier to read. For example:</p>
        <pre>int i;
for (i = 0; i &lt; 4; i++) {
  cout &lt;&lt; count[i] &lt;&lt; endl;
}</pre>
        <p>is equivalent to</p>
        <pre>int i = 0;
while (i &lt; 4) {
  cout &lt;&lt; count[i] &lt;&lt; endl;
  i++;
}</pre>

<exercise label="for_loops_AC_1">
    <statement>
        <p>Run the active code below, which uses a <c>for</c> loop.</p>

    </statement>
    <program xml:id="for_loops_AC_1_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

int main() {
    vector&lt;int&gt; count = {1,2,3,4};
    int i;
    for (i = 0; i &lt; 4; i++) {
        cout &lt;&lt; count[i] &lt;&lt; endl;
    }
}
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="for_loops_AC_2">
    <statement>
        <p>Run the active code below, which uses a <c>while</c> loop.</p>

    </statement>
    <program xml:id="for_loops_AC_2_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

int main() {
    vector&lt;int&gt; count = {1,2,3,4};
    int i = 0;
    while (i &lt; 4) {
        cout &lt;&lt; count[i] &lt;&lt; endl;
        i++;
    }
}
        </input>
<tests>


</tests>

    </program>
</exercise>

        <exercise label="for_loops_1">
            <statement>
    <p>Q-3: How many times would the following loop execute?  <c>for (int i = 1; i &lt; 4; i++)</c> <var/>  </p></statement><setup><var><condition number="[3, 3]"><feedback><p>Correct!</p></feedback></condition><condition number="[4, 4]"><feedback><p>Incorrect! The loop does not execute when i = 4.</p></feedback></condition><condition string="^\s*.*\s*$"><feedback><p>Incorrect!</p></feedback></condition></var></setup></exercise>
    <exercise label="for_loops_2">
        <statement>

        <p>Q-4: Where are the incrementors in <c>for</c> loops and <c>while</c>?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>in the BODIES of both loops</p>
                </statement>
                <feedback>
                    <p>Incorrect!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>in the BODY of a for loop, and in the statement of a while loop</p>
                </statement>
                <feedback>
                    <p>Incorrect!</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>in the statement of a for loop, and in the BODY of a while loop</p>
                </statement>
                <feedback>
                    <p>Correct!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>in the statements of both loops</p>
                </statement>
                <feedback>
                    <p>Incorrect!</p>
                </feedback>
            </choice>
</choices>

    </exercise>
<exercise label="question10_4_3" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>Construct the <c>half_life()</c> function that prints the first num half lives
            of the initial amount.</p>
</statement>
<blocks><block order="9">
<choice correct="yes"><cline>void half_life(int initial_amount, int num) {</cline>
</choice><choice><cline>int half_life(int initial_amount, int num) {                         </cline>
</choice></block><block order="5">
<cline>   int new_amount = initial_amount;</cline>
</block><block order="2">
<choice correct="yes"><cline>   for (int i = 0; i &lt; num; i++) {</cline>
</choice><choice><cline>   for (int i = 0; i &lt;= num; i++) {                         </cline>
</choice></block><block order="10">
<choice correct="yes"><cline>      new_amount = new_amount / 2;</cline>
</choice><choice><cline>      new_amount / 2;                         </cline>
</choice></block><block order="3">
<cline>      cout &lt;&lt; new_amount &lt;&lt; endl;</cline>
</block><block order="7" correct="no">
<cline>   return new_amount;                         </cline>
</block><block order="8">
<cline>   }</cline>
<cline>}</cline>
</block></blocks></exercise>
<exercise label="for_loops_AC_3">
    <statement>
        <p>Run the active code below, which uses a <c>for</c> loop with a negative change in the &#8220;INCREMENTOR&#8221;.</p>

    </statement>
    <program xml:id="for_loops_AC_3_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

int main() {
    vector&lt;int&gt; count = {1,2,3,4};
    int i;
    for (i = 3; i &gt; -1; i--){
       cout &lt;&lt; count[i] &lt;&lt; endl;
    }
}
        </input>
<tests>


</tests>

    </program>
</exercise>
    </section>

