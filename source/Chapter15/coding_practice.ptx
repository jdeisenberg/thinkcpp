<section xml:id="chapter15_coding-practice">
        <title>Coding Practice</title>
        <DataFileNode line="3" runestone_options="{'fromfile': 'poem.txt', 'hide': None, 'subchapter': 'coding_practice', 'chapter': 'Chapter15', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'divid': 'poem.txt', 'qnumber': 'Q-1', 'cols': 38, 'rows': 20, 'filecontent': 'Two roads diverged in a yellow wood,\nAnd sorry I could not travel both\nAnd be one traveler, long I stood\nAnd looked down one as far as I could\nTo where it bent in the undergrowth;\nThen took the other, as just as fair,\nAnd having perhaps the better claim\nBecause it was grassy and wanted wear,\nThough as for that the passing there\nHad worn them really about the same,\nAnd both that morning equally lay\nIn leaves no step had trodden black.\nOh, I kept the first for another day!\nYet knowing how way leads on to way\nI doubted if I should ever come back.\nI shall be telling this with a sigh\nSomewhere ages and ages hence:\nTwo roads diverged in a wood, and I,\nI took the one less traveled by,\nAnd that has made all the difference\n', 'hidden': 'data-hidden', 'edit': 'false', 'question_label': '15.14.1'}" source="/home/david/runestone/books/thinkcpp/_sources/Chapter15/coding_practice.rst">
        </DataFileNode>
        <exercise xml:id=""><statement/><program interactive="" language="" xml:id=""/><TabNode tabname="Input File" tabnode_options="{'subchapter': 'coding_practice', 'chapter': 'Chapter15', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Input File'}">
                <p>Below are the contents of the input file.</p>
                <pre>Two roads diverged in a yellow wood,
And sorry I could not travel both
And be one traveler, long I stood
And looked down one as far as I could
To where it bent in the undergrowth;
Then took the other, as just as fair,
And having perhaps the better claim
Because it was grassy and wanted wear,
Though as for that the passing there
Had worn them really about the same,
And both that morning equally lay
In leaves no step had trodden black.
Oh, I kept the first for another day!
Yet knowing how way leads on to way
I doubted if I should ever come back.
I shall be telling this with a sigh
Somewhere ages and ages hence:
Two roads diverged in a wood, and I,
I took the one less traveled by,
And that has made all the difference.</pre>
            </TabNode><solution>
                Below is one way to implement this program. We create an ifstream object
                    to open our file. We check to make sure the file is opened correctly before
                    we use getline in a for loop to retrieve and print the first 5
                    lines of the poem.

    <program xml:id="cp_15_AC_1a" language="cpp">
    
        <input>
#include &lt;iostream&gt;
#include &lt;fstream&gt;
using namespace std;

int main() {
    ifstream infile("poem.txt");
    string input;
    if (!infile.good()) {
        cout &lt;&lt; "Error. Unable to open file." &lt;&lt; endl;
        exit(1);
    }
    for (int i = 0; i &lt; 5; ++i) {
        getline(infile, input);
        cout &lt;&lt; input &lt;&lt; endl;
    }
}
        </input>
<tests>


</tests>

    </program>
            
                <p>Below is one way to implement this program. We create an <c>ifstream</c> object
                    to open our file. We check to make sure the file is opened correctly before
                    we use <c>getline</c> in a <c>for</c> loop to retrieve and print the first 5
                    lines of the poem.</p>

    
            </solution></exercise>
        <DataFileNode line="82" runestone_options="{'fromfile': 'speech.txt', 'hide': None, 'subchapter': 'coding_practice', 'chapter': 'Chapter15', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'divid': 'speech.txt', 'qnumber': 'Q-4', 'cols': 65, 'rows': 20, 'filecontent': 'We choose to go to the Moon. We choose to go to the Moon...\nWe choose to go to the Moon in this decade and do the other things, \nnot because they are easy, but because they are hard; because that goal \nwill serve to organize and measure the best of our energies and skills, \nbecause that challenge is one that we are willing to accept, one we are \nunwilling to postpone, and one we intend to win, and the others, too\n', 'hidden': 'data-hidden', 'edit': 'false', 'question_label': '15.14.4'}" source="/home/david/runestone/books/thinkcpp/_sources/Chapter15/coding_practice.rst">
        </DataFileNode>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=cp_15_AC_2_sq data-questionlist='cp_15_AC_2q, cp_15_AC_2q_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: cp_15_AC_2q, cp_15_AC_2q_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
        <DataFileNode line="90" runestone_options="{'fromfile': 'heights.txt', 'hide': None, 'subchapter': 'coding_practice', 'chapter': 'Chapter15', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'divid': 'heights.txt', 'qnumber': 'Q-6', 'cols': 14, 'rows': 20, 'filecontent': '62\t67\t75\t68\t65\n67\t70\t72\t74\t66\n72\t66\t66\t73\t69\n61\t60\t73\t72\t6\n', 'hidden': 'data-hidden', 'edit': 'false', 'question_label': '15.14.5'}" source="/home/david/runestone/books/thinkcpp/_sources/Chapter15/coding_practice.rst">
        </DataFileNode>
        <exercise xml:id=""><statement/><program interactive="" language="" xml:id=""/><TabNode tabname="Input File" tabnode_options="{'subchapter': 'coding_practice', 'chapter': 'Chapter15', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Input File'}">
                <p>Below are the contents of the input file.</p>
                <pre>62  67      75      68      65
67  70      72      74      66
72  66      66      73      69
61  60      73      72      60</pre>
            </TabNode><solution>
                Below is one way to implement this program. We create an ifstream object
                    to open our file. We check to make sure the file is opened correctly before
                    we read the data values into a vector. After sorting the vector, we find
                    the median depending on whether the number of data values was even or odd.
                    Finally, we output our result to the terminal.

    <program xml:id="cp_15_AC_3a" language="cpp">
    
        <input>
#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
using namespace std;

int main() {
    ifstream infile("heights.txt");
    vector&lt;int&gt; data;
    double median;
    int height;
    if (!infile.good()) {
        cout &lt;&lt; "Error. Unable to open file." &lt;&lt; endl;
        exit(1);
    }
    while (infile &gt;&gt; height) {
        data.push_back(height);
    }
    sort(data.begin(), data.end());
    if (data.size() % 2 == 0) {
        median = (data[data.size() / 2 - 1] + data[data.size() / 2]) / 2.0;
    }
    else {
        median = data[data.size() / 2];
    }
    cout &lt;&lt; "The median height is: " &lt;&lt; median &lt;&lt; " inches" &lt;&lt; endl;
}
        </input>
<tests>


</tests>

    </program>
            
                <p>Below is one way to implement this program. We create an <c>ifstream</c> object
                    to open our file. We check to make sure the file is opened correctly before
                    we read the data values into a vector. After sorting the vector, we find
                    the median depending on whether the number of data values was even or odd.
                    Finally, we output our result to the terminal.</p>

    
            </solution></exercise>
        <DataFileNode line="168" runestone_options="{'fromfile': 'powers.txt', 'hide': None, 'subchapter': 'coding_practice', 'chapter': 'Chapter15', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'divid': 'powers.txt', 'qnumber': 'Q-9', 'cols': 18, 'rows': 20, 'filecontent': 'Student output fil\n', 'hidden': 'data-hidden', 'edit': 'false', 'question_label': '15.14.8'}" source="/home/david/runestone/books/thinkcpp/_sources/Chapter15/coding_practice.rst">
        </DataFileNode>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=cp_15_AC_4_sq data-questionlist='cp_15_AC_4q, cp_15_AC_4q_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: cp_15_AC_4q, cp_15_AC_4q_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
        <DataFileNode line="176" runestone_options="{'fromfile': 'message.txt', 'hide': None, 'subchapter': 'coding_practice', 'chapter': 'Chapter15', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'divid': 'message.txt', 'qnumber': 'Q-11', 'cols': 59, 'rows': 20, 'filecontent': &quot;Can you encrypt this message and decrypt the message below?\nPbatenghyngvbaf! Lbh'ir qrpelcgrq guvf zrffntr\n&quot;, 'hidden': 'data-hidden', 'edit': 'false', 'question_label': '15.14.9'}" source="/home/david/runestone/books/thinkcpp/_sources/Chapter15/coding_practice.rst">
        </DataFileNode>
        <exercise xml:id=""><statement/><program interactive="" language="" xml:id=""/><TabNode tabname="Input File" tabnode_options="{'subchapter': 'coding_practice', 'chapter': 'Chapter15', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Input File'}">
                <p>Below are the contents of the input file.</p>
                <pre>Can you encrypt this message and decrypt the message below?
Pbatenghyngvbaf! Lbh'ir qrpelcgrq guvf zrffntr.</pre>
            </TabNode><solution>
                Below is one way to implement this program. We create an ifstream object
                    to open our file. We check to make sure the file is opened correctly before
                    we read the data values into a string. We call our ROT13 function and
                    output the result to the output file.

    <program xml:id="cp_15_AC_5a" language="cpp">
    
        <input>
#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;cctype&gt;
using namespace std;

string ROT13 (string message) {
    for (size_t i = 0; i &lt; message.size(); ++i) {
        if (isalpha(message[i])) {
            if (message[i] &gt;= 'A' &amp;&amp; message[i] &lt;= 'Z') {
                if (message[i] &lt;= 'M') {
                    message[i] = message[i] + 13;
                }
                else {
                    message[i] = message[i] - 13;
                }
            }
            else {
                 if (message[i] &lt;= 'm') {
                    message[i] = message[i] + 13;
                }
                else {
                    message[i] = message[i] - 13;
                }
            }
        }
    }
    return message;
}

int main() {
    ifstream infile("message.txt");
    string message;
    if (!infile.good()) {
        cout &lt;&lt; "Error. Unable to open file." &lt;&lt; endl;
        exit(1);
    }
    while (getline(infile, message)) {
        cout &lt;&lt; ROT13(message) &lt;&lt; endl;
    }
}
        </input>
<tests>


</tests>

    </program>
            
                <p>Below is one way to implement this program. We create an <c>ifstream</c> object
                    to open our file. We check to make sure the file is opened correctly before
                    we read the data values into a string. We call our <c>ROT13</c> function and
                    output the result to the output file.</p>

    
            </solution></exercise>
        <DataFileNode line="269" runestone_options="{'fromfile': 'dream.txt', 'hide': None, 'subchapter': 'coding_practice', 'chapter': 'Chapter15', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'divid': 'dream.txt', 'qnumber': 'Q-14', 'cols': 40, 'rows': 20, 'filecontent': 'Have you ever had a dream that you, \num, you had, your, you- you could, \nyou&#x2019;ll do, you- you wants, you, you \ncould do so, you- you&#x2019;ll do, you could- \nyou, you want, you want them to do you \nso much you could do anything\n', 'hidden': 'data-hidden', 'edit': 'false', 'question_label': '15.14.12'}" source="/home/david/runestone/books/thinkcpp/_sources/Chapter15/coding_practice.rst">
        </DataFileNode>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=cp_15_AC_6_sq data-questionlist='cp_15_AC_6q, cp_15_AC_6q_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: cp_15_AC_6q, cp_15_AC_6q_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
        <DataFileNode line="277" runestone_options="{'fromfile': 'class_data.txt', 'hide': None, 'subchapter': 'coding_practice', 'chapter': 'Chapter15', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'divid': 'class_data.txt', 'qnumber': 'Q-16', 'cols': 39, 'rows': 20, 'filecontent': 'First    Last       Grade    GPA    Age\nAlex     Jones      9        3.4    14\nBeth     Hamilton   12       3.7    18\nCharles  White      11       3.5    16\nDaniel   Kim        10       3.8    16\nEthan    Brooks     11       3.9    17\nFaith    Flemmings  10       3.0    15\nGina     Zhou       9        3.2    1\n', 'hidden': 'data-hidden', 'edit': 'false', 'question_label': '15.14.13'}" source="/home/david/runestone/books/thinkcpp/_sources/Chapter15/coding_practice.rst">
        </DataFileNode>
        <exercise xml:id=""><statement/><program interactive="" language="" xml:id=""/><TabNode tabname="Input File" tabnode_options="{'subchapter': 'coding_practice', 'chapter': 'Chapter15', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Input File'}">
                <p>Below are the contents of the input file.</p>
                <pre>First    Last       Grade    GPA    Age
Alex     Jones      9        3.4    14
Beth     Hamilton   12       3.7    18
Charles  White      11       3.5    16
Daniel   Kim        10       3.8    16
Ethan    Brooks     11       3.9    17
Faith    Flemmings  10       3.0    15
Gina     Zhou       9        3.2    14</pre>
            </TabNode><solution>
                Below is one way to implement this program. We create an ifstream object
                    to open our file. We check to make sure the file is opened correctly before
                    we read the data values into corresponding variables. We check if the GPA
                    is at least 3.5, and print the data values to the terminal if so.

    <program xml:id="cp_15_AC_7a" language="cpp">
    
        <input>
#include &lt;iostream&gt;
#include &lt;fstream&gt;
using namespace std;

int main() {
    ifstream infile("class_data.txt");
    string fname, lname;
    int grade, age;
    double gpa;
    if (!infile.good()) {
        cout &lt;&lt; "Error. Unable to open file." &lt;&lt; endl;
        exit(1);
    }
    getline(infile, fname);
    while (infile &gt;&gt; fname &gt;&gt; lname &gt;&gt; grade &gt;&gt; gpa &gt;&gt; age) {
        if (gpa &gt;= 3.5) {
            cout &lt;&lt; fname &lt;&lt; '\t' &lt;&lt; lname &lt;&lt; '\t' &lt;&lt; grade
                 &lt;&lt; '\t' &lt;&lt; gpa &lt;&lt; '\t' &lt;&lt; age &lt;&lt; endl;
        }
    }
}
        </input>
<tests>


</tests>

    </program>
            
                <p>Below is one way to implement this program. We create an <c>ifstream</c> object
                    to open our file. We check to make sure the file is opened correctly before
                    we read the data values into corresponding variables. We check if the GPA
                    is at least 3.5, and print the data values to the terminal if so.</p>

    
            </solution></exercise>
        <DataFileNode line="351" runestone_options="{'fromfile': 'shrimp.txt', 'hide': None, 'subchapter': 'coding_practice', 'chapter': 'Chapter15', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'divid': 'shrimp.txt', 'qnumber': 'Q-19', 'cols': 56, 'rows': 20, 'filecontent': &quot;There's pineapple shrimp, lemon shrimp, coconut shrimp, \npepper shrimp, shrimp soup, shrimp stew, shrimp salad, \nshrimp and potatoes, shrimp burger, shrimp sandwich. \nThat- that's about it\n&quot;, 'hidden': 'data-hidden', 'edit': 'false', 'question_label': '15.14.16'}" source="/home/david/runestone/books/thinkcpp/_sources/Chapter15/coding_practice.rst">
        </DataFileNode>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=cp_15_AC_8_sq data-questionlist='cp_15_AC_8q, cp_15_AC_8q_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: cp_15_AC_8q, cp_15_AC_8q_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
        <DataFileNode line="359" runestone_options="{'fromfile': 'mult_table.txt', 'hide': None, 'subchapter': 'coding_practice', 'chapter': 'Chapter15', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'divid': 'mult_table.txt', 'qnumber': 'Q-21', 'cols': 18, 'rows': 20, 'filecontent': 'Student output fil\n', 'hidden': 'data-hidden', 'edit': 'false', 'question_label': '15.14.17'}" source="/home/david/runestone/books/thinkcpp/_sources/Chapter15/coding_practice.rst">
        </DataFileNode>
        <exercise xml:id=""><statement/><program interactive="" language="" xml:id=""/><solution>
                Below is one way to implement this program. We create a 10x10 matrix
                    and fill in the products. Then we traverse through the matrix and output
                    the values into the output file.

    <program xml:id="cp_15_AC_9a" language="cpp">
    
        <input>
#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;vector&gt;
using namespace std;

int main() {
    ofstream outfile("mult_table.txt");
    if (!outfile.good()) {
        cout &lt;&lt; "Error. Unable to open file." &lt;&lt; endl;
        exit(1);
    }
    vector&lt;int&gt; rows(10);
    vector&lt;vector&lt;int&gt; &gt; mat;
    for (int i = 0; i &lt; 10; ++i) {
        mat.push_back(rows);
    }
    for (int i = 0; i &lt; 10; ++i) {
        for (int j = 0; i &lt; 10; ++j) {
            matrix[i][j] = (i + 1) * (j + 1);
        }
    }
    for (int i = 0; i &lt; 10; ++i) {
        for (int j = 0; i &lt; 10; ++j) {
            outfile &lt;&lt; matrix[i][j] &lt;&lt; '\t';
        }
        cout &lt;&lt; endl;
    }
}
        </input>
<tests>


</tests>

    </program>
            
                <p>Below is one way to implement this program. We create a 10x10 matrix
                    and fill in the products. Then we traverse through the matrix and output
                    the values into the output file.</p>

    
            </solution></exercise>
        <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=cp_15_AC_10_sq data-questionlist='cp_15_AC_10q, cp_15_AC_10q_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: cp_15_AC_10q, cp_15_AC_10q_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
    </section>

