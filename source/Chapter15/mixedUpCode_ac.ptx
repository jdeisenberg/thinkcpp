<section xml:id="chapter15_activecode-exercises">
        <title>Activecode Exercises</title>
        <p>Answer the following <term>Activecode</term> questions to assess what you have learned in this chapter.</p>
        <exercise xml:id=""><statement>
                <p>We have a file called &#8220;locations.txt&#8221; that we want to read data from.
                    Check to make sure that the file was opened properly; if it wasn&#8217;t,
                    display an error message and exit with a status of 1.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_15_1_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write code that makes sure the file was opened properly.

    
    <program xml:id="mucp_15_1_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
    ifstream infile("locations.txt");
    if (infile.good() == false) {
        cout &lt;&lt; "Unable to open the file." &lt;&lt; endl;
        exit(1);
    }
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_15_1_ac_a">
    <statement>
                <p>Below is one way to write code that makes sure the file was opened properly.</p>

    </statement>
    <program xml:id="mucp_15_1_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
    ifstream infile("locations.txt");
    if (infile.good() == false) {
        cout &lt;&lt; "Unable to open the file." &lt;&lt; endl;
        exit(1);
    }
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Let&#8217;s write a program that prompts the user for a filename and
                    opens that file.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_15_2_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the program.

    
    <program xml:id="mucp_15_2_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
    string filename;
    cout &lt;&lt; "Enter the name of the file: ";
    cin &gt;&gt; filename;
    ifstream infile(filename.c_str());
    if (infile.good() == false) {
        cout &lt;&lt; "Unable to open the file." &lt;&lt; endl;
        exit(1);
    }
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_15_2_ac_a">
    <statement>
                <p>Below is one way to write the program.</p>

    </statement>
    <program xml:id="mucp_15_2_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
    string filename;
    cout &lt;&lt; "Enter the name of the file: ";
    cin &gt;&gt; filename;
    ifstream infile(filename.c_str());
    if (infile.good() == false) {
        cout &lt;&lt; "Unable to open the file." &lt;&lt; endl;
        exit(1);
    }
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Now let&#8217;s write some output to a file. Write a program that prompts
                    a user for a list of 5 integers separated by spaces, calculates the
                    average of those integers, and outputs &#8220;The average is <c>average</c>&#8221;
                    to an output file called &#8220;average.txt&#8221;. Put the necessary blocks
                    of code in the correct order. Declare the output file first and
                    check that it is opened correctly.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_15_3_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the program.

    
    <program xml:id="mucp_15_3_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
   ofstream outfile("average.txt");
   if (outfile.good() == false) {
      cout &lt;&lt; "Unable to open the file." &lt;&lt; endl;
      exit(1);
   }
   int sum = 0;
   int n1, n2, n3, n4, n5;
   cout &lt;&lt; "Enter five integers separated by spaces: ";
   cin &gt;&gt; n1 &gt;&gt; n2 &gt;&gt; n3 &gt;&gt; n4 &gt;&gt; n5;
   sum = n1 + n2 + n3 + n4 + n5;
   outfile &lt;&lt; "The average is " &lt;&lt; sum / 5.0 &lt;&lt; endl;
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_15_3_ac_a">
    <statement>
                <p>Below is one way to write the program.</p>

    </statement>
    <program xml:id="mucp_15_3_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
   ofstream outfile("average.txt");
   if (outfile.good() == false) {
      cout &lt;&lt; "Unable to open the file." &lt;&lt; endl;
      exit(1);
   }
   int sum = 0;
   int n1, n2, n3, n4, n5;
   cout &lt;&lt; "Enter five integers separated by spaces: ";
   cin &gt;&gt; n1 &gt;&gt; n2 &gt;&gt; n3 &gt;&gt; n4 &gt;&gt; n5;
   sum = n1 + n2 + n3 + n4 + n5;
   outfile &lt;&lt; "The average is " &lt;&lt; sum / 5.0 &lt;&lt; endl;
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>We are given a file called &#8220;data.txt&#8221; with an unknown number of
                    <c>double</c> values. Write a program that finds the minimum, maximum,
                    and number of data and outputs these values to a file called
                    &#8220;summary.txt&#8221;.
                    Declare the input and output files first, and check to see that
                    both are opened correctly before dealing with data. Increment the
                    number of data points before checking for the min and max.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_15_4_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the code.

    
    <program xml:id="mucp_15_4_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
    ifstream infile("data.txt");
    ofstream outfile("summary.txt");
    if (infile.good() == false || outfile.good() == false) {
        cout &lt;&lt; "Unable to open a file." &lt;&lt; endl;
        exit(1);
    }
    int numData = 1;
    double min, max, value;
    infile &gt;&gt; value;
    min = value;
    max = value;
    while (infile &gt;&gt; value) {
        ++numData;
        if (value &lt; min) { min = value; }
        if (value &gt; max) { max = value; }
    }
    outfile &lt;&lt; "Number of data: " &lt;&lt; numData &lt;&lt; ", min: " &lt;&lt; min &lt;&lt; ", max: " &lt;&lt; max &lt;&lt; endl;
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_15_4_ac_a">
    <statement>
                <p>Below is one way to write the code.</p>

    </statement>
    <program xml:id="mucp_15_4_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
    ifstream infile("data.txt");
    ofstream outfile("summary.txt");
    if (infile.good() == false || outfile.good() == false) {
        cout &lt;&lt; "Unable to open a file." &lt;&lt; endl;
        exit(1);
    }
    int numData = 1;
    double min, max, value;
    infile &gt;&gt; value;
    min = value;
    max = value;
    while (infile &gt;&gt; value) {
        ++numData;
        if (value &lt; min) { min = value; }
        if (value &gt; max) { max = value; }
    }
    outfile &lt;&lt; "Number of data: " &lt;&lt; numData &lt;&lt; ", min: " &lt;&lt; min &lt;&lt; ", max: " &lt;&lt; max &lt;&lt; endl;
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>You are given a file called &#8220;employee_data.txt&#8221; and you want to store
                    the information from that file into a vector of data. The file contains
                    information about an employee&#8217;s first and last name, age, phone number,
                    and email. Write the definition of an <c>Employee</c> before you write your
                    <c>main</c> function. Open and check the file before working with the data.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_15_5_ac_q_editor">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to define Employee.

    
    <program xml:id="mucp_15_5_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
using namespace std;

struct Employee {
    string fname;
    string lname;
    int age;
    int phone;
    string email;
    Employee(string f, string l, int a, int p, string e) {
        fname = f;
        lname = l;
        age = a;
        phone = p;
        email = e;
    }
};

int main() {
    ifstream infile("employee_data.txt");
    if (infile.good() == false) {
        cout &lt;&lt; "Unable to open the file." &lt;&lt; endl;
        exit(1);
    }
    vector&lt;Employee&gt; data;
    string fname, lname, email;
    int age, phone;
    while (infile &gt;&gt; fname &gt;&gt; lname &gt;&gt; age &gt;&gt; phone &gt;&gt; email) {
        Employee e(fname, lname, age, phone, email);
        data.push_back(e);
    }
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_15_5_ac_a">
    <statement>
                <p>Below is one way to define <c>Employee</c>.</p>

    </statement>
    <program xml:id="mucp_15_5_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
using namespace std;

struct Employee {
    string fname;
    string lname;
    int age;
    int phone;
    string email;
    Employee(string f, string l, int a, int p, string e) {
        fname = f;
        lname = l;
        age = a;
        phone = p;
        email = e;
    }
};

int main() {
    ifstream infile("employee_data.txt");
    if (infile.good() == false) {
        cout &lt;&lt; "Unable to open the file." &lt;&lt; endl;
        exit(1);
    }
    vector&lt;Employee&gt; data;
    string fname, lname, email;
    int age, phone;
    while (infile &gt;&gt; fname &gt;&gt; lname &gt;&gt; age &gt;&gt; phone &gt;&gt; email) {
        Employee e(fname, lname, age, phone, email);
        data.push_back(e);
    }
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>You are given a file but it appears that someone&#8217;s capslock key was stuck
                    because everything is in uppercase. Write a program that takes the input from
                    the file &#8220;UPPER.txt&#8221; and converts all the words to lowercase and prints
                    out the modified message to a file called &#8220;lower.txt&#8221;. Write the definition
                    of the function <c>toLower</c> first. Separate the words with spaces.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_15_6_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the program and toLower function.

    
    <program xml:id="mucp_15_6_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

string upperToLower(string upper) {
    for (size_t i = 0; i &lt; upper.length(); ++i) {
        upper[i] = toupper(upper[i]);
    }
    return upper;
}

int main() {
    ifstream infile("UPPER.txt");
    ofstream outfile("lower.txt");
    if (infile.good() == false || outfile.good() == false) {
        cout &lt;&lt; "Unable to open a file." &lt;&lt; endl;
        exit(1);
    }
    string word;
    while (infile &gt;&gt; word) {
        string upper = upperToLower(word);
        outfile &lt;&lt; upper &lt;&lt; " ";
    }
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_15_6_ac_a">
    <statement>
                <p>Below is one way to write the program and <c>toLower</c> function.</p>

    </statement>
    <program xml:id="mucp_15_6_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

string upperToLower(string upper) {
    for (size_t i = 0; i &lt; upper.length(); ++i) {
        upper[i] = toupper(upper[i]);
    }
    return upper;
}

int main() {
    ifstream infile("UPPER.txt");
    ofstream outfile("lower.txt");
    if (infile.good() == false || outfile.good() == false) {
        cout &lt;&lt; "Unable to open a file." &lt;&lt; endl;
        exit(1);
    }
    string word;
    while (infile &gt;&gt; word) {
        string upper = upperToLower(word);
        outfile &lt;&lt; upper &lt;&lt; " ";
    }
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Nobody ever put a limit on how many files we can work with. Does
                    this mean we can open two or more files at once? Yes we can!
                    Write a program that combines two files &#8220;odds.txt&#8221; and &#8220;evens.txt&#8221;
                    into one output file &#8220;numbers.txt&#8221;. You should combine them in a
                    way such that &#8220;numbers.txt&#8221; contains the first odd number then
                    the first even number then the second odd number and so on. You
                    are guaranteed that there are equal amounts of odd and even numbers.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_15_7_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the prgram.

    
    <program xml:id="mucp_15_7_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
    ifstream odds("odds.txt");
    ifstream evens("evens.txt");
    ofstream outfile("numbers.txt");
    if (!odds.good() || !evens.good() || !outfile.good()) {
        cout &lt;&lt; "Unable to open a file." &lt;&lt; endl;
        exit(1);
    }
    int odd, even;
    while (odds &gt;&gt; odd &amp;&amp; evens &gt;&gt; even) {
        outfile &lt;&lt; odd &lt;&lt; " " &lt;&lt; even &lt;&lt; " ";
    }
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_15_7_ac_a">
    <statement>
                <p>Below is one way to write the prgram.</p>

    </statement>
    <program xml:id="mucp_15_7_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
    ifstream odds("odds.txt");
    ifstream evens("evens.txt");
    ofstream outfile("numbers.txt");
    if (!odds.good() || !evens.good() || !outfile.good()) {
        cout &lt;&lt; "Unable to open a file." &lt;&lt; endl;
        exit(1);
    }
    int odd, even;
    while (odds &gt;&gt; odd &amp;&amp; evens &gt;&gt; even) {
        outfile &lt;&lt; odd &lt;&lt; " " &lt;&lt; even &lt;&lt; " ";
    }
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>In chapter 15.7 we defined the <c>Set</c> data structure.
                    Write a function <c>vectorToSet</c> which takes a <c>vector</c>
                    of data and returns a <c>Set</c> object with the data.
                    Put the <c>Set</c> definition first in your answer.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_15_8_ac_q_editor">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the vectorToSet function.

    
    <program xml:id="mucp_15_8_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

class Set {
    private:
        vector&lt;string&gt; elements;
        int numElements;

    public:
        Set (int n);

        int getNumElements () const;
        string getElement (int i) const;
        int find (const string&amp; s) const;
        int add (const string&amp; s);
};

Set vectorToSet(vector&lt;string&gt; data) {
    Set s(data.size());
    for (size_t i = 0; i &lt; data.size(); ++i) {
        s.add(data[i]);
    }
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_15_8_ac_a">
    <statement>
                <p>Below is one way to write the <c>vectorToSet</c> function.</p>

    </statement>
    <program xml:id="mucp_15_8_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

class Set {
    private:
        vector&lt;string&gt; elements;
        int numElements;

    public:
        Set (int n);

        int getNumElements () const;
        string getElement (int i) const;
        int find (const string&amp; s) const;
        int add (const string&amp; s);
};

Set vectorToSet(vector&lt;string&gt; data) {
    Set s(data.size());
    for (size_t i = 0; i &lt; data.size(); ++i) {
        s.add(data[i]);
    }
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Let&#8217;s write the struct definition for a <c>Matrix</c>! The underlying
                    data structure is a <c>vector</c> of vectors of <c>int``s. Write
the constructor and ``at</c> function, which returns the data stored
                    at a given row and column.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_15_9_ac_q_editor">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to define Matrix and write the functions.

    
    <program xml:id="mucp_15_9_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

class Matrix {
    private:
        vector&lt;vector&lt;int&gt; &gt; elements;
    public:
        Matrix (int numRows, int numCols) {
            vector&lt;int&gt; row(numCols);
            for (int i = 0; i &lt; numRows; ++i) {
            elements.push_back(row);
            }
        }
        int at(int row, int col) {
            return elements[row][col];
        }
};
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_15_9_ac_a">
    <statement>
                <p>Below is one way to define <c>Matrix</c> and write the functions.</p>

    </statement>
    <program xml:id="mucp_15_9_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

class Matrix {
    private:
        vector&lt;vector&lt;int&gt; &gt; elements;
    public:
        Matrix (int numRows, int numCols) {
            vector&lt;int&gt; row(numCols);
            for (int i = 0; i &lt; numRows; ++i) {
            elements.push_back(row);
            }
        }
        int at(int row, int col) {
            return elements[row][col];
        }
};
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Now that we have the basic structure of a <c>Matrix</c>, let&#8217;s write
                    a function that allows us to add data to a matrix. Write the <c>Matrix</c>
                    member function <c>setData</c> which takes a row and column index as well
                    as a data value and stores the data value in the <c>Matrix</c> at the
                    given location. Then read data in from a file called <c>data.txt</c>.
                    The first line contains the number of rows and columns, separated by a space.
                    Data values begin on the next line.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_15_10_ac_q_editor">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to setData member function.

    
    <program xml:id="mucp_15_10_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

class Matrix {
    private:
        vector&lt;vector&lt;int&gt; &gt; elements;
    public:
        Matrix (int numRows, int numCols) {
            vector&lt;int&gt; row(numCols);
            for (int i = 0; i &lt; numRows; ++i) {
            elements.push_back(row);
            }
        }
        int at(int row, int col) {
            return elements[row][col];
        }
};

void Matrix::setData (int row, int col, int value) {
    elements[row][col] = value;
}

int main() {
    ifstream infile("data.txt");
    if (!odds.good() || !evens.good() || !outfile.good()) {
        cout &lt;&lt; "Unable to open a file." &lt;&lt; endl;
        exit(1);
    }
    int numRows, numCols, data;
    infile &gt;&gt; numRows &gt;&gt; numCols;
    Matrix mat(numRows, numCols);
    while (infile &gt;&gt; data) {
        for (int i = 0; i &lt; numRows; ++i) {
            for (int j = 0; j &lt; numCols; ++j) {
            mat.setData(i, j, data);
            }
        }
    }
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_15_10_ac_a">
    <statement>
                <p>Below is one way to <c>setData</c> member function.</p>

    </statement>
    <program xml:id="mucp_15_10_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

class Matrix {
    private:
        vector&lt;vector&lt;int&gt; &gt; elements;
    public:
        Matrix (int numRows, int numCols) {
            vector&lt;int&gt; row(numCols);
            for (int i = 0; i &lt; numRows; ++i) {
            elements.push_back(row);
            }
        }
        int at(int row, int col) {
            return elements[row][col];
        }
};

void Matrix::setData (int row, int col, int value) {
    elements[row][col] = value;
}

int main() {
    ifstream infile("data.txt");
    if (!odds.good() || !evens.good() || !outfile.good()) {
        cout &lt;&lt; "Unable to open a file." &lt;&lt; endl;
        exit(1);
    }
    int numRows, numCols, data;
    infile &gt;&gt; numRows &gt;&gt; numCols;
    Matrix mat(numRows, numCols);
    while (infile &gt;&gt; data) {
        for (int i = 0; i &lt; numRows; ++i) {
            for (int j = 0; j &lt; numCols; ++j) {
            mat.setData(i, j, data);
            }
        }
    }
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
    </section>

