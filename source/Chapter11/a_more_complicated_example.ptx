<section xml:id="chapter11_a-more-complicated-example">
        <title>A more complicated example</title>
        <p>Although the process of transforming functions into member functions is
            mechanical, there are some oddities. For example, <c>after</c> operates on
            two <c>Time</c> structures, not just one, and we can&#8217;t make both of them
            implicit. Instead, we have to invoke the function on one of them and
            pass the other as an argument.</p>
        <p>Inside the function, we can refer to one of the them implicitly, but to
            access the instance variables of the other we continue to use dot
            notation.</p>
        <pre>bool Time::after (const Time&amp; time2) const {
  if (hour &gt; time2.hour) return true;
  if (hour &lt; time2.hour) return false;

  if (minute &gt; time2.minute) return true;
  if (minute &lt; time2.minute) return false;

  if (second &gt; time2.second) return true;
  return false;
}</pre>
        <p>To invoke this function:</p>
        <pre>if (doneTime.after (currentTime)) {
  cout &lt;&lt; "The bread will be done after it starts." &lt;&lt; endl;
}</pre>
        <p>You can almost read the invocation like English: &#8220;If the done-time is
            after the current-time, then&#8230;&#8221;</p>

<exercise label="more_complicated_example_AC_1">
    <statement>
        <p>The active code below is another practical example using the <c>after</c> function.
            Feel free to modify the time that school gets out, and the time that the track meet starts, if you wish!</p>

    </statement>
    <program xml:id="more_complicated_example_AC_1_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

struct Time {
    int hour, minute;
    double second;
    bool after (const Time&amp; time2) const;
};

int main() {
    Time end_school = { 2, 20, 0.0 };
    Time track_meet = { 1, 30, 0.0 };
    if (track_meet.after (end_school)) {
        cout &lt;&lt; "The track meet starts after school is dismissed." &lt;&lt; endl;
    }
    else {
        cout &lt;&lt; "The track meet starts before school gets out, athletes will get an early dismissal." &lt;&lt; endl;
    }
}

        </input>
<tests>

bool Time::after (const Time&amp; time2) const {
  if (hour &gt; time2.hour) return true;
  if (hour &lt; time2.hour) return false;

  if (minute &gt; time2.minute) return true;
  if (minute &lt; time2.minute) return false;

  if (second &gt; time2.second) return true;
  return false;
}
</tests>

    </program>
</exercise>

    <exercise label="more_complicated_example_1">
        <statement>

        <p>Q-2: Which is/are true about the <c>Time::after</c> member function?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>There is only one Time parameter.</p>
                </statement>
                <feedback>
                    <p>Incorrect! There are actually two Time parameters, one of them is implicit.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>The function operates on two Time objects.</p>
                </statement>
                <feedback>
                    <p>Correct! There are two Time objects - the implicit one and time2.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>The function is invoked on time2.</p>
                </statement>
                <feedback>
                    <p>Incorrect! The function is invoked on the implicit Time object.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>"hour" and "minute" refer to the hour and minute of the implicit Time object.</p>
                </statement>
                <feedback>
                    <p>Correct!</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="more_complicated_example_2">
        <statement>

        <p>Q-3: In a function that operates on <term>four</term> structures, how many of them are accessed with dot notation?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>One</p>
                </statement>
                <feedback>
                    <p>Incorrect! There is One implicit structure.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Two</p>
                </statement>
                <feedback>
                    <p>Incorrect! Keep in mind there are 4 structures and 1 is implicit.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Three</p>
                </statement>
                <feedback>
                    <p>Correct!  There is One implicit structure, and three structures that need to be accessed with dot notation.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Four</p>
                </statement>
                <feedback>
                    <p>Incorrect! We shouldn't need to use dot notation for all of them!</p>
                </feedback>
            </choice>
</choices>

    </exercise>
<exercise label="more_complicated_example_3" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>Create the <c>Dog::is_older()</c> function as it would be defined INSIDE of the <c>Dog</c> structure definition.  This function
            checks if the current <c>Dog</c> is older than another <c>Dog</c>.  The function is invoked on the current <c>Dog</c>.</p>
</statement>
<blocks><block order="3" correct="no">
<cline>bool Dog::is_older(const Dog&amp; dog, const Dog&amp; dog2) {                         </cline>
</block><block order="1">
<choice correct="yes"><cline>bool is_older(const Dog&amp; dog2) const {</cline>
</choice><choice><cline>bool is_older(Dog&amp; dog2) {                         </cline>
</choice></block><block order="8">
<choice correct="yes"><cline> if (age &gt; dog2.age) {</cline>
<cline>   return true;</cline>
<cline> }</cline>
</choice><choice><cline> if (dog.age &gt; dog2.age) {                         </cline>
<cline>   return true;</cline>
<cline> }</cline>
</choice></block><block order="9">
<cline> else {</cline>
<cline>   return false;</cline>
<cline> }</cline>
</block><block order="5">
<choice correct="yes"><cline>}</cline>
</choice><choice><cline>};                         </cline>
</choice></block><block order="7" correct="no">
<cline> Dog dog = *this;                         </cline>
</block><block order="4" correct="no">
<cline>bool Dog::is_older(const Dog&amp; dog2) {                         </cline>
</block></blocks></exercise>    </section>

