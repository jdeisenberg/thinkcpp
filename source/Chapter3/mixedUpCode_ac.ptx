<section xml:id="chapter3_activecode-exercises">
        <title>Activecode Exercises</title>
        <p>Answer the following <term>Activecode</term> questions to
            assess what you have learned in this chapter.</p>
        <exercise xml:id=""><statement>
                <p>Construct a function <c>printInteger</c> that correctly prints the integer conversion of the passed double.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="functions_p9_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
    double x = 3.14159265;
    printInteger(x);
}
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the printInteger function.

    
    <program xml:id="functions_p9_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void printInteger (double d) {
    d = int(d);
    cout &lt;&lt; d;
}

int main() {
    double x = 3.14159265;
    printInteger(x);
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="functions_p9_ac_a">
    <statement>
                <p>Below is one way to write the <c>printInteger</c> function.</p>

    </statement>
    <program xml:id="functions_p9_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void printInteger (double d) {
    d = int(d);
    cout &lt;&lt; d;
}

int main() {
    double x = 3.14159265;
    printInteger(x);
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Construct a function called <c>newLine</c> that takes no arguments and prints a blank line.  Then construct another function called <c>divider</c> that prints two blank lines separated by a line of &#8220;&#8230; &#8230; &#8230; &#8230;&#8221;</p>

    </statement><program interactive="activecode" language="cpp" xml:id="functions_p0_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() { // Implement the two functions
    newLine();
    divider();
}
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the two functions, newLine and divider.

    
    <program xml:id="functions_p0_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void newLine () {
    cout &lt;&lt; endl;
}  //newLine

void divider () {
    newLine ();  //first call
    cout &lt;&lt; ". . . . . . . . . . . . " &lt;&lt; endl;
    newLine ();  //second call
}  //divider

int main() { // Use the two functions
    newLine();
    divider();
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="functions_p0_ac_a">
    <statement>
                <p>Below is one way to write the two functions, <c>newLine</c> and <c>divider</c>.</p>

    </statement>
    <program xml:id="functions_p0_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void newLine () {
    cout &lt;&lt; endl;
}  //newLine

void divider () {
    newLine ();  //first call
    cout &lt;&lt; ". . . . . . . . . . . . " &lt;&lt; endl;
    newLine ();  //second call
}  //divider

int main() { // Use the two functions
    newLine();
    divider();
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Construct a function, <c>volumeCone</c>, that takes as inputs the radius then the height and correctly calculates the volume of a cone with as much precision as possible and prints the value to the terminal.  Use 3.14 for pi.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="functions_p1_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
    double r = 2.5;
    double h = 5.5;
    volumeCone(r,h);
}
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the volumeCone function.

    
    <program xml:id="functions_p1_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void volumeCone (double r, double h) {
    double vol = 1/3.0 * 3.14 * r * r * h;
    cout &lt;&lt; vol;
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="functions_p1_ac_a">
    <statement>
                <p>Below is one way to write the <c>volumeCone</c> function.</p>

    </statement>
    <program xml:id="functions_p1_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void volumeCone (double r, double h) {
    double vol = 1/3.0 * 3.14 * r * r * h;
    cout &lt;&lt; vol;
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Construct a function, <c>sineDegrees</c>, that prints the sin of an angle given in degrees. Use 3.14 for pi.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="functions_p3_ac_q_editor">

        <input>
#include &lt;iostream&gt;
#include &lt;cmath&gt;
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
    double degrees = 25.00;
    sineDegrees(degrees);
}
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the sineDegrees function.

    
    <program xml:id="functions_p3_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;cmath&gt;
using namespace std;

void sineDegrees (double d) {
    double r = d * (2 * 3.14) / 360.0;
    double sine = sin(r);
    cout &lt;&lt; sine;
}

int main() {
    double degrees = 25.00;
    sineDegrees(degrees);
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="functions_p3_ac_a">
    <statement>
                <p>Below is one way to write the <c>sineDegrees</c> function.</p>

    </statement>
    <program xml:id="functions_p3_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;cmath&gt;
using namespace std;

void sineDegrees (double d) {
    double r = d * (2 * 3.14) / 360.0;
    double sine = sin(r);
    cout &lt;&lt; sine;
}

int main() {
    double degrees = 25.00;
    sineDegrees(degrees);
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Construct a function, <c>finalPrice</c>, that prints the price (with 8% sales tax) of an item with after using a 30% off coupon.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="functions_p4_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
    double item = 200.50;
    finalPrice(item);
}
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the finalPrice function.

    
    <program xml:id="functions_p4_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void finalPrice (double item) {
    double discount = item * 0.30;
    double final = (item - discount) * 1.08;
    cout &lt;&lt; final;
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="functions_p4_ac_a">
    <statement>
                <p>Below is one way to write the <c>finalPrice</c> function.</p>

    </statement>
    <program xml:id="functions_p4_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void finalPrice (double item) {
    double discount = item * 0.30;
    double final = (item - discount) * 1.08;
    cout &lt;&lt; final;
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Suppose you have already defined a function called <c>sumOfSquares</c> which returns the sum of the squares of two numbers and <c>root</c> which returns the square root of a number.  Construct a function that calculates the hypotenuse of the right triangle and prints the three sidelengths.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="functions_p5_ac_q_editor">

        <input>
#include &lt;iostream&gt;
#include &lt;math.h&gt;
using namespace std;
// DO NOT MODIFY THIS CODE

double sumOfSquares ( double s2, double s1) {
    return (s2 * s2) + (s1 * s1);
}

double root ( double num ) {
    return sqrt(num);
}

// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><statement>
                <p>Below is one way to write the <c>sumOfSquares</c> and <c>root</c> functions.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="functions_p5_ac_a_editor">

        <input>
#include &lt;iostream&gt;
#include &lt;math.h&gt;
using namespace std;

double sumOfSquares ( double s2, double s1) {
    return (s2 * s2) + (s1 * s1);
}

double root ( double num ) {
    return sqrt(num);
}

int main () {
    double s1 = 4.8;
    double s2 = 3.8;
    double sqSum = sumOfSquares(s2, s1);
    double hyp = root(sqSum);
    cout &lt;&lt; "The sides of the triangle are: " &lt;&lt; s1 &lt;&lt; ", " &lt;&lt; s2 &lt;&lt; ", " &lt;&lt; hyp;
}
        </input>
<tests>


</tests>

    </program></exercise>
        <exercise xml:id=""><statement>
                <p>The chickens from the previous chapter are infuriated.  Construct a function, <c>eatMore</c>, that prints &#8220;Eat&#8221; on the first line, &#8220;More&#8221; on the second line, and the name of the passed animal on the fourth line, followed by an exclamation point.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="functions_p6_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
    string animal = "Chicken";
    eatMore(animal);
}
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the eatMore function.

    
    <program xml:id="functions_p6_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void eatMore (string animal) {
    cout &lt;&lt; "Eat";
    cout &lt;&lt; endl; cout &lt;&lt; "More" &lt;&lt; endl;
    cout &lt;&lt; endl;
    cout &lt;&lt; animal &lt;&lt; "!" &lt;&lt; endl;
}

int main() {
    string animal = "Chicken";
    eatMore(animal);
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="functions_p6_ac_a">
    <statement>
                <p>Below is one way to write the <c>eatMore</c> function.</p>

    </statement>
    <program xml:id="functions_p6_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void eatMore (string animal) {
    cout &lt;&lt; "Eat";
    cout &lt;&lt; endl; cout &lt;&lt; "More" &lt;&lt; endl;
    cout &lt;&lt; endl;
    cout &lt;&lt; animal &lt;&lt; "!" &lt;&lt; endl;
}

int main() {
    string animal = "Chicken";
    eatMore(animal);
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Construct a function, <c>printAmount</c>, that takes a dollar amount and cent amount and prints the total amount of money that you have. Hint: the mod operator &#8216;%&#8217; returns the remainder of a division.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="functions_p7_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
    int dollars = 45;
    int cents = 56;
    printAmount(dollars, cents);
}
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is onw way to write the printAmount function.

    
    <program xml:id="functions_p7_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void printAmount (int dollars, int cents) {
    int dollarTotal = dollars + cents / 100;
    double centTotal = cents % 100;
    cout &lt;&lt; "$" &lt;&lt; dollarTotal &lt;&lt; "." &lt;&lt; centTotal;
}

int main() {
    int dollars = 45;
    int cents = 56;
    printAmount(dollars, cents);
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="functions_p7_ac_a">
    <statement>
                <p>Below is onw way to write the <c>printAmount</c> function.</p>

    </statement>
    <program xml:id="functions_p7_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void printAmount (int dollars, int cents) {
    int dollarTotal = dollars + cents / 100;
    double centTotal = cents % 100;
    cout &lt;&lt; "$" &lt;&lt; dollarTotal &lt;&lt; "." &lt;&lt; centTotal;
}

int main() {
    int dollars = 45;
    int cents = 56;
    printAmount(dollars, cents);
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>In Michigan, the probability that it snows on any given day in the winter is about 14%.  The probability of having a snow day on any given day in the winter is about 4%.  The probability that is snows and you have a snow day is 8%.
                    Construct and call a function, <c>conditionalProb</c>, that calculates the probability of a having a snow day, given the fact that it will snow tonight.
                    For reference, the formula for conditional probability is: P(A|B) = P(B and A) / P(B).</p>

    </statement><program interactive="activecode" language="cpp" xml:id="functions_p8_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write and call the conditionalProb function.

    
    <program xml:id="functions_p8_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void conditionalProb (double B, double both) {
    double prob = both / B;
    cout &lt;&lt; prob;
} //conditionalProb

int main () {
    double pSnow = 0.14;
    double pBoth = 0.08;
    conditionalProb(pSnow, pBoth);
} //main
        </input>
<tests>


</tests>

    </program>

            

<exercise label="functions_p8_ac_a">
    <statement>
                <p>Below is one way to write and call the <c>conditionalProb</c> function.</p>

    </statement>
    <program xml:id="functions_p8_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void conditionalProb (double B, double both) {
    double prob = both / B;
    cout &lt;&lt; prob;
} //conditionalProb

int main () {
    double pSnow = 0.14;
    double pBoth = 0.08;
    conditionalProb(pSnow, pBoth);
} //main
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Your final grade is determined by a midterm component (each midterm is worth 20% of the grade) and a final component that is worth 60% of the grade. In order to avoid any discrepancies with students who&#8217;s grades are on the fence, your teacher follows this strict grading scale:
                    [0%,60%) = F, [60%, 70%) = D, [70%, 80%) = C, [80%, 90%) = B and [90%, 100%] = A. He does not round until the very end.
                    Construct a function, <c>finalGrade</c>, that determines a student&#8217;s final grade percentage according to this grading scheme and prints the result.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="functions_p2_ac_q_editor">

        <input>
#include &lt;iostream&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to construct the finalGrade function.

    
    <program xml:id="functions_p2_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void finalGrade (double m1, double m2, double f) {
    double m_comp = m1 * 0.2 + m2 * 0.2;
    double f_comp = f * 0.6;
    double final_grade = m_comp + f_comp;
    cout &lt;&lt; int(final_grade);
}

int main() {
    finalGrade(80,70,80);
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="functions_p2_ac_a">
    <statement>
                <p>Below is one way to construct the <c>finalGrade</c> function.</p>

    </statement>
    <program xml:id="functions_p2_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void finalGrade (double m1, double m2, double f) {
    double m_comp = m1 * 0.2 + m2 * 0.2;
    double f_comp = f * 0.6;
    double final_grade = m_comp + f_comp;
    cout &lt;&lt; int(final_grade);
}

int main() {
    finalGrade(80,70,80);
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
    </section>

