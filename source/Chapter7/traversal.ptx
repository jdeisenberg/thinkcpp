<section xml:id="chapter7_traversal">
        <title>Traversal</title>
        
        
        <p xml:id="chapter7_index-0">A common thing to do with a string is start at the beginning, select
            each character in turn, do something to it, and continue until the end.
            This pattern of processing is called a <term>traversal</term>. A natural way to
            encode a traversal is with a <c>while</c> statement.</p>

<exercise label="traversal_AC_1">
    <statement>
        <p>The active code below outputs each letter of string <c>fruit</c>
            using a while loop.</p>

    </statement>
    <program xml:id="traversal_AC_1_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;string&gt;
#include &lt;iostream&gt;
using namespace std;

int main() {
    int index = 0;
    string fruit = "apple";
    int lengthfruit = fruit.length();
    while (index &lt; lengthfruit) {
        char letter = fruit[index];
        cout &lt;&lt; letter &lt;&lt; endl;
        index = index + 1;
    }
}
        </input>
<tests>


</tests>

    </program>
</exercise>
        <p>This loop traverses the string and outputs each letter on a line by
            itself. Notice that the condition is <c>index &lt; lengthfruit</c>, which
            means that when <c>index</c> is equal to the length of the string, the
            condition is false and the body of the loop is not executed. The last
            character we access is the one with the index <c>fruit.length()-1</c>.</p>
        
        
        <p xml:id="chapter7_index-1">The name of the loop variable is <c>index</c>. An <term>index</term> is a variable
            or value used to specify one member of an ordered set, in this case the
            set of characters in the string. The index indicates (hence the name)
            which one you want. The set has to be ordered so that each letter has an
            index and each index refers to a single character.</p>
        <p>As an exercise, write a function that takes an <c>string</c> as an argument
            and that outputs the letters backwards, all on one line.</p>

<exercise label="traversal_AC_2">
    <statement>
        <p>Try writing the <c>reverseWord</c> function in the commented section
            of the active code below. If done correctly, the program should output &#8220;hello&#8221;
            backwards. If you get stuck, you can reveal the extra problem at the end for help.</p>

    </statement>
    <program xml:id="traversal_AC_2_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

void reverseWord (string word) {
    // ``reverseWord`` should take the letters of ``word``
    // and output them in reverse.
}

int main() {
    reverseWord("hello");
}
        </input>
<tests>


</tests>

    </program>
</exercise>
        <exercises line="72" runestone_options="{'showtitle': 'data-showtitle=&quot;Reveal Problem&quot;', 'hidetitle': 'data-hidetitle=&quot;Hide Problem&quot;', 'subchapter': 'traversal', 'chapter': 'Chapter7', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'divid': '7_5_1', 'instructoronly': '', 'is_dynamic': 'True'}" source="/home/david/runestone/books/thinkcpp/_sources/Chapter7/traversal.rst">
<exercise label="traversal_1" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
            <p>Let&#8217;s write the code for the <c>reverseWord</c> function. <c>reverseWord</c>
                should take a string as a parameter and output the letters backwards.</p>
</statement>
<blocks><block order="5">
<cline>void reverseWord (string input) {</cline>
</block><block order="7">
<choice correct="yes"><cline>  int x = input.length() - 1;</cline>
</choice><choice><cline>  int x = input.length();  </cline>
</choice></block><block order="2">
<choice correct="yes"><cline>  while (x &gt;= 0) {</cline>
</choice><choice><cline>  while (x &gt; 0) { </cline>
</choice></block><block order="4">
<cline>    cout &lt;&lt; input[x];</cline>
</block><block order="8">
<cline>    x = x - 1;</cline>
<cline>  }</cline>
<cline>}</cline>
</block><block order="3" correct="no">
<cline>    x = x + 1;</cline>
<cline>  }</cline>
<cline>} </cline>
</block></blocks></exercise>        </exercises>

    <exercise label="traversal_2">
        <statement>

        <p>Q-4: How many times is the letter o printed by the following statements?</p>
        <program language="cpp"><input>
string s = "coding rocks";
int i = 1;
int length = s.length();
while (i &lt; length) {
  cout &lt;&lt; s[i] &lt;&lt; endl;
  i = i + 2;
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>0</p>
                </statement>
                <feedback>
                    <p>i goes through the odd numbers starting at 1.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>1</p>
                </statement>
                <feedback>
                    <p>Yes, i goes through the odd numbers starting at 1.  o is at position 1 and 8.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>2</p>
                </statement>
                <feedback>
                    <p>There are 2 o characters but idx does not take on the correct index values for both.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="traversal_3">
        <statement>

        <p>Q-5: What is printed when the code is run?</p>
        <program language="cpp"><input>
string truth = "engr101";
int index = 0;
int counter = 0;
while ( index &lt; truth.length() ) {
  cout &lt;&lt; truth[index] &lt;&lt;" ";
  index = index + counter;
  counter = counter + 1;
}
</input></program>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>e e n r 1</p>
                </statement>
                <feedback>
                    <p>Correct! the values of index are 0 0 1 3 6. After this while loop ends.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>e e e e e</p>
                </statement>
                <feedback>
                    <p>We are updating the value of of <code>index</code>. Not doing so would make it an infinte loop!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>e e n r</p>
                </statement>
                <feedback>
                    <p>Recalculate the values of <code>index</code> at each stage and consider which ones are &lt; 7.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    </section>

