<section xml:id="chapter7_length">
        <title>Length</title>
        <p>To find the length of a string (number of characters), we can use the
            <c>length</c> function. The syntax for calling this function is a little
            different from what we&#8217;ve seen before.</p>

<exercise label="length_AC_1">
    <statement>
        <p>The active code below outputs the length of string <c>fruit</c>.</p>

    </statement>
    <program xml:id="length_AC_1_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
    string fruit = "Watermelon";
    int length;
    length = fruit.length();
    cout &lt;&lt; length &lt;&lt; endl;
}
        </input>
<tests>


</tests>

    </program>
</exercise>
        
        
        <p xml:id="chapter7_index-0">To describe this function call, we would say that we are <term>invoking</term>
            the length function on the string named <c>fruit</c>. This vocabulary may
            seem strange, but we will see many more examples where we invoke a
            function on an object. The syntax for function invocation is called &#8220;dot
            notation,&#8221; because the dot (period) separates the name of the object,
            <c>fruit</c>, from the name of the function, <c>length</c>.</p>
        <p><c>length</c> takes no arguments, as indicated by the empty parentheses
            <c>()</c>. The return value is an integer, in this case 6. Notice that it
            is legal to have a variable with the same name as a function.</p>
        <p>To find the last letter of a string, you might be tempted to try
            something like</p>
        <pre>int length = fruit.length();
char last = fruit[length];       // WRONG!!</pre>
        <p>That won&#8217;t work. The reason is that there is no 6th letter in
            <c>"banana"</c>. Since we started counting at 0, the 6 letters are numbered
            from 0 to 5. To get the last character, you have to subtract 1 from
            <c>length</c>.</p>
        <warning>
            <p>A common source of error involving strings and other arrays is indexing
                out of bounds. This is usually the result of forgetting to subtract 1 from
                <c>length</c>.</p>
        </warning>

<exercise label="length_AC_2">
    <statement>
        <p>The active code below outputs the last character in string <c>fruit</c>
            using the <c>length</c> function.</p>

    </statement>
    <program xml:id="length_AC_2_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
    string fruit = "Watermelon";
    int length = fruit.length();
    char last = fruit[length-1];
    cout &lt;&lt; last;
}
        </input>
<tests>


</tests>

    </program>
</exercise>

    <exercise label="length_1">
        <statement>

        <p>Q-3: What is printed by the following statements?</p>
        <program language="cpp"><input>
string s = "coding rocks";
cout &lt;&lt; s.length() &lt;&lt; endl;
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>11</p>
                </statement>
                <feedback>
                    <p>The space counts as a character.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>12</p>
                </statement>
                <feedback>
                    <p>Yes, there are 12 characters in the string.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="length_2">
        <statement>

        <p>Q-4: What is printed by the following statements?</p>
        <program language="cpp"><input>
string s = "coding rocks";
cout &lt;&lt; (s[s.length()-5]) &lt;&lt; endl;
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>o</p>
                </statement>
                <feedback>
                    <p>Take a look at the index calculation again, s.length()-5.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>r</p>
                </statement>
                <feedback>
                    <p>Yes, s.length() is 12 and 12-5 is 7.  Use 7 as index and remember to start counting with 0.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>s</p>
                </statement>
                <feedback>
                    <p>s is at index 11.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Error, s.length() is 12 and there is no index 12.</p>
                </statement>
                <feedback>
                    <p>You subtract 5 before using the index operator so it will work.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
<exercise label="length_3" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>Construct a block of code that correctly implements the accumulator pattern, with <c>course</c> being the first variable initialized.</p>
</statement>
<blocks><block order="1" correct="no">
<cline>int main() {</cline>
<cline>   string course = "Programming";</cline>
<cline>   int num_chars;</cline>
<cline>   string num_chars; </cline>
<cline>   num_chars = course.length();</cline>
<cline>   num_chars = length(course); </cline>
<cline>   cout &lt;&lt; num_chars &lt;&lt; endl;</cline>
<cline>}</cline>
</block></blocks></exercise>    </section>

