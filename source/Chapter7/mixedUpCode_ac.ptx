<section xml:id="chapter7_activecode-exercises">
        <title>Activecode Exercises</title>
        <p>Answer the following <term>Activecode</term> questions to
            assess what you have learned in this chapter.</p>
        <exercise xml:id=""><statement>
                <p>Write a program that prints the 4th character of word,
                    and finds and replaces all instances of &#8216;i&#8217; with &#8216;e&#8217;.
                    Finally, print out the string.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_7_1_ac_q_editor">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the program using the word &#8216;irritating&#8217; as the string.

    
    <program xml:id="mucp_7_1_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

int main() {
    string word = "irritating";
    cout &lt;&lt; word[3] &lt;&lt; endl;
    while ((int)word.find('i') != -1) {
        word[word.find('i')] = 'e';
    }
    cout &lt;&lt; word &lt;&lt; endl;
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_7_1_ac_a">
    <statement>
                <p>Below is one way to write the program using the word &#8216;irritating&#8217; as the string.</p>

    </statement>
    <program xml:id="mucp_7_1_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

int main() {
    string word = "irritating";
    cout &lt;&lt; word[3] &lt;&lt; endl;
    while ((int)word.find('i') != -1) {
        word[word.find('i')] = 'e';
    }
    cout &lt;&lt; word &lt;&lt; endl;
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>An anagram is a play on words by rearranging the letters of the original words
                    to form new words. For example, the letters in &#8220;listen&#8221; can be rearranged to
                    make &#8220;silent&#8221;. Write a program that rearranges &#8220;night&#8221; into &#8220;thing&#8221; and prints the anagram.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_7_2_ac_q_editor">

        <input>
#inlcude &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the program.

    
    <program xml:id="mucp_7_2_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

int main() {
    string original = "night";
    string anagram = original;
    anagram[0] = original[original.find('t')];
    anagram[1] = original[original.find('h')];
    anagram[2] = original[original.find('i')];
    anagram[3] = original[original.find('n')];
    anagram[4] = original[original.find('g')];
    cout &lt;&lt; anagram;
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_7_2_ac_a">
    <statement>
                <p>Below is one way to write the program.</p>

    </statement>
    <program xml:id="mucp_7_2_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

int main() {
    string original = "night";
    string anagram = original;
    anagram[0] = original[original.find('t')];
    anagram[1] = original[original.find('h')];
    anagram[2] = original[original.find('i')];
    anagram[3] = original[original.find('n')];
    anagram[4] = original[original.find('g')];
    cout &lt;&lt; anagram;
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Let&#8217;s write the function <c>longerString</c>, which takes two parameters,
                    first and second. If first has more letters
                    than second, longerString prints &#8220;first is longer than second&#8221;,
                    and vice versa. If they have the same number of letters, longerString
                    prints &#8220;first and second are the same length&#8221;.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_7_3_ac_q_editor">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
    longerString("longer", "string");
    longerString("string", "second");
}
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the function longerString.

    
    <program xml:id="mucp_7_3_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

void longerString (string first, string second) {
    if (first.length() &gt; second.length()) {
        cout &lt;&lt; first &lt;&lt; " is longer than " &lt;&lt; second &lt;&lt; endl;
    }
    else if (first.length() &lt; second.length()) {
        cout &lt;&lt; second &lt;&lt; " is longer than " &lt;&lt; first &lt;&lt; endl;
    }
    else {
        cout &lt;&lt; first &lt;&lt; " and " &lt;&lt; second &lt;&lt; " are the same length" &lt;&lt; endl;
    }
}

int main() {
    longerString("longer", "string");
    longerString("string", "second");
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_7_3_ac_a">
    <statement>
                <p>Below is one way to write the function <c>longerString</c>.</p>

    </statement>
    <program xml:id="mucp_7_3_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

void longerString (string first, string second) {
    if (first.length() &gt; second.length()) {
        cout &lt;&lt; first &lt;&lt; " is longer than " &lt;&lt; second &lt;&lt; endl;
    }
    else if (first.length() &lt; second.length()) {
        cout &lt;&lt; second &lt;&lt; " is longer than " &lt;&lt; first &lt;&lt; endl;
    }
    else {
        cout &lt;&lt; first &lt;&lt; " and " &lt;&lt; second &lt;&lt; " are the same length" &lt;&lt; endl;
    }
}

int main() {
    longerString("longer", "string");
    longerString("string", "second");
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Let&#8217;s write the code for the <c>cipherText</c> function. cipherText
                    should be a void function that takes the string input as a parameter,
                    increases the value of each character by 1 (i.e. &#8220;bad&#8221; turns into &#8220;cbe&#8221;),
                    and prints the encrypted string.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_7_4_ac_q_editor">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
    cipherText("bad");
}
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the function cipherText.

    
    <program xml:id="mucp_7_4_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

void cipherText (string input) {
    int i = 0;
    while ((unsigned)i &lt; input.length()) {
        input[i] = input[i] + 1;
        i++;
    }
    cout &lt;&lt; input;
}

int main() {
    cipherText("bad");
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_7_4_ac_a">
    <statement>
                <p>Below is one way to write the function <c>cipherText</c>.</p>

    </statement>
    <program xml:id="mucp_7_4_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

void cipherText (string input) {
    int i = 0;
    while ((unsigned)i &lt; input.length()) {
        input[i] = input[i] + 1;
        i++;
    }
    cout &lt;&lt; input;
}

int main() {
    cipherText("bad");
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Write a program that prints out the number of occurences of the character &#8216;t&#8217;
                    in the string tongue_twister, with declaration in the order of <c>tongue_twister</c>, <c>count</c>, and <c>i</c>.
                    Declare the string tongue_twister as &#8216;twelve twins twirled twelve twigs.&#8217;</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_7_5_ac_q_editor">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the program.

    
    <program xml:id="mucp_7_5_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

int main() {
    string tongue_twister = "twelve twins twirled twelve twigs";
    int count = 0;
    int i = 0;
    while (i &lt; (int)tongue_twister.length()) {
        if (tongue_twister[i] == 't') {
            count++;
        }
        i++;
    }
    cout &lt;&lt; count;
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_7_5_ac_a">
    <statement>
                <p>Below is one way to write the program.</p>

    </statement>
    <program xml:id="mucp_7_5_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

int main() {
    string tongue_twister = "twelve twins twirled twelve twigs";
    int count = 0;
    int i = 0;
    while (i &lt; (int)tongue_twister.length()) {
        if (tongue_twister[i] == 't') {
            count++;
        }
        i++;
    }
    cout &lt;&lt; count;
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Write a program that prints out the index of the second instance of the
                    character &#8216;i&#8217;. Use <c>string quote = "Your time is limited, so don't waste it living someone else's life.</c></p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_7_6_ac_q_editor">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the program.

    
    <program xml:id="mucp_7_6_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

int main() {
    string quote = "Your time is limited, so don't waste it living someone else's life.";
    int first = quote.find("i");
    int index = find (quote, 'i', first + 1);
    cout &lt;&lt; index;
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_7_6_ac_a">
    <statement>
                <p>Below is one way to write the program.</p>

    </statement>
    <program xml:id="mucp_7_6_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

int main() {
    string quote = "Your time is limited, so don't waste it living someone else's life.";
    int first = quote.find("i");
    int index = find (quote, 'i', first + 1);
    cout &lt;&lt; index;
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Deep in the forest live the 7 dwarves named Sorty, Torty, Vorty,
                    Worty, Xorty, Yorty, and Zorty. Write a program that prints
                    out each of their names.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_7_7_ac_q_editor">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
// YOUR CODE HERE
        </input>
<tests>


</tests>

    </program><solution>


    
                Below is one way to write the program.

    
    <program xml:id="mucp_7_7_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

int main() {
    string suffix = "orty";
    char letter = 'S';
    while (letter &lt;= 'Z') {
        if (letter != 'U') {
            cout &lt;&lt; letter + suffix &lt;&lt; endl;
        }
        letter++;
    }
}
        </input>
<tests>


</tests>

    </program>

            

<exercise label="mucp_7_7_ac_a">
    <statement>
                <p>Below is one way to write the program.</p>

    </statement>
    <program xml:id="mucp_7_7_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

int main() {
    string suffix = "orty";
    char letter = 'S';
    while (letter &lt;= 'Z') {
        if (letter != 'U') {
            cout &lt;&lt; letter + suffix &lt;&lt; endl;
        }
        letter++;
    }
}
        </input>
<tests>


</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>On the strange planet of Noes, there&#8217;s a law that prohibits the usage of the letter &#8220;e&#8221;.
                    As a result, they hired you to write a function called <c>censorE</c> that replaces all occurences
                    of the letter &#8220;e&#8221; in a string with an asterisk and returns the censored string. For example,
                    if the input is &#8220;hello world&#8221;, the function returns &#8220;h*llo world&#8221;.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_7_8_ac_q_editor">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
// YOUR CODE HERE


        </input>
<tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("censorE function") {
    REQUIRE(censorE("after") == "aft*r");
    REQUIRE(censorE("hello world") == "h*llo world");
    REQUIRE(censorE("censor") == "c*nsor");
}
</tests>

    </program><solution>


    
                Below is one way to write the censorE function.

    
    <program xml:id="mucp_7_8_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

string censorE (string input) {
    int i = 0;
    while ((unsigned)i &lt; input.length()) {
        if (input[i] == 'e') {
            input[i] = '*';
        }
        i++;
    }
    return input;
}

        </input>
<tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("censorE function") {
    REQUIRE(censorE("after") == "aft*r");
    REQUIRE(censorE("hello world") == "h*llo world");
    REQUIRE(censorE("censor") == "c*nsor");
}
</tests>

    </program>

            

<exercise label="mucp_7_8_ac_a">
    <statement>
                <p>Below is one way to write the censorE function.</p>

    </statement>
    <program xml:id="mucp_7_8_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

string censorE (string input) {
    int i = 0;
    while ((unsigned)i &lt; input.length()) {
        if (input[i] == 'e') {
            input[i] = '*';
        }
        i++;
    }
    return input;
}

        </input>
<tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("censorE function") {
    REQUIRE(censorE("after") == "aft*r");
    REQUIRE(censorE("hello world") == "h*llo world");
    REQUIRE(censorE("censor") == "c*nsor");
}
</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Your work for the planet of Noes impressed the nearby planets of Noas, Nois, Noos, and Nous.
                    They want you to write different functions that censor out each planet&#8217;s corresponding forbidden letter.
                    However, your galaxy brain knows better than to write a different function for each planet.
                    Using generalization, write the function <c>censorLetter</c> which takes input and a char to censor
                    as parameters and returns a censored string. For example, censorLetter(&#8220;Bye world&#8221;, &#8216;o&#8217;) returns the
                    string &#8220;Bye w*rld&#8221;.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_7_9_ac_q_editor">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
// YOUR CODE HERE


        </input>
<tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("censorLetter function") {
    REQUIRE(censorLetter("Bye world", 'o') == "Bye w*rld");
    REQUIRE(censorLetter("Hello world", 'l') == "He**o wor*d");
    REQUIRE(censorLetter("Goodbye world", 'd') == "Goo*bye worl*");
}
</tests>

    </program><solution>


    
                Below is one way to write the censorLetter function.

    
    <program xml:id="mucp_7_9_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

string censorLetter (string input, char letter) {
    int i = 0;
    while ((unsigned)i &lt; input.length()) {
        if (input[i] == letter) {
            input[i] = '*';
        }
        i++;
    }
    return input;
}

        </input>
<tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("censorLetter function") {
    REQUIRE(censorLetter("Bye world", 'o') == "Bye w*rld");
    REQUIRE(censorLetter("Hello world", 'l') == "He**o wor*d");
    REQUIRE(censorLetter("Goodbye world", 'd') == "Goo*bye worl*");
}
</tests>

    </program>

            

<exercise label="mucp_7_9_ac_a">
    <statement>
                <p>Below is one way to write the censorLetter function.</p>

    </statement>
    <program xml:id="mucp_7_9_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

string censorLetter (string input, char letter) {
    int i = 0;
    while ((unsigned)i &lt; input.length()) {
        if (input[i] == letter) {
            input[i] = '*';
        }
        i++;
    }
    return input;
}

        </input>
<tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("censorLetter function") {
    REQUIRE(censorLetter("Bye world", 'o') == "Bye w*rld");
    REQUIRE(censorLetter("Hello world", 'l') == "He**o wor*d");
    REQUIRE(censorLetter("Goodbye world", 'd') == "Goo*bye worl*");
}
</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Let&#8217;s write a function called <c>alphaCombine</c> which takes
                    two strings, first and second,
                    and returns a string which concatenates first and second in
                    alphabetical order. For example,
                    alphabetizer (&#8220;zebra, mega&#8221;) returns the string
                    &#8220;megazebra&#8221; since &#8220;mega&#8221; comes before &#8220;zebra&#8221; in the alphabet.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_7_10_ac_q_editor">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
// YOUR CODE HERE


        </input>
<tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("alphaCombine function") {
    REQUIRE(alphaCombine("zebra","mega") == "megazebra");
    REQUIRE(alphaCombine("alpha","combine") == "alphacombine");
    REQUIRE(alphaCombine("combine","alpha") == "alphacombine");
}
</tests>

    </program><solution>


    
                Below is one way to write the alphaCombine function.

    
    <program xml:id="mucp_7_10_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

string alphaCombine (string first, string second) {
    if (first &gt; second) {
        return second + first;
    }
    else {
        return first + second;
    }
}

        </input>
<tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("alphaCombine function") {
    REQUIRE(alphaCombine("zebra","mega") == "megazebra");
    REQUIRE(alphaCombine("alpha","combine") == "alphacombine");
    REQUIRE(alphaCombine("combine","alpha") == "alphacombine");
}
</tests>

    </program>

            

<exercise label="mucp_7_10_ac_a">
    <statement>
                <p>Below is one way to write the alphaCombine function.</p>

    </statement>
    <program xml:id="mucp_7_10_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

string alphaCombine (string first, string second) {
    if (first &gt; second) {
        return second + first;
    }
    else {
        return first + second;
    }
}

        </input>
<tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("alphaCombine function") {
    REQUIRE(alphaCombine("zebra","mega") == "megazebra");
    REQUIRE(alphaCombine("alpha","combine") == "alphacombine");
    REQUIRE(alphaCombine("combine","alpha") == "alphacombine");
}
</tests>

    </program>
</exercise>
            </solution></exercise>
        <exercise xml:id=""><statement>
                <p>Let&#8217;s write a function called <c>ispalindrome</c> which takes
                    a string named input
                    and returns a bool
                    The function returns true if the string is a palindrome and false if not.
                    palindromes are symmetrical strings.
                    That is a string that reads the same backwards is palindrome.
                    palindromes:  &#8220;hih&#8221;, &#8220;i&#8221;, &#8220;bob&#8221;, &#8220;tenet&#8221;, &#8220;soos&#8221;, &#8220;madam&#8221; .
                    not palindromes: &#8220;join&#8221;, &#8220;hat&#8221;, &#8220;frat&#8221;, &#8220;supper&#8221;, &#8220;rhythm&#8221;.</p>

    </statement><program interactive="activecode" language="cpp" xml:id="mucp_7_11_ac_q_editor">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
// YOUR CODE HERE


        </input>
<tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("ispalindrome function") {
    REQUIRE(ispalindrome("madam") == true);
    REQUIRE(ispalindrome("join") == false);
}
</tests>

    </program><solution>


    
                Below is one way to write the ispalindrome function.

    
    <program xml:id="mucp_7_11_ac_a_editor" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

bool ispalindrome(string input) {
    int front = 0;
    int back = input.length() - 1;
    while (front &lt; back) {
        if( input[b] != input[e] ) {
            return false;
        }
        front = front + 1;
        back = back - 1;
    }
    return true;
}

        </input>
<tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("ispalindrome function") {
    REQUIRE(ispalindrome("madam") == true);
    REQUIRE(ispalindrome("join") == false);
}
</tests>

    </program>

            

<exercise label="mucp_7_11_ac_a">
    <statement>
                <p>Below is one way to write the ispalindrome function.</p>

    </statement>
    <program xml:id="mucp_7_11_ac_a_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

bool ispalindrome(string input) {
    int front = 0;
    int back = input.length() - 1;
    while (front &lt; back) {
        if( input[b] != input[e] ) {
            return false;
        }
        front = front + 1;
        back = back - 1;
    }
    return true;
}

        </input>
<tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("ispalindrome function") {
    REQUIRE(ispalindrome("madam") == true);
    REQUIRE(ispalindrome("join") == false);
}
</tests>

    </program>
</exercise>
            </solution></exercise>
    </section>

