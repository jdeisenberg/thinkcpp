<section xml:id="chapter7_our-own-version-of-find">
        <title>Our own version of <c>find</c></title>
        <p>If we are looking for a letter in a <c>string</c>, we may not want to
            start at the beginning of the string. One way to generalize the <c>find</c>
            function is to write a version that takes an additional parameter&#8212;the
            index where we should start looking. Here is an implementation of this
            function.</p>
        <pre>int find (string s, char c, int i) {
  while (i &lt; s.length()) {
    if (s[i] == c) return i;
    i = i + 1;
  }
  return -1;
}</pre>
        <p>Instead of invoking this function on an <c>string</c>, like the first
            version of <c>find</c>, we have to pass the <c>string</c> as the first
            argument. The other arguments are the character we are looking for and
            the index where we should start.</p>

<exercise label="own_version_find_AC_1">
    <statement>
        <p>In the active code below, we are finding the number of <c>'e'</c> characters in
            the &#8220;Shepard&#8221; part of &#8220;German Shepard&#8221; using our function.
            Then we use the built-in <c>find</c> function to demonstrate how they work differently.</p>

    </statement>
    <program xml:id="own_version_find_AC_1_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int find (string s, char c, int i) {
    int length = s.length();
    while (i &lt; length) {
        if (s[i] == c) {
            return i;
        }
        i = i + 1;
    }
    return -1;
}

int main() {
    string dog = "German Shepard";
    int start_shepard = 7;
    cout &lt;&lt; find(dog, 'e', start_shepard) &lt;&lt; endl;
    cout &lt;&lt; dog.find('e') &lt;&lt; endl;
}
        </input>
<tests>


</tests>

    </program>
</exercise>

    <exercise label="own_version_find_1">
        <statement>

        <p>Q-2: What is the correct output of the code below?</p>
        <program language="cpp"><input>
int main() {
  string quote = "The way to get started is to quit talking and begin doing.";
  cout &lt;&lt; find(quote, 't', 11) &lt;&lt; ", " &lt;&lt; find(quote, 't', 42) &lt;&lt; ", " &lt;&lt; quote.find('t');
}
</input></program>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>13, -1, 8</p>
                </statement>
                <feedback>
                    <p>Notice how the built-in find function works differently from ours.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>13, 0, 7</p>
                </statement>
                <feedback>
                    <p>Remember that when a character isn't found, the function returns -1.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>13, -1, 0</p>
                </statement>
                <feedback>
                    <p>Keep in mind that the find function is case sensitive, so "A" is different from "a".</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>14, -1, 9</p>
                </statement>
                <feedback>
                    <p>Remember that indexing begins at 0 for C++.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    </section>

