<section xml:id="chapter7_increment-and-decrement-operators">
        <title>Increment and decrement operators</title>
        
        
        <p xml:id="chapter7_index-0">Incrementing and decrementing are such common operations that C++
            provides special operators for them. The <c>++</c> operator adds one to the
            current value of an <c>int</c>, <c>char</c> or <c>double</c>, and <c>&#8211;</c> subtracts
            one. Neither operator works on <c>string</c>s, and neither <em>should</em> be
            used on <c>bool</c>s.</p>
        <p>Technically, it is legal to increment a variable and use it in an
            expression at the same time. For example, you might see something like:</p>
        <pre>cout &lt;&lt; i++ &lt;&lt; endl;</pre>
        <p>Looking at this, it is not clear whether the increment will take effect
            before or after the value is displayed. Because expressions like this
            tend to be confusing, I would discourage you from using them. In fact,
            to discourage you even more, I&#8217;m not going to tell you what the result
            is. If you really want to know, you can try it.</p>

<exercise label="increment_decrement_AC_1">
    <statement>
        <p>The active code demonstrates how using increment operators
            with <c>cout</c> statements can be confusing.</p>

    </statement>
    <program xml:id="increment_decrement_AC_1_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
    int x = 0;
    // We incremented x, so it should print out 1 now right?
    cout &lt;&lt; x++ &lt;&lt; endl; // Weird, x is still 0?
}
        </input>
<tests>


</tests>

    </program>
</exercise>
        <p>If you&#8217;re curious about this, feel free to search up about prefix and postfix
            increment operators. But for now, just avoid incrementing a variable
            and using it in an expression at the same time.</p>
        <p>Using the increment operators, we can rewrite the letter-counter:</p>
        <pre>int index = 0;
while (index &lt; length) {
  if (fruit[index] == 'a') {
    count++;
  }
  index++;
}</pre>

<exercise label="increment_decrement_AC_2">
    <statement>
        <p>The active code below adds increment operators to our old letter-counter.</p>

    </statement>
    <program xml:id="increment_decrement_AC_2_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
    string fruit = "banana";
    int length = fruit.length();
    int count = 0;

    int index = 0;
    while (index &lt; length) {
        if (fruit[index] == 'a') {
            count++;
        }
        index++;
    }
    cout &lt;&lt; count &lt;&lt; endl;
}
        </input>
<tests>


</tests>

    </program>
</exercise>
        <p>It is a common error to write something like</p>
        <pre>index = index++;             // WRONG!!</pre>
        <p>Unfortunately, this is syntactically legal, so the compiler will not
            warn you. The effect of this statement is to leave the value of
            <c>index</c> unchanged. This is often a difficult bug to track down.</p>
        <warning>
            <p>Remember, you can write <c>index = index +1;</c>, or you can write
                <c>index++;</c>, but you shouldn&#8217;t mix them.</p>
        </warning>

<exercise label="increment_decrement_1">
    <statement><p>Click on the incorrect or not suggested increment statements.</p></statement>
<feedback><p>Re-read the text above and try again.</p></feedback>
<areas>
<cline><area correct="no">def main() {</area></cline>
<cline>    <area correct="no">count = count + 1;</area></cline>
<cline>    <area correct="no">index++;</area></cline>
<cline>    <area correct="yes">count = count++;</area></cline>
<cline>    <area correct="yes">cout &lt;&lt; x++ &lt;&lt; endl;</area></cline>
<cline>    <area correct="no">count--; </area></cline>
<cline>}</cline>
</areas></exercise>
    <exercise label="increment_decrement_2">
        <statement>

        <p>Q-4: What does the following code print?</p>
        <program language="cpp"><input>
int x = -5;
while (x &lt; 0) {
  x++;
  cout &lt;&lt; x &lt;&lt; " ";
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>5 4 3 2 1</p>
                </statement>
                <feedback>
                    <p>Notice that x is negative.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>-5 -4 -3 -2 -1</p>
                </statement>
                <feedback>
                    <p>Notice that the value of x is incremented before it is printed.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>-4 -3 -2 -1 0</p>
                </statement>
                <feedback>
                    <p>The value of x is incremented before it is printed so the first value printed is -4.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
<exercise label="increment_decrement_3" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>Print every number from 1-10 in this format: &#8220;Number 1&#8221;. Each number should be on its own line.</p>
</statement>
<blocks><block order="5">
<cline>int x = 1;</cline>
</block><block order="1" correct="no">
<cline>x = 1; </cline>
</block><block order="4">
<cline>while (x &lt;= 10) {</cline>
</block><block order="6">
<cline>    cout &lt;&lt; "Number " &lt;&lt; x &lt;&lt; endl;</cline>
</block><block order="3" correct="no">
<cline>    cout &lt;&lt; "Number " &lt;&lt; x; </cline>
</block><block order="2" correct="no">
<cline>    ++x; </cline>
</block><block order="7">
<cline>    x++;</cline>
<cline>}</cline>
</block></blocks></exercise>    </section>

