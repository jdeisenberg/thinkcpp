<section xml:id="chapter7_the-find-function">
        <title>The <c>find</c> function</title>
        <p>The <c>string</c> class provides several other functions that you can
            invoke on strings. The <c>find</c> function is like the opposite the <c>[]</c>
            operator. Instead of taking an index and extracting the character at
            that index, <c>find</c> takes a character and finds the index where that
            character appears.</p>

<exercise label="find_function_AC_1">
    <statement>
        <p>Take a look at the active code below, which uses the <c>find</c> function to find
            the character <c>'a'</c> in string <c>fruit</c> and string <c>dessert</c>.</p>

    </statement>
    <program xml:id="find_function_AC_1_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
    string fruit = "banana";
    int index = fruit.find('a');
    cout &lt;&lt; index &lt;&lt; endl;
    string dessert = "pudding";
    int another_index = dessert.find('a');
    cout &lt;&lt; another_index &lt;&lt; endl;
}
        </input>
<tests>


</tests>

    </program>
</exercise>
        <p>This example finds the index of the letter <c>'a'</c> in the string. In
            this case, the letter appears three times, so it is not obvious what
            <c>find</c> should do. According to the documentation, it returns the index
            of the <em>first</em> appearance, so the result is 1. If the given letter does
            not appear in the string, <c>find</c> returns -1.</p>
        <p>In addition, there is a version of <c>find</c> that takes another
            <c>string</c> as an argument and that finds the index where the substring
            appears in the string.</p>

<exercise label="find_function_AC_2">
    <statement>
        <p>The active code below finds the starting index of <c>"nan"</c> in <c>fruit</c>.</p>

    </statement>
    <program xml:id="find_function_AC_2_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
using namespace std;

int main() {
    string fruit = "banana";
    int index = fruit.find("nan");
    cout &lt;&lt; index;
}
        </input>
<tests>


</tests>

    </program>
</exercise>
        <p>This example returns the value 2.</p>
        <p>You should remember from <number_reference internal="True" refuri="../Chapter5/overloading#overloading" title="Section %s"><inline classes="std std-numref">Section 5.4</inline></number_reference> that
            there can be more than one function with the same name, as long as they
            take a different number of parameters or different types. In this case,
            C++ knows which version of <c>find</c> to invoke by looking at the type of
            the argument we provide.</p>

<exercise label="find_function_1">
    <statement><p>Click on the name of each variable that had been initialized with the value of 0.</p></statement>
<feedback><p>Remember that the index of a string begins at 0, not 1.</p></feedback>
<areas>
<cline><area correct="no">def main() {:</area></cline>
<cline>    <area correct="no">string fruit = "apple";</area></cline>
<cline>    int<area correct="no"> index_a </area>= fruit.find('e');</cline>
<cline>    int<area correct="yes"> index_b </area>= fruit.find("app");</cline>
<cline>    int<area correct="yes"> index_c </area>= fruit.find('a');</cline>
<cline>    int<area correct="no"> index_d </area>= fruit.find('l');</cline>
<cline>}</cline>
</areas></exercise><exercise label="find_function_2" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>Construct a block of code that correctly finds and prints where the first &#8220;B&#8221; is in the string. Declare <c>city</c> before <c>index</c>.</p>
</statement>
<blocks><block order="1" correct="no">
<cline>int main() {</cline>
<cline>   string city = "New Baltimore";</cline>
<cline>   string city = "New Baltimore" </cline>
<cline>   int index;</cline>
<cline>   index = city.find('B');</cline>
<cline>   index = city.find(B); </cline>
<cline>   index = city.find('b'); </cline>
<cline>   cout &lt;&lt; index &lt;&lt; endl;</cline>
<cline>}</cline>
</block></blocks></exercise>
    <exercise label="find_function_3">
        <statement>

        <p>Q-5: What is printed when the code is run?</p>
        <program language="cpp"><input>
string sentence = "Most seas are rough but this sea is so calm!";
string target = "sea";
int index = sentence.find(target);
cout &lt;&lt; "Index to find sea is " &lt;&lt; index &lt;&lt; endl;
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Index to find sea is 29</p>
                </statement>
                <feedback>
                    <p><code>find</code> returns the index of the FIRST occurence of "sea".</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Index to find sea is 5</p>
                </statement>
                <feedback>
                    <p>Correct! <code>index</code> only has to look for a sequence arranged as "sea" in the string.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Index to find sea is -1</p>
                </statement>
                <feedback>
                    <p>sea is present in the <code>sentence</code>.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    </section>

