<section xml:id="chapter14_another-function-on-complex-numbers">
        <title>Another function on <c>Complex</c> numbers</title>
        <p>Another operation we might want is multiplication. Unlike addition,
            multiplication is easy if the numbers are in polar coordinates and hard
            if they are in Cartesian coordinates (well, a little harder, anyway).</p>
        <p>In polar coordinates, we can just multiply the magnitudes and add the
            angles. As usual, we can use the accessor functions without worrying
            about the representation of the objects.</p>
        <pre>Complex mult (Complex&amp; a, Complex&amp; b)
{
  double mag = a.getMag() * b.getMag();
  double theta = a.getTheta() + b.getTheta();
  Complex product;
  product.setPolar (mag, theta);
  return product;
}</pre>
        <p>A small problem we encounter here is that we have no constructor that
            accepts polar coordinates. It would be nice to write one, but remember
            that we can only overload a function (even a constructor) if the
            different versions take different parameters. In this case, we would
            like a second constructor that also takes two <c>double</c>s, and we
            can&#8217;t have that.</p>
        <p>An alternative it to provide an accessor function that <em>sets</em> the
            instance variables. In order to do that properly, though, we have to
            make sure that when <c>mag</c> and <c>theta</c> are set, we also set the
            <c>polar</c> flag. At the same time, we have to make sure that the
            <c>cartesian</c> flag is unset. That&#8217;s because if we change the polar
            coordinates, the cartesian coordinates are no longer valid.</p>
        <pre>void Complex::setPolar (double m, double t)
{
  mag = m;  theta = t;
  cartesian = false;  polar = true;
}</pre>
        <p>As an exercise, write the corresponding function named <c>setCartesian</c>.</p>
        <p>To test the <c>mult</c> function, we can try something like:</p>
        <pre>Complex c1 (2.0, 3.0);
Complex c2 (3.0, 4.0);

Complex product = mult (c1, c2);
product.printCartesian();</pre>
        <p>The output of this program is</p>
        <pre>-6 + 17i</pre>

<exercise label="fourteeneight">
    <statement>
        <p>The active code below uses the <c>mult</c> and <c>setPolar</c> functions.
            Feel free to modify the code and experiment around!</p>

    </statement>
    <program xml:id="fourteeneight_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;cmath&gt;
using namespace std;

class Complex
{
  double real, imag;
  double mag, theta;
  bool cartesian, polar;

public:
  Complex ();
  Complex (double r, double i);
  void calculateCartesian ();
  double getReal ();
  double getImag ();
  void calculatePolar ();
  double getMag ();
  double getTheta ();
  void printCartesian ();
  void printPolar ();
  void setPolar (double m, double t);
};

Complex add (Complex&amp; a, Complex&amp; b);
Complex subtract (Complex&amp; a, Complex&amp; b);
Complex mult (Complex&amp; a, Complex&amp; b);

int main() {
  Complex c1 (2.0, 3.0);
  Complex c2 (3.0, 4.0);
  Complex product = mult (c1, c2);
  product.printCartesian();
}
        </input>
<tests>
Complex::Complex () { cartesian = false;  polar = false; }

Complex::Complex (double r, double i) {
  real = r;  imag = i;
  cartesian = true;  polar = false;
}

void Complex::calculateCartesian () {
  real = mag * cos (theta);
  imag = mag * sin (theta);
  cartesian = true;
}

double Complex::getReal () {
  if (cartesian == false) calculateCartesian ();
  return real;
}

double Complex::getImag () {
  if (cartesian == false) calculateCartesian ();
  return imag;
}

void Complex::calculatePolar () {
  mag = sqrt(pow(real, 2) + pow(imag, 2));
  theta = atan(imag / real);
  polar = true;
}

double Complex::getMag () {
  if (polar == false) {
    calculatePolar ();
  }
  return mag;
}

double Complex::getTheta () {
  if (polar == false) {
    calculatePolar ();
  }
  return theta;
}

void Complex::printCartesian () {
  cout &lt;&lt; getReal() &lt;&lt; " + " &lt;&lt; getImag() &lt;&lt; "i" &lt;&lt; endl;
}

void Complex::printPolar () {
  cout &lt;&lt; getMag() &lt;&lt; " e^ " &lt;&lt; getTheta() &lt;&lt; "i" &lt;&lt; endl;
}

Complex add (Complex&amp; a, Complex&amp; b) {
  double real = a.getReal() + b.getReal();
  double imag = a.getImag() + b.getImag();
  Complex sum (real, imag);
  return sum;
}

Complex subtract (Complex&amp; a, Complex&amp; b) {
  double real = a.getReal() - b.getReal();
  double imag = a.getImag() - b.getImag();
  Complex diff (real, imag);
  return diff;
}

void Complex::setPolar (double m, double t) {
  mag = m;  theta = t;
  cartesian = false;  polar = true;
}

Complex mult (Complex&amp; a, Complex&amp; b) {
  double mag = a.getMag() * b.getMag();
  double theta = a.getTheta() + b.getTheta();
  Complex product;
  product.setPolar (mag, theta);
  return product;
}
</tests>

    </program>
</exercise>
        <p>There is a lot of conversion going on in this program behind the scenes.
            When we call <c>mult</c>, both arguments get converted to polar
            coordinates. The result is also in polar format, so when we invoke
            <c>printCartesian</c> it has to get converted back. Really, it&#8217;s amazing
            that we get the right answer!</p>

    <exercise label="question14_7_1">
        <statement>

        <p>Q-2: What is the correct output of the code below?</p>
        <program language="cpp"><input>
int main() {
  Complex c1 (2.0, 3.0);
  Complex c2 (3.0, 4.0);
  Complex c3 (1.0, 0.0);
  Complex c4 (3.5, 2.5);
  Complex product = mult (c1, c2);
  Complex diff = subtract (c4, c3);
  Complex sum = add (product, diff);
  sum.printCartesian();
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>3.5 + 19.5i</p>
                </statement>
                <feedback>
                    <p>Incorrect! Try using the active code above.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>-3.5 + 19.5i</p>
                </statement>
                <feedback>
                    <p>Correct!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>-3.5 - 19.5i</p>
                </statement>
                <feedback>
                    <p>Incorrect! Try using the active code above.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>-3.5 + 19.5</p>
                </statement>
                <feedback>
                    <p>Incorrect! Try using the active code above.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

<exercise label="fourteennine">
    <statement>
        <p>Now let&#8217;s try implementing the <c>setCartesian</c> function. Write your
            implementation in the commented area of the active code below.
            Read the comments in <c>main</c> to test out your code! If you get stuck,
            you can reveal the extra problem at the end for help.</p>

    </statement>
    <program xml:id="fourteennine_editor" interactive="activecode" language="cpp">

        <input>
#include &lt;iostream&gt;
#include &lt;cmath&gt;
using namespace std;

class Complex
{
  double real, imag;
  double mag, theta;
  bool cartesian, polar;

public:
  Complex ();
  Complex (double r, double i);
  void calculateCartesian ();
  double getReal ();
  double getImag ();
  void calculatePolar ();
  double getMag ();
  double getTheta ();
  void printCartesian ();
  void printPolar ();
  void setPolar (double m, double t);
  void setCartesian (double r, double i);
};

void Complex::setCartesian (double r, double i) {
  // ``setCartesian`` should set real and imag to
  // r and i respectively and set the cartesian flag.
  // Write your implementation here.
}

Complex add (Complex&amp; a, Complex&amp; b);
Complex subtract (Complex&amp; a, Complex&amp; b);
Complex mult (Complex&amp; a, Complex&amp; b);

int main() {
  Complex c1 (2.0, 3.0);
  Complex c2 (3.0, 4.0);
  Complex product = mult (c1, c2);
  product.printCartesian();
  // Should output 1.5 + 2.7i
  product.setCartesian(1.5, 2.7);
  product.printCartesian();
}
        </input>
<tests>
Complex::Complex () { cartesian = false;  polar = false; }

Complex::Complex (double r, double i) {
  real = r;  imag = i;
  cartesian = true;  polar = false;
}

void Complex::calculateCartesian () {
  real = mag * cos (theta);
  imag = mag * sin (theta);
  cartesian = true;
}

double Complex::getReal () {
  if (cartesian == false) calculateCartesian ();
  return real;
}

double Complex::getImag () {
  if (cartesian == false) calculateCartesian ();
  return imag;
}

void Complex::calculatePolar () {
  mag = sqrt(pow(real, 2) + pow(imag, 2));
  theta = atan(imag / real);
  polar = true;
}

double Complex::getMag () {
  if (polar == false) {
    calculatePolar ();
  }
  return mag;
}

double Complex::getTheta () {
  if (polar == false) {
    calculatePolar ();
  }
  return theta;
}

void Complex::printCartesian () {
  cout &lt;&lt; getReal() &lt;&lt; " + " &lt;&lt; getImag() &lt;&lt; "i" &lt;&lt; endl;
}

void Complex::printPolar () {
  cout &lt;&lt; getMag() &lt;&lt; " e^ " &lt;&lt; getTheta() &lt;&lt; "i" &lt;&lt; endl;
}

Complex add (Complex&amp; a, Complex&amp; b) {
  double real = a.getReal() + b.getReal();
  double imag = a.getImag() + b.getImag();
  Complex sum (real, imag);
  return sum;
}

Complex subtract (Complex&amp; a, Complex&amp; b) {
  double real = a.getReal() - b.getReal();
  double imag = a.getImag() - b.getImag();
  Complex diff (real, imag);
  return diff;
}

void Complex::setPolar (double m, double t) {
  mag = m;  theta = t;
  cartesian = false;  polar = true;
}

Complex mult (Complex&amp; a, Complex&amp; b) {
  double mag = a.getMag() * b.getMag();
  double theta = a.getTheta() + b.getTheta();
  Complex product;
  product.setPolar (mag, theta);
  return product;
}
</tests>

    </program>
</exercise>
        <exercises line="348" runestone_options="{'showtitle': 'data-showtitle=&quot;Reveal Problem&quot;', 'hidetitle': 'data-hidetitle=&quot;Hide Problem&quot;', 'subchapter': 'another_function_on_complex_numbers', 'chapter': 'Chapter14', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'divid': '14_7_1', 'instructoronly': '', 'is_dynamic': 'True'}" source="/home/david/runestone/books/thinkcpp/_sources/Chapter14/another_function_on_complex_numbers.rst">
<exercise label="question14_7_2" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
            <p>Let&#8217;s write the code for the <c>setCartesian</c> function.</p>
</statement>
<blocks><block order="7">
<choice correct="yes"><cline>void Complex::setCartesian (double r, double i) {</cline>
</choice><choice><cline>Complex Complex::setCartesian (double r, double i) {                         </cline>
</choice></block><block order="6">
<choice correct="yes"><cline>   real = r;    imag = i;</cline>
</choice><choice><cline>   real = i;    imag = r;                         </cline>
</choice></block><block order="4">
<choice correct="yes"><cline>   cartesian = true;  polar = false;</cline>
</choice><choice><cline>   cartesian = false;  polar = true;                         </cline>
</choice></block><block order="5">
<cline>}</cline>
</block></blocks></exercise>        </exercises>
    </section>

